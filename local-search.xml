<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Cloud Eureka 组件:服务的注册与发现</title>
    <link href="/2023/06/01/back-end/spring-cloud/eureka/"/>
    <url>/2023/06/01/back-end/spring-cloud/eureka/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Eureka-组件-服务的注册与发现"><a href="#Spring-Cloud-Eureka-组件-服务的注册与发现" class="headerlink" title="Spring Cloud Eureka 组件:服务的注册与发现"></a>Spring Cloud Eureka 组件:服务的注册与发现</h1><h2 id="为什么需要服务注册？"><a href="#为什么需要服务注册？" class="headerlink" title="为什么需要服务注册？"></a>为什么需要服务注册？</h2><p>假如 A 服务调用 B 服务，在正常情况下，我们会在 java 代码中写一个 Get 或者 Post 请求，但这个时候我们请求的 url 固定写死的，假如 URL 为<code>http:127.0.0.1:8888/api/user</code></p><p>那么如果 B 服务做了负载均衡或者动了端口，我们就需要更改代码中写死的 URL，后续还要做重复打包上线这些无用功</p><p>现在我们使用 Eureka 后，把所有的服务放在一个池子里面，当 B 服务注册在池子里面，并且给定一个服务名称 B-Service，那么无论 B 服务是更改端口，或是做负载均衡，A 服务是根据 B 服务的名字 B-Service 进行请求的</p><p>因此我们需要服务注册，同时 A 能拉取服务列表，也就说明在服务注册后，其他服务可以发现此服务，就是服务发现。</p><p>注册服务的一方是<strong>服务提供者</strong>，而调用其他服务的接口的则是<strong>服务消费者</strong>，两者是相对的。</p><p>同时，一个服务可以是服务提供者，又可以是服务消费者，关键是以谁为参照物。例如 A 服务调用 B 服务，B 服务又去调用了 C 服务接口，那么 B 服务相对于 A 来说就是服务提供者，相对于 C 服务来说就是服务消费者。</p><h2 id="新建一个-Eureka-Server-服务端"><a href="#新建一个-Eureka-Server-服务端" class="headerlink" title="新建一个 Eureka Server 服务端"></a>新建一个 Eureka Server 服务端</h2><h3 id="创建一个-Spring-Boot-项目"><a href="#创建一个-Spring-Boot-项目" class="headerlink" title="创建一个 Spring Boot 项目"></a>创建一个 Spring Boot 项目</h3><p><img src="http://images.zabbix.store/images/image-20220128124531953.png" alt="image-20220128124531953"></p><p>点击下一步，搜索依赖<code>eureka</code> 然后选择 eureka-server</p><p><img src="http://images.zabbix.store/images/image-20220128124650926.png" alt="image-20220128124650926"></p><p>点击 Finish</p><p>使用全文搜索 <strong>SpringBootApplication</strong>，然后在其上增加一行注解 <strong>@EnableEurekaServer</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@EnableEurekaServer</span> 激活注册中心，激活相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenshinEurekaApplication</span> &#123;<br></code></pre></td></tr></table></figure><p>配置文件 <strong>application.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 项目端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">9001</span><br><span class="hljs-comment"># 设置该服务注册中心的hostname</span><br><span class="hljs-attr">eureka.instance.hostname</span>=<span class="hljs-string">localhost</span><br><span class="hljs-comment"># 由于我们目前创建的应用是一个服务注册中心，而不是普通的应用，默认情况下</span><br><span class="hljs-comment"># 这个应用会向注册中心(也是它自己)注册它自己，设置为false表示禁止这种自己向自己注册的默认行为</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 表示不去从服务端检索其他服务信息，因为自己就是服务端</span><br><span class="hljs-comment"># 服务注册中心本身的职责就是维护服务实例，它不需要去检索其他服务</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 指定服务注册中心的位置</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://localhost:9001/eureka</span><br></code></pre></td></tr></table></figure><p>启动此应用，然后在浏览器访问<a href="http://localhost:9001/">http://localhost:9001</a>即可看到项目的 web 窗口显示</p><p><img src="http://images.zabbix.store/images/image-20220128234732497.png" alt="image-20220128234732497"></p><h2 id="eureka-实现高可用"><a href="#eureka-实现高可用" class="headerlink" title="eureka 实现高可用"></a>eureka 实现高可用</h2><p>修改电脑的<strong>hosts</strong>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/hosts<br></code></pre></td></tr></table></figure><p>增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 shanghai<br>127.0.0.1 beijing<br></code></pre></td></tr></table></figure><p>然后<strong>application.properties</strong>配置文件的内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">eureka-server</span><br><span class="hljs-comment"># 项目端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">9001</span><br><span class="hljs-comment"># 设置该服务注册中心的hostname</span><br><span class="hljs-attr">eureka.instance.hostname</span>=<span class="hljs-string">beijing</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 指定服务注册中心的位置</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://shanghai:9002/eureka/</span><br></code></pre></td></tr></table></figure><p><strong>application-sh.properties</strong>配置文件如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">eureka-server</span><br><span class="hljs-comment"># 项目端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">9002</span><br><span class="hljs-comment"># 设置该服务注册中心的hostname</span><br><span class="hljs-attr">eureka.instance.hostname</span>=<span class="hljs-string">shanghai</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 指定服务注册中心的位置</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://beijing:9001/eureka/</span><br></code></pre></td></tr></table></figure><p>启动完成默认的 eureka 之后，修改启动配置项如下</p><p><img src="http://images.zabbix.store/images/image-20220129160324618.png" alt="image-20220129160324618"></p><p>启动完成以后，可以在 eureka 控制面板看到如下内容</p><p><img src="http://images.zabbix.store/images/image-20220129160437402.png" alt="image-20220129160437402"></p><p>源代码在下面地址：</p><p><a href=""></a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Cloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Nacos 微服务的注册与发现</title>
    <link href="/2023/05/01/back-end/spring-cloud/nacos-register-discover/"/>
    <url>/2023/05/01/back-end/spring-cloud/nacos-register-discover/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>什么是 Nacos ？</p><p>之前有 Eureka，但是其 2.x 版本已经闭源，等于凉了。阿里开源了 Nacos 作为配置与注册中心，动态发现服务与动态配置。</p><p>具体的解释与作用见官方文档: <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><p><img src="https://nacos.io/img/nacosMap.jpg" alt="nacos_map"></p><h3 id="2-适配版本"><a href="#2-适配版本" class="headerlink" title="2. 适配版本"></a>2. 适配版本</h3><p>搭建整个微服务体系的前奏，是要设置好 Spring Cloud 与 Spring Boot 以及 Spring Cloud ALibaba 的版本保持兼容。</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">https://github.com/alibaba/spring-cloud-alibaba/wiki/版本</a></p><p><img src="http://images.zabbix.store/markdown/image-20220824090832474.png?markdown" alt="各版本对应"></p><p>这里先取最新的版本，开始找 Alibaba 版本支持的 Nacos 版本</p><p><img src="http://images.zabbix.store/markdown/image-20220824090946760.png?markdown" alt="Nacos版本对应"></p><p>根据我们的搜索，查询到需要安装 Nacos 的 1.4.2 版本。</p><blockquote><p>tips: Nacos 的读音是钠科(噢)斯，别面试的时候不知道怎么读。</p></blockquote><h3 id="3-安装-Naocs"><a href="#3-安装-Naocs" class="headerlink" title="3. 安装 Naocs"></a>3. 安装 Naocs</h3><p>下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/alibaba/nacos/releases/download/1.4.2/nacos-server-1.4.2.zip<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220824091828357.png?markdown" alt="image-20220824091828357"></p><p>解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip nacos-server-1.4.2.zip<br></code></pre></td></tr></table></figure><p>删除安装包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf nacos-server-1.4.2.zip<br></code></pre></td></tr></table></figure><p>启动 Nacos:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nacos/bin<br>./startup.sh -m standalone<br></code></pre></td></tr></table></figure><p>输出如下，证明启动成功</p><p><img src="http://images.zabbix.store/markdown/image-20220824092241382.png?markdown" alt="image-20220824092241382"></p><p>使用浏览器打开网址:<a href="http://127.0.0.1:8848/nacos/#/login">http://127.0.0.1:8848/nacos/#/login</a></p><p><img src="http://images.zabbix.store/markdown/image-20220824092522486.png?markdown" alt="image-20220824092522486"></p><p>用户名与密码都是 <code>nacos</code> ，然后登录就能看到 Naocs 后台页面，如下。</p><p><img src="http://images.zabbix.store/markdown/image-20220824092639314.png?markdown" alt="image-20220824092639314"></p><h3 id="4-配置持久化"><a href="#4-配置持久化" class="headerlink" title="4. 配置持久化"></a>4. 配置持久化</h3><p>为什么需要配置持久化？</p><p>使用 Nacos 内置数据库存储数据不方便观察，集成 MySQL 的，可以很方便的查阅数据，备份数据等。</p><h4 id="4-1-初始化数据库"><a href="#4-1-初始化数据库" class="headerlink" title="4.1 初始化数据库"></a>4.1 初始化数据库</h4><p>找到数据库的初始化文件</p><p><img src="http://images.zabbix.store/markdown/image-20220824095753069.png?markdown" alt="image-20220824095753069"></p><p>在 <code>Nacos</code> 解压过后的根目录的 <code>conf</code> 文件夹下有两个 sql 文件</p><p><img src="http://images.zabbix.store/markdown/image-20220824095954495.png?markdown" alt="image-20220824095954495"></p><p>使用 <code>Navicat</code> 或者其他工具新建一个 <code>MySQL</code> 数据库，数据库名字可以自定义，用你所想。</p><p>然后使用 <code>Navicat</code> 工具运行 <code>sql</code> 文件，把 <code>nacos-mysql.sql</code> 导入库中，导入后的状态如下</p><p><img src="http://images.zabbix.store/markdown/image-20220824100351260.png?markdown" alt="image-20220824100351260"></p><h4 id="4-2-修改配置文件"><a href="#4-2-修改配置文件" class="headerlink" title="4.2 修改配置文件"></a>4.2 修改配置文件</h4><p>进入解压后的 <code>nacos</code> 文件夹，根目录中的 <code>conf</code> 目录下有一个名字为 <code>application.properties</code> 的文件</p><p><img src="http://images.zabbix.store/markdown/image-20220824101937816.png?markdown" alt="image-20220824101937816"></p><p>启动的 <code>Nacos</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先停止之前我们</span><br><span class="hljs-comment"># 先进入 nacos/bin 目录下</span><br>./shutdown.sh<br><span class="hljs-comment"># 启动</span><br>./startup.sh -m standalone<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220824102410002.png?markdown" alt="image-20220824102410002"></p><h4 id="4-3-测试-MySQL-持久化"><a href="#4-3-测试-MySQL-持久化" class="headerlink" title="4.3 测试 MySQL 持久化"></a>4.3 测试 MySQL 持久化</h4><p>打开 Nacos 管理界面，新建一个用户，查看数据库中是否存在</p><p><img src="http://images.zabbix.store/markdown/image-20220824102915940.png?markdown" alt="image-20220824102915940"></p><p><code>Nacos</code> 服务的数据持久化已接入 <code>MySQL</code> 数据库。</p>]]></content>
    
    
    <categories>
      
      <category>Spring Cloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>注册中心</tag>
      
      <tag>服务发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0 主从复制详解与实践</title>
    <link href="/2023/04/01/database/mysql-master-slave/"/>
    <url>/2023/04/01/database/mysql-master-slave/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-8-0-主从复制详解与实践"><a href="#MySQL-8-0-主从复制详解与实践" class="headerlink" title="MySQL 8.0 主从复制详解与实践"></a>MySQL 8.0 主从复制详解与实践</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>MySQL 8.0 提供了强大的主从复制功能，允许将数据从一个服务器同步到另一个服务器，以实现数据备份、高可用性和读写分离等优势。本文将深入探讨 MySQL 8.0 主从复制的原理、配置和实践，带你一步步实现主从复制的设置。</p><h3 id="2-什么是主从复制？"><a href="#2-什么是主从复制？" class="headerlink" title="2. 什么是主从复制？"></a>2. 什么是主从复制？</h3><p><strong>基本概念</strong></p><p>数据库主从复制基于主从关系，其中一个数据库被定义为主数据库（Master），而另一个被定义为从数据库（Slave）。主数据库负责接收和记录所有的数据变更操作，包括插入、更新和删除。从数据库则通过复制主数据库的变更日志来保持数据的同步。</p><p><strong>作用和优势：</strong></p><ul><li><p><strong>灾备</strong>: 主从复制允许将主数据库的数据实时复制到从数据库中，这样在主数据库发生故障时，可以快速切换到从数据库以继续提供服务，从而实现高可用性和灾难恢复。</p></li><li><p><strong>读写分离</strong>：主从复制使得从数据库可以用于处理只读查询，分担主数据库的负荷。这提高了系统的性能和响应速度，尤其在高并发情况下。</p></li><li><p><strong>数据分析和报表生成</strong>: 从数据库可以用于执行复杂的数据分析和报表生成操作，而不影响主数据库的性能，从而优化了业务流程。</p></li><li><p><strong>分布式数据部署：</strong> 主从复制可以用于在不同地理位置部署数据库，从而实现数据在不同地区的复制和同步。</p></li><li><p><strong>升级和测试：</strong> 通过将主数据库升级或者测试新功能，从数据库可以继续提供服务，从而不影响线上环境。</p></li></ul><p><strong>应用场景</strong></p><ul><li><strong>电子商务平台：</strong> 在电商平台中，主从复制可以用于实现读写分离，提高并发处理能力，同时确保数据的一致性。</li><li><strong>社交网络：</strong> 在社交网络应用中，可以利用主从复制来提供快速的读取服务，同时将数据变更复制到从数据库以备份数据。</li><li><strong>实时监控和报警系统：</strong> 在监控系统中，主从复制可以用于实现数据的分布式存储和快速数据查询。</li><li><strong>新闻和媒体网站：</strong> 在高访问量的新闻网站中，可以使用主从复制来提供高可用性和快速的内容访问。</li><li><strong>金融服务：</strong> 在金融行业，数据的安全性和可用性至关重要，主从复制可以用于数据备份和高可用性的实现。</li></ul><h3 id="3-主从复制的原理"><a href="#3-主从复制的原理" class="headerlink" title="3. 主从复制的原理"></a>3. 主从复制的原理</h3><ul><li>当主库在事务提交时，会将数据的变更记录在二进制日志文件（Binlog）中。</li><li>从库会读取主库的二进制日志文件，并将其写入中继日志（Relay Log）中。</li><li>从库会重新执行中继日志中的事件，从而反映出自己的数据的变化。</li></ul><h3 id="4-环境准备和配置"><a href="#4-环境准备和配置" class="headerlink" title="4. 环境准备和配置"></a>4. 环境准备和配置</h3><p>两台装有 MySQL 的服务器</p><ul><li>主: 192.168.64.4</li><li>从: 192.168.64.5</li></ul><blockquote><p>开放 3306 端口</p></blockquote><h3 id="5-主从库配置"><a href="#5-主从库配置" class="headerlink" title="5. 主从库配置"></a>5. 主从库配置</h3><h4 id="5-1-主库配置"><a href="#5-1-主库配置" class="headerlink" title="5.1 主库配置"></a>5.1 主库配置</h4><p>修改配置文件 <code>/etc/my.cnf  </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">#mysql 服务1D，保证整个集群环境中唯一，取值范围：1-232-1，默认为1<br>server-id=1<br><br># 是否只读, 1 代表只读，0代表读写<br>read-only=0<br><br>#忽略的数据，指不需要同步的数据库<br>#inlog-ignore-db=mysql<br><br>#指定同步的数据库<br>#binlog-do-db=dbo1<br></code></pre></td></tr></table></figure><p><strong>主库创建数据同步的用户并授权</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &#x27;master&#x27;@&#x27;192.168.64.5&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Root@1998&#x27;;<br>GRANT REPLICATION SLAVE ON *.* TO &#x27;master&#x27;@&#x27;192.168.64.5&#x27;;<br># 记得刷一下权限<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看主库同步日志状态<br>mysql&gt; show master status;<br>+---------------+----------+--------------+------------------+-------------------+<br>| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+---------------+----------+--------------+------------------+-------------------+<br>| binlog.000006 |     1951 |              |                  |                   |<br>+---------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><ul><li>File 这里对应下述的 <code>SOURCE_LOG_FILE</code></li><li>Position 这里对应下述的 <code>SOURCE_LOG_POS</code></li></ul><h4 id="5-2-从库配置"><a href="#5-2-从库配置" class="headerlink" title="5.2 从库配置"></a>5.2 从库配置</h4><p>修改配置文件 <code>/etc/my.cnf  </code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">server-id</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><br><span class="hljs-attribute">read-only</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>设置主库地址以及同步地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CHANGE REPLICATION SOURCE TO SOURCE_HOST=&#x27;192.168.64.4&#x27;,<br>SOURCE_USER=&#x27;master&#x27;,<br>SOURCE_PASSWORD=&#x27;Root@1998&#x27;,<br>SOURCE_LOG_FILE=&#x27;binlog.000006&#x27;,<br>SOURCE_PORT=3306,<br>SOURCE_LOG_POS=1419;<br></code></pre></td></tr></table></figure><p>执行开启从库复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start slave;<br></code></pre></td></tr></table></figure><p>查看从库配置状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show slave status\G;<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20230811162637290.png" alt="image-20230811162637290"></p><p>这两项要为 <code>yes</code>.</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL8</tag>
      
      <tag>Java 进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 服务器配置远程登录</title>
    <link href="/2023/03/01/linux/ubuntu-remote-login/"/>
    <url>/2023/03/01/linux/ubuntu-remote-login/</url>
    
    <content type="html"><![CDATA[<h3 id="1-使用命令安装启用-SSH"><a href="#1-使用命令安装启用-SSH" class="headerlink" title="1.使用命令安装启用 SSH"></a>1.使用命令安装启用 SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><p>这里需要输入一下 <code>y</code> ，表示确定</p><p>检查 ssh 服务是否启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ps -e | grep ssh<br></code></pre></td></tr></table></figure><p>如果有 <a href="https://so.csdn.net/so/search?q=sshd&spm=1001.2101.3001.7020">sshd</a> 则说明 ssh 服务已启动，如果没有启动，输入下边命令启动 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service ssh start<br></code></pre></td></tr></table></figure><h3 id="开启-root-用户远程登录"><a href="#开启-root-用户远程登录" class="headerlink" title="开启 root 用户远程登录"></a>开启 root 用户远程登录</h3><p>如果是 root 用户登录，则会提示失败的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到 PermitRootLogin 去掉前边的 # ，后边修改为 yes  </p><p>允许ssh密码登录权限</p><p>修改<code>PasswordAuthentication no</code>为：<code>PasswordAuthentication yes</code>。</p><p>保存后重启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service ssh restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Login</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04 安装 MySQL 8</title>
    <link href="/2023/03/01/database/Ubuntu-intsall-mysql8/"/>
    <url>/2023/03/01/database/Ubuntu-intsall-mysql8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL 是最流行的开源关系数据库管理系统。 它快速，易于使用，可扩展，并且是流行的 LAMP 和 LEMP 栈的组成部分</p></blockquote><p><a href="https://www.mysql.com/">MySQL</a> 是最流行的开源关系数据库管理系统。它快速，易于使用，可扩展，并且是流行的<code>LAMP</code>和<code>LEMP</code>栈的组成部分。</p><p>随着 MySQL 的不断成熟，它也逐渐用于更多大规模网站和应用。本教程介绍了如何在 Ubuntu 20.04 上安装和配置 MySQL。</p><p>包括<a href="https://www.myfreax.com/how-to-use-apt-command/">使用 apt 命令</a>安装 MySQL 8.0 服务器，初始化 MySQL 并配置 MySQL 的验证方式，以 root 用户身份登录 MySQL，解决 MySQL root 用户权限问题。</p><p>在撰写本文时，Ubuntu 20.04 存储库中可用的 MySQL 当前版本为 8.0。要安装它，请以 <a href="https://www.myfreax.com/how-to-create-a-sudo-user-on-ubuntu/">root 用户或具有 sudo 权限的用户</a>运行以下命令。</p><p>首先更新软件包索引运行<code>sudo apt update</code>命令。然后运行<code>sudo apt install mysql-server</code>安装 MySQL 服务器。</p><p>安装完成后，MySQL 服务将作为 <a href="https://www.myfreax.com/use-systemctl-management-linux-service/">systemd 服务</a>自动启动。你可以运行<code>sudo systemctl status mysql</code>命令验证 MySQL 服务器是否正在运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install mysql-server<br>sudo systemctl status mysql<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">●</span> <span class="hljs-string">mysql.service</span> <span class="hljs-bullet">-</span> <span class="hljs-string">MySQL</span> <span class="hljs-string">Community</span> <span class="hljs-string">Server</span><br>     <span class="hljs-attr">Loaded:</span> <span class="hljs-string">loaded</span> <span class="hljs-string">(/lib/systemd/system/mysql.service;</span> <span class="hljs-string">enabled;</span> <span class="hljs-attr">vendor preset:</span> <span class="hljs-string">enabled)</span><br>     <span class="hljs-attr">Active:</span> <span class="hljs-string">active</span> <span class="hljs-string">(running)</span> <span class="hljs-string">since</span> <span class="hljs-string">Tue</span> <span class="hljs-number">2020-04-28 20:59:52 </span><span class="hljs-string">UTC;</span> <span class="hljs-string">10min</span> <span class="hljs-string">ago</span><br>   <span class="hljs-attr">Main PID:</span> <span class="hljs-number">8617</span> <span class="hljs-string">(mysqld)</span><br>     <span class="hljs-attr">Status:</span> <span class="hljs-string">&quot;Server is operational&quot;</span><br>     <span class="hljs-string">...</span><br><br></code></pre></td></tr></table></figure><h2 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h2><p>当 MySQL 安装完成后，你可能会想运行命令<code>mysql -u root -p</code>登录到 MySQL 服务器。</p><p>如果你登录到 Ubuntu 的用户不是 root 用户你将不能访问 MySQL 服务器。如果你尝试使用密码登录也将被拒绝连接，MySQL root 用户默认是没有密码。</p><p>你将会收到类似于这样的消息 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) 或者 ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’。</p><p>这是因为在 MySQL 8.0 上，对 root 用户使用<code>auth_socket</code>插件进行身份验证。<code>auth_socket</code>插件仅对从<code>localhost</code>连接到 Unix socket 文件用户进行身份验证。</p><p>这意味着您无法通过提供密码来以 root 用户连接到 MySQL 服务器。但你可以通过命令<code>sudo mysql</code>连接到 MySQL 服务器。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mysql</span><br><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Welcome <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>mysql&gt;<br><br><br></code></pre></td></tr></table></figure><p>如果您要使用外部程序，例如 phpMyAdmin。以 root 用户连接到 MySQL 服务器，则有两个选择。</p><p>第一个是将身份验证方法从<code>auth_socket</code>更改为<code>mysql_native_password</code>。您可以通过运行 ALTER USER SQL 语句命令来做到这一点。</p><p>第二个选项是创建一个新的专用管理用户，该用户可以访问所有数据库。</p><p>下面将使用第一个选项运行 ALTER USER SQL 语句使 root 用户使用密码进行身份验证。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> root@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br><br></code></pre></td></tr></table></figure><p>如果你需要配置 MySQL 用户的远程访问，可参考我们的教程<a href="https://www.myfreax.com/mysql-remote-access/">如何允许 MySQL 数据库服务器的远程连接</a><strong>。</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我们向您展示了如何在 Ubuntu 20.04 安装 MySQL。 现在您的数据库服务器已启动并正在运行，下一步是学习<a href="https://www.myfreax.com/how-to-manage-mysql-databases-and-users-from-the-command-line/">如何管理 MySQL 用户帐户和数据库</a>。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 基础笔记</title>
    <link href="/2023/03/01/database/mysql-base/"/>
    <url>/2023/03/01/database/mysql-base/</url>
    
    <content type="html"><![CDATA[<h3 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> [用户名] identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;[密码]&#x27;</span>;<br><span class="hljs-comment">-- 赋予数据库权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> [数据库].<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> [用户名]@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;[密码]&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><h3 id="开启远程登录权限"><a href="#开启远程登录权限" class="headerlink" title="开启远程登录权限"></a>开启远程登录权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用%赋予访问权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;[用户名]&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;[密码]&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><span class="hljs-comment">-- 重载授权表</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>可能会报异常</p><blockquote><p>1819 - Your password does not satisfy the current policy requirements</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 默认值为1, 密码强度等级 [LOW:0| MEDIUM:1 | STRONG:2]</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 默认为8，限制密码长度的最小字符数</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_length<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>修改密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><span class="hljs-keyword">Rows</span> matched: <span class="hljs-number">1</span>  Changed: <span class="hljs-number">1</span>  Warnings: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>初始化设置密码</p><p>You must reset your password using ALTER USER statement before executing this statement</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;root&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven引入本地jar包的方法</title>
    <link href="/2023/03/01/back-end/maven-local-jar-import/"/>
    <url>/2023/03/01/back-end/maven-local-jar-import/</url>
    
    <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>引入达梦的数据库驱动</p><p><strong>操作</strong></p><h4 id="1-引入-jar-到目录"><a href="#1-引入-jar-到目录" class="headerlink" title="1.引入 jar 到目录"></a>1.引入 jar 到目录</h4><p><img src="http://images.zabbix.store/markdown/image-20221117135856140.png?markdown" alt="image-20221117135856140"></p><h4 id="pom-xml-中引入"><a href="#pom-xml-中引入" class="headerlink" title="pom.xml 中引入"></a>pom.xml 中引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dameng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>database<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/libs/DmJdbcDriver18.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>groupId：自定义</li><li>artifactId：自定义</li><li>version：自定义</li><li>scope：必须是 system</li><li>systemPath：jar 包的路径</li></ul><h4 id="打包引入本地包"><a href="#打包引入本地包" class="headerlink" title="打包引入本地包"></a>打包引入本地包</h4><p>在 pom.xml 中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includeSystemScope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeSystemScope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要是<code>&lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;</code> 这个。</p><p>然后使用 <code>idea</code> 的 maven package 就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Java 设计模式】策略模式</title>
    <link href="/2023/03/01/back-end/design-pattern/strategic-pattern/"/>
    <url>/2023/03/01/back-end/design-pattern/strategic-pattern/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>在此篇文章，我们将看看如何在 Java 8 中实现策略设计模式。</p><p>首先，我们将概述该模式，并解释传统上它是如何在旧版本的 Java 中实现的。</p><p>接下来，我们将再次尝试该模式，只是这次使用 Java 8 lambda，减少了代码的冗长。</p><h3 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h3><p>本质上，策略模式允许我们在运行时改变算法的行为。</p><p>通常，我们会从一个用于应用算法的接口开始，然后为每个可能的算法多次实现它。</p><p>假设我们需要根据是 618、双十一还是新年，对购买应用不同类型的折扣。</p><p>首先，让我们创建一个 <code>Discounter</code> 接口，它将由我们的每个策略实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Discounter</span> &#123;<br>    BigDecimal <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(BigDecimal amount)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后假设我们想在 <code>618</code> 应用 <code>20%</code> 的折扣，在 <code>双十一</code> 应用 <code>30%</code> 的折扣。</p><p>让我们为这些策略中的每一个实现我们的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MidYearDiscounter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discounter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(<span class="hljs-keyword">final</span> BigDecimal amount)</span> &#123;<br>        <span class="hljs-keyword">return</span> amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OneSDayDiscounter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discounter</span> &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(<span class="hljs-keyword">final</span> BigDecimal amount)</span> &#123;<br>       <span class="hljs-keyword">return</span> amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.7</span>));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，让我们在测试中尝试一个策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.demo.design.Discounter;<br><span class="hljs-keyword">import</span> com.demo.design.impl.MidYearDiscounter;<br><span class="hljs-keyword">import</span> org.assertj.core.api.AssertionsForClassTypes;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMain</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDiscounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 618 折扣</span><br>        <span class="hljs-type">Discounter</span> <span class="hljs-variable">midYearDiscounter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MidYearDiscounter</span>();<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">discountedValue</span> <span class="hljs-operator">=</span> midYearDiscounter<br>                .applyDiscount(BigDecimal.valueOf(<span class="hljs-number">100</span>));<br>        AssertionsForClassTypes.assertThat(discountedValue)<br>                .isEqualByComparingTo(BigDecimal.valueOf(<span class="hljs-number">80</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过，也搞定了我们的问题，但另一些问题是必须为每个策略创建一个具体的类可能有点痛苦。</p><p>另一种方法是使用匿名内部类型，虽然仍然非常冗长，但是比以之前的解决方案更轻便一些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Discounter</span> <span class="hljs-variable">midYearDiscounter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Discounter</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(<span class="hljs-keyword">final</span> BigDecimal amount)</span> &#123;<br>        <span class="hljs-keyword">return</span> amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.8</span>));<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-使用-Java-8"><a href="#3-使用-Java-8" class="headerlink" title="3.使用 Java 8"></a>3.使用 Java 8</h3><p>自 Java 8 发布以来，lambdas 的引入使匿名内部类型或多或少变得多余，这意味着创建策略现在变得更加简洁和容易。</p><h4 id="3-1-减少代码冗长"><a href="#3-1-减少代码冗长" class="headerlink" title="3.1 减少代码冗长"></a>3.1 减少代码冗长</h4><p>让我们尝试创建一个内联 <code>MidYearDiscounter</code>，只是这次使用 lambda 表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Discounter</span> <span class="hljs-variable">midYearDiscounter</span> <span class="hljs-operator">=</span> amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.8</span>));<br></code></pre></td></tr></table></figure><p>正如我们所看到的，我们的代码现在变得更简洁、更易于维护，实现了与以前相同的效果，但只需一行代码。</p><p>本质上，可以将 lambda 视为匿名内部类型的替代品。</p><p>当我们想要在行中声明更多的 Discounter 时，这种优势变得更加明显：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Lists.newArrayList 引入的包</span><br><span class="hljs-comment">// import com.google.common.collect.Lists;</span><br><span class="hljs-comment">// ----------------------------------------</span><br>List&lt;Discounter&gt; discounters = Lists.newArrayList(<br>         amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.8</span>)),<br>         amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.9</span>)),<br>         amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.5</span>))<br> );<br></code></pre></td></tr></table></figure><p>当我们想要定义很多 <code>Discounter</code> 时，我们可以在一个地方静态地声明它们。</p><p>如果我们愿意，Java 8 甚至允许我们在接口中定义静态方法。</p><p>因此，与其在具体类或匿名内部类型之间进行选择，不如尝试在单个类中创建 lambda：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Discounter</span> &#123;<br>    BigDecimal <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(BigDecimal amount)</span>;<br><br>    <span class="hljs-keyword">static</span> Discounter <span class="hljs-title function_">midYearDiscounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.8</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Discounter <span class="hljs-title function_">newYearDiscounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.5</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Discounter <span class="hljs-title function_">oneSDayDiscounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> amount -&gt; amount.multiply(BigDecimal.valueOf(<span class="hljs-number">0.7</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正如我们所看到的，我们可以使用很少的代码进行实现。</p><h4 id="3-2-利用函数组合"><a href="#3-2-利用函数组合" class="headerlink" title="3.2 利用函数组合"></a>3.2 利用函数组合</h4><p>让我们基于 <code>Discounter</code> 接口新建一个 <code>DiscounterPlus</code> 接口，使其扩展 <code>UnaryOperator</code> 接口，然后添加 <code>combine()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.function.UnaryOperator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DiscounterPlus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnaryOperator</span>&lt;BigDecimal&gt; &#123;<br><br>    <span class="hljs-keyword">default</span> DiscounterPlus <span class="hljs-title function_">combine</span><span class="hljs-params">(DiscounterPlus after)</span> &#123;<br>        <span class="hljs-keyword">return</span> value -&gt; after.apply(<span class="hljs-built_in">this</span>.apply(value));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>本质上，我们正在重构我们的 <code>Discounter</code> 并利用一个事实，即应用折扣是将 <code>BigDecimal</code> 实例转换为另一个 <code>BigDecimal</code> 实例的函数，允许我们访问预定义的方法。由于 <code>UnaryOperator</code> 带有一个 <code>apply()</code> 方法，我们可以用它替换 <code>applyDiscount</code>。</p><p><code>combine()</code> 方法只是将一个 <code>Discounter</code> 应用于 <code>this</code> 的结果的一种抽象。它使用内置函数 <code>apply()</code> 来实现这一点。</p><p>现在，让我们尝试将多个折扣累积应用于一个金额。我们将通过使用函数 <code>reduce()</code> 和 <code>combine()</code> 来做到这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>请特别注意第一个 <code>reduce</code> 参数。当没有提供折扣时，我们需要返回不变的值。这可以通过提供一个身份函数作为默认折扣商来实现。</p><p>这是执行标准迭代的有用且不那么冗长的替代方法。如果我们考虑开箱即用的功能组合方法，它还免费为我们提供了更多功能。</p><h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h3><p>在本文中，我们解释了策略模式，并演示了如何使用 lambda 表达式以不那么冗长的方式实现它。</p>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Spring Boot与MyBatis Plus快速构建应用</title>
    <link href="/2023/03/01/back-end/plugins/mybatis-plus/"/>
    <url>/2023/03/01/back-end/plugins/mybatis-plus/</url>
    
    <content type="html"><![CDATA[<h2 id="【Java-系列】使用-Spring-Boot-与-MyBatis-Plus-快速构建应用"><a href="#【Java-系列】使用-Spring-Boot-与-MyBatis-Plus-快速构建应用" class="headerlink" title="【Java 系列】使用 Spring Boot 与 MyBatis Plus 快速构建应用"></a>【Java 系列】使用 Spring Boot 与 MyBatis Plus 快速构建应用</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Spring Boot 和 MyBatis Plus 是当今 Java 开发领域中的主流框架。Spring Boot 简化了 Java 应用程序的开发流程，MyBatis Plus 则是 MyBatis 框架的增强版本，提供了更多便利的功能, 例如集成了很多初始增删改查的方法。本篇入门博客将引导你如何使用 Spring Boot 和 MyBatis Plus 构建高效的 Java 应用。</p><h3 id="1-什么是-Spring-Boot？"><a href="#1-什么是-Spring-Boot？" class="headerlink" title="1. 什么是 Spring Boot？"></a>1. 什么是 Spring Boot？</h3><p>Spring Boot 是 Spring 框架的一部分，它旨在简化 Spring 应用程序的初始化和开发过程。通过使用 Spring Boot，你可以通过少量的配置和约定来创建一个完全可运行的独立应用程序。它还提供了内嵌式 Web 服务器，使得部署和运行应用程序变得更加简单。</p><h3 id="2-什么是-MyBatis-Plus？"><a href="#2-什么是-MyBatis-Plus？" class="headerlink" title="2. 什么是 MyBatis Plus？"></a>2. 什么是 MyBatis Plus？</h3><p>MyBatis Plus 是基于 MyBatis 框架的增强工具包，它简化了 MyBatis 的使用，并提供了更多的功能。MyBatis Plus 自动实现了基本的 CRUD 操作，还提供了诸如分页查询、条件查询、自动填充、乐观锁等功能。使用 MyBatis Plus 可以大幅提高开发效率。</p><h3 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h3><p>在开始之前，确保你已经安装了以下环境：</p><ul><li>JDK 8 或更高版本</li><li>Maven</li><li>IDE（推荐使用 IntelliJ IDEA）</li></ul><h3 id="4-创建-Spring-Boot-项目"><a href="#4-创建-Spring-Boot-项目" class="headerlink" title="4. 创建 Spring Boot 项目"></a>4. 创建 Spring Boot 项目</h3><p>使用 Spring Initializr（<a href="https://start.spring.io/%EF%BC%89%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84Spring">https://start.spring.io/）创建一个新的Spring</a> Boot 项目。在该页面选择所需的依赖，包括 Web 和 MyBatis Plus。</p><p>pom.xml 文件中的重要依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-配置-MyBatis-Plus"><a href="#5-配置-MyBatis-Plus" class="headerlink" title="5. 配置 MyBatis Plus"></a>5. 配置 MyBatis Plus</h3><p>在 <code>application.yml</code> 文件中，添加数据库连接信息和 MyBatis Plus 相关配置。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus:</span><br>    <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.github.cuifuan.mp.domain</span><br>    <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mapper/*Mapper.xml</span><br>    <span class="hljs-attr">configuration:</span><br>        <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">mapper-default-scope:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>这里我们假设数据库为 MySQL，并创建了一个名为<code>springboot</code>的数据库。</p><h3 id="6-安装-MybatisX-插件"><a href="#6-安装-MybatisX-插件" class="headerlink" title="6. 安装 MybatisX 插件"></a>6. 安装 MybatisX 插件</h3><p>在 IDEA 中安装插件，用来生成实体、<code>service</code> 层以及 <code>Mapper</code> 等文件。</p><p><img src="http://images.zabbix.store/markdown/image-20230809104915140.png?markdown" alt="MybatisX 插件"></p><p>使用 IDEA 连接 MySQL 数据库</p><p><img src="http://images.zabbix.store/markdown/image-20230809105701288.png?markdown" alt="image-20230809105701288"></p><p>输入数据库地址以及账号密码，然后点击测试连接，成功后点击确定然后关闭弹窗</p><p><img src="http://images.zabbix.store/markdown/image-20230809105815234.png?markdown" alt="image-20230809105815234"></p><p>测试连接成功后，点击确定</p><h3 id="7-生成实体类和-Mapper-接口"><a href="#7-生成实体类和-Mapper-接口" class="headerlink" title="7. 生成实体类和 Mapper 接口"></a>7. 生成实体类和 Mapper 接口</h3><p><img src="http://images.zabbix.store/markdown/image-20230809135732446.png?imageslim" alt="image-20230809135732446"></p><p>点击生成填写如下</p><p><img src="http://images.zabbix.store/markdown/image-20230809140202449.png" alt="image-20230809140202449"></p><p>选择 Mybatis Plus 的生成选项</p><p><img src="http://images.zabbix.store/markdown/image-20230809140303913.png" alt="image-20230809140303913"></p><p>观察到生成的 Java 实体类，其中使用了 MyBatis 的注解来映射数据库字段和实体类属性。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.myapp.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@TableName(value = &quot;user_info&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>  <span class="hljs-comment">// 其他属性...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着，创建 Mapper 接口，继承<code>BaseMapper</code>并指定泛型为对应的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> bran</span><br><span class="hljs-comment">* <span class="hljs-doctag">@description</span> 针对表【user_info】的数据库操作Mapper</span><br><span class="hljs-comment">* <span class="hljs-doctag">@createDate</span> 2023-08-09 14:03:10</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Entity</span> com.github.cuifuan.mp.domain.UserInfo</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;UserInfo&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-查看-Service-和-新建-Controller"><a href="#8-查看-Service-和-新建-Controller" class="headerlink" title="8. 查看 Service 和 新建 Controller"></a>8. 查看 Service 和 新建 Controller</h3><p>在 Service 层，可以定义业务逻辑并调用 Mapper 接口进行数据操作。在 Controller 层，处理 HTTP 请求并调用相应的 Service 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * desc: 用户信息的业务逻辑层</span><br><span class="hljs-comment"> * date 2023/8/9 14:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> cuifuan</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserInfoMapper, UserInfo&gt; &#123;<br> <span class="hljs-comment">// 编写业务逻辑的地方</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.myapp.controller;<br><br><span class="hljs-keyword">import</span> com.example.myapp.entity.User;<br><span class="hljs-keyword">import</span> com.example.myapp.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br><br><br><br>    <span class="hljs-comment">// 其他API...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@RestController</code>注解，相当于<code>@ResponseBody</code> ＋ <code>@Controller</code>, 通过此注解就不需要将 <code>@ResponseBody</code> 再次添加到所有的请求方法上。</li><li><code>@RequestMapping</code> 注解在类上表示给此类增加一个父路径，所有此类的方法都要走到这个路径下面</li><li><code>@GetMapping</code> 相当于简化 <code>@RequestMapping(value = &quot;&#123;id&#125;&quot;, method = RequestMethod.GET)</code></li></ul><h3 id="9-测试和运行应用程序"><a href="#9-测试和运行应用程序" class="headerlink" title="9. 测试和运行应用程序"></a>9. 测试和运行应用程序</h3><p>现在，已经完成了基本的配置和代码编写。运行应用程序，访问 API 端点，测试 API 是否能正常工作。</p><p><strong>mapper 包扫描配置在启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.github.cuifuan.mp.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootMybatisApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(SpringBootMybatisApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重要的地方，<code>@MapperScan(&quot;com.github.cuifuan.mp.mapper&quot;)</code></p><p>启动 Spring Boot 应用，访问 <a href="http://127.0.0.1:8080/users/2">http://127.0.0.1:8080/users/2</a></p><p><img src="http://images.zabbix.store/markdown/image-20230809160706445.png" alt="image-20230809160706445"></p><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><p>本篇博客介绍了如何使用 Spring Boot 和 MyBatis Plus 构建高效的 Java 应用。</p><p>通过简单的配置和少量的代码，你可以快速搭建一个功能完备的应用程序。</p><p>主要结构点在于：</p><ul><li>引入依赖</li><li>配置文件</li><li>生成统一 dao、mapper、service 文件</li></ul><h3 id="11-数据库文件"><a href="#11-数据库文件" class="headerlink" title="11. 数据库文件"></a>11. 数据库文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for user_info</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_info`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_info` (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `full_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `card_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sex` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `in_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `is_member` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_username` (`username`),<br>  KEY `idx_username_a` (`username`(<span class="hljs-number">10</span>))<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">9156521</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `springboot`.`user_info` (`id`, `username`, `full_name`, `address`, `card_no`, `email`, `sex`, `in_time`, `is_member`, `password`, `remark`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;zhaofang&#x27;</span>, <span class="hljs-string">&#x27;鑫&#x27;</span>, <span class="hljs-string">&#x27;天津市荆门市南长宁路u座 520412&#x27;</span>, <span class="hljs-string">&#x27;131028200107122001&#x27;</span>, <span class="hljs-string">&#x27;xiulan67@example.net&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;qr4srM%hw_&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探究Java反射：解密动态获取类信息的神奇之旅</title>
    <link href="/2023/03/01/back-end/java-base/java_reflection/"/>
    <url>/2023/03/01/back-end/java-base/java_reflection/</url>
    
    <content type="html"><![CDATA[<h3 id="探究-Java-反射：解密动态获取类信息的神奇之旅"><a href="#探究-Java-反射：解密动态获取类信息的神奇之旅" class="headerlink" title="探究 Java 反射：解密动态获取类信息的神奇之旅"></a>探究 Java 反射：解密动态获取类信息的神奇之旅</h3><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在 Java 编程的世界中，反射是一个强大而神奇的概念。它使得我们可以在运行时动态地获取、检查和操作类的信息，而不需要提前知道类的具体细节。本篇博客将向您展示如何使用 Java 的反射机制，探索其背后的原理，并结合代码示例阐述其实用性。</p><h4 id="什么是-Java-反射？"><a href="#什么是-Java-反射？" class="headerlink" title="什么是 Java 反射？"></a>什么是 Java 反射？</h4><p>简单来说，Java 反射是指在运行时动态地获取类的信息以及在运行时动态地调用类的方法。传统的 Java 代码在编译时需要明确知道类的结构和方法签名，而反射机制让我们能够绕过这种限制，通过名称或其他属性来访问类的成员。</p><h4 id="使用-Java-反射的场景"><a href="#使用-Java-反射的场景" class="headerlink" title="使用 Java 反射的场景"></a>使用 Java 反射的场景</h4><ul><li>类信息检查：可以动态地获取类的名称、字段、方法、构造函数等信息。这在一些框架和库中被广泛使用，例如 Java 的 ORM（对象关系映射）工具。</li><li>运行时动态创建对象：通过类的无参构造函数创建对象，即使在编译时无法知道具体的类。</li><li>动态调用方法：通过方法名称和参数，在运行时调用类的方法，如通过字符串指定方法名称并调用对应的方法。</li><li>处理注解：获取类、字段或方法上的注解信息，从而实现自定义逻辑。</li></ul><p>代码示例：<br>下面将展示一些常见的 Java 反射用法。</p><ol><li><h5 id="获取类信息"><a href="#获取类信息" class="headerlink" title="获取类信息"></a>获取类信息</h5></li></ol><p>假设我们有一个简单的 Person 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你好, 我是&quot;</span> + name + <span class="hljs-string">&quot;,我年龄是 &quot;</span> + age + <span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们将使用反射获取该类的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.github.cuifuan.common.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; personClass = Class.forName(<span class="hljs-string">&quot;com.github.cuifuan.common.reflect.Person&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;输出类名: &quot;</span> + personClass.getName());<br><br>            Field[] fields = personClass.getDeclaredFields();<br>            System.out.println(<span class="hljs-string">&quot;字段列表:&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                System.out.println(<span class="hljs-string">&quot;字段名称：&quot;</span> + field.getName() + <span class="hljs-string">&quot;，字段类型: &quot;</span> + field.getType().getName());<br>            &#125;<br><br>            Method[] methods = personClass.getDeclaredMethods();<br>            System.out.println(<span class="hljs-string">&quot;方法:&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>                System.out.println(<span class="hljs-string">&quot;  &quot;</span> + method.getName() + <span class="hljs-string">&quot;: &quot;</span> + method.getReturnType());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">输出类名: com.github.cuifuan.common.reflect.Person<br>字段列表:<br>字段名称：name，字段类型: java.lang.String<br>字段名称：age，字段类型: <span class="hljs-type">int</span><br>方法:<br>  sayHello: <span class="hljs-keyword">void</span><br></code></pre></td></tr></table></figure><ol start="2"><li><h5 id="动态创建对象和调用方法"><a href="#动态创建对象和调用方法" class="headerlink" title="动态创建对象和调用方法"></a>动态创建对象和调用方法</h5></li></ol><p>利用反射，我们可以在运行时创建对象并调用其方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.github.cuifuan.common.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        useSet();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; personClass = Class.forName(<span class="hljs-string">&quot;com.github.cuifuan.common.reflect.Person&quot;</span>);<br><br>            Constructor&lt;?&gt; constructor = personClass.getConstructor();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> constructor.newInstance();<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">setNameMethod</span> <span class="hljs-operator">=</span> personClass.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>            setNameMethod.invoke(person, <span class="hljs-string">&quot; 张三&quot;</span>);<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">setAgeMethod</span> <span class="hljs-operator">=</span> personClass.getDeclaredMethod(<span class="hljs-string">&quot;setAge&quot;</span>, <span class="hljs-type">int</span>.class);<br>            setAgeMethod.invoke(person, <span class="hljs-number">20</span>);<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">sayHelloMethod</span> <span class="hljs-operator">=</span> personClass.getDeclaredMethod(<span class="hljs-string">&quot;sayHello&quot;</span>);<br>            sayHelloMethod.invoke(person);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException |<br>                 InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">你好, 我是 张三,我的年龄是 <span class="hljs-number">20</span>.<br></code></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>Java 反射是一项强大的特性，它赋予了我们在运行时动态地获取类信息和执行类的方法的能力。</p><p>然而，由于反射在性能方面可能会有一些损失，因此在性能敏感的场景中应慎重使用。</p><p>除此之外，Java 反射在许多框架和库中发挥着重要作用，是学习和理解高级 Java 编程的重要的环节。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Stream 详尽篇</title>
    <link href="/2023/03/01/back-end/java-base/java-stream/"/>
    <url>/2023/03/01/back-end/java-base/java-stream/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Stream-API-介绍"><a href="#1-Stream-API-介绍" class="headerlink" title="1.Stream API 介绍"></a>1.Stream API 介绍</h3><p>Java8 版本引入的重要特性之一, 对于集合（例如 List、Map、Set 等）进行处理和操作的高级抽象.Stream API 提供了一种更为简洁高效的的方式来处理集合数据, 可读性较高, 特别在数据的过滤、转换、聚合时的操作很简单方便快捷.</p><h4 id="1-1-特点与优势"><a href="#1-1-特点与优势" class="headerlink" title="1.1 特点与优势"></a>1.1 特点与优势</h4><ul><li><strong>函数式风格</strong>: Stream API 使用函数式接口和 Lambda 表达式, 让代码更具表达力和简洁性.</li><li><strong>惰性求值</strong>: Stream 操作通常是惰性求值的, 这意味着在终端操作之前, 中间操作不会立即执行, 从而提高了效率.</li><li><strong>并行处理</strong>: 通过 Stream API 可以方便地实现并行处理, 从而充分利用多核处理器的优势, 加速处理大量数据的过程.</li></ul><p>下面根据一些实际应用场景来分析</p><h4 id="1-2-两大类型"><a href="#1-2-两大类型" class="headerlink" title="1.2 两大类型"></a>1.2 两大类型</h4><ul><li>中间操作(Intermediate Operations):中间操作是指在 Stream 上执行的操作, 它们返回一个新的 Stream, 允许你链式地进行多个中间操作.</li><li>终端操作(Terminal Operations):对 Stream 进行最终处理的操作, 当调用终端操作时, Stream 会开始执行中间操作, 并生成最终的结果或副作用.终端操作是 Stream 的”触发器”, 一旦调用终端操作, Stream 就不能再被使用, 也不能再进行中间操作.</li></ul><h3 id="2-Stream-API-中间操作"><a href="#2-Stream-API-中间操作" class="headerlink" title="2.Stream API 中间操作"></a>2.Stream API 中间操作</h3><h4 id="2-1-filter-条件"><a href="#2-1-filter-条件" class="headerlink" title="2.1 filter(条件)"></a>2.1 filter(条件)</h4><p>用于根据指定条件过滤元素.它接收一个条件作为参数, 只保留满足条件的元素, 并生成一个新的 Stream.<br>示例:<br><strong>存在一个姓名的集合，现在要过滤出来名字中带【大】的人员.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;String&gt; tempList = Arrays.asList(<span class="hljs-string">&quot;刘一手&quot;</span>, <span class="hljs-string">&quot;杜子腾&quot;</span>, <span class="hljs-string">&quot;林大蛋&quot;</span>, <span class="hljs-string">&quot;Ekko&quot;</span>);<br>List&lt;String&gt; resList = tempList.stream()<br>        .filter(s -&gt; s.contains(<span class="hljs-string">&quot;大&quot;</span>))<br>        .collect(Collectors.toList());<br>System.out.println(resList.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[林大蛋]<br></code></pre></td></tr></table></figure><blockquote><p>这段 Java 代码展示了如何使用 Java Stream API 对一个字符串列表进行处理，并筛选出包含字符”大”的字符串，然后将筛选后的结果收集到一个新的列表中，最后输出结果。<br>让我们逐步解释这段代码：<br>首先我们创建了一个包含四个字符串的集合，后使用 Stream API 对 tempList 进行处理。<br>首先，通过调用 stream()方法，将 tempList 转换为一个 Stream。<br>接着，使用 filter 中间操作筛选出包含字符”大”的字符串。<br>这里的 filter 方法接收一个 Lambda 表达式作为参数，Lambda 表达式 <code>s -&gt; s.contains(&quot;大&quot;)</code>用于判断字符串是否包含字符”大”。<br>只有满足条件的字符串会被保留在 Stream 中。<br>collect(Collectors.toList())这部分是终端操作，它将 Stream 中的元素收集到一个新的列表中。在这里，我们使用 Collectors.toList()方法来将 Stream 中的筛选结果收集到一个新的 List 中，赋值给 resList。</p></blockquote><h4 id="2-2-map-函数"><a href="#2-2-map-函数" class="headerlink" title="2.2 map(函数)"></a>2.2 map(函数)</h4><p>用于对每个元素执行映射操作, 将元素转换成另一种类型.它接收一个 Function（映射函数）作为参数, 对每个元素应用该映射函数, 并生成一个新的 Stream.<br>示例:<br><strong>存在一个姓名的集合，现在要给所有名字加上姓名的前缀.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;String&gt; tempList = Arrays.asList(<span class="hljs-string">&quot;刘一手&quot;</span>, <span class="hljs-string">&quot;杜子腾&quot;</span>, <span class="hljs-string">&quot;林大蛋&quot;</span>, <span class="hljs-string">&quot;Ekko&quot;</span>);<br>List&lt;String&gt; resList = tempList.stream()<br>        .map(s -&gt; <span class="hljs-string">&quot;姓名: &quot;</span> + s)<br>        .collect(Collectors.toList());<br>System.out.println(resList.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[姓名: 刘一手, 姓名: 杜子腾, 姓名: 林大蛋, 姓名: Ekko]<br></code></pre></td></tr></table></figure><blockquote><p>这段代码的意思是创建一个姓名集合，通过 stream()方法把集合转换为 Stream 流,通过 map() 方法给每个集合中的值拼接字符串后,使用 collect()方法把这些元素归集到一个新的 List 集合并赋值给 resList.</p><p>这里的 <code>.map(s -&gt; &quot;姓名: &quot; + s)</code>是简写,详细的更容易理解的写法如下:</p><p>.map(s -&gt; {<br>return “姓名: “ + s;<br>})</p></blockquote><h4 id="2-3-flatMap-函数"><a href="#2-3-flatMap-函数" class="headerlink" title="2.3 flatMap(函数)"></a>2.3 flatMap(函数)</h4><p>类似于 map 操作，但是 flatMap 操作可以将每个元素映射成一个 Stream，然后把所有生成的 Stream 合并成一个新的 Stream。</p><p>示例:</p><p><strong>新建一个静态内部类, 然后聚合类中的集合数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Personnel</span> &#123;<br>    <span class="hljs-comment">// 人员姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 人员标签</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tagList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Personnel</span><span class="hljs-params">(String name, List&lt;String&gt; tagList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.tagList = tagList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Tips: 就现在想要把 <code>List&lt;Personnel&gt;</code> 中的 <code>tagList</code> 聚合后进行处理, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Personnel</span> <span class="hljs-variable">personA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Personnel</span>(<span class="hljs-string">&quot;张三&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;抽烟&quot;</span>, <span class="hljs-string">&quot;喝酒&quot;</span>, <span class="hljs-string">&quot;烫头&quot;</span>));<br>    <span class="hljs-type">Personnel</span> <span class="hljs-variable">personB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Personnel</span>(<span class="hljs-string">&quot;李斯&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;编码&quot;</span>, <span class="hljs-string">&quot;喝酒&quot;</span>, <span class="hljs-string">&quot;踢足球&quot;</span>));<br>    List&lt;Personnel&gt; personnelList = Arrays.asList(personA, personB);<br>    personnelList.stream()<br>            .flatMap(p -&gt; p.getTagList().stream())<br>            .forEach(s -&gt; System.out.print(s + <span class="hljs-string">&quot; &quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">抽烟 喝酒 烫头 编码 喝酒 踢足球<br></code></pre></td></tr></table></figure><h4 id="2-4-sorted"><a href="#2-4-sorted" class="headerlink" title="2.4 sorted()"></a>2.4 sorted()</h4><p>用于对 Stream 中的元素进行排序，默认按照自然顺序进行排序。也可以传入自定义的 Comparator 来指定排序规则。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortedTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">18</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// ① 默认排序</span><br>        List&lt;Integer&gt; orderList = numList.stream()<br>                .sorted()<br>                .collect(Collectors.toList());<br>        System.out.printf(<span class="hljs-string">&quot;① 默认排序: %s%n&quot;</span>, orderList);<br>        <span class="hljs-comment">// ② 自定义排序</span><br>        List&lt;Integer&gt; orderDescList = numList.stream()<br>                .sorted((x, y) -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> y.compareTo(x);<br>                &#125;)<br>                .collect(Collectors.toList());<br>        System.out.printf(<span class="hljs-string">&quot;② 自定义排序: %s%n&quot;</span>, orderDescList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">① 默认排序: [<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">300</span>]<br>② 自定义排序: [<span class="hljs-number">300</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">18</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><blockquote><p>关于 <code>return y.compareTo(x);</code> 这块的具体意义，可以自行搜索 <code>compareTo</code> 方法了解下，这里不做单独赘述</p></blockquote><h4 id="2-5-distinct"><a href="#2-5-distinct" class="headerlink" title="2.5 distinct()"></a>2.5 distinct()</h4><p>用于去除 Stream 中重复的元素，确保最终的 Stream 中每个元素都是唯一的。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistinctStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        List&lt;Integer&gt; distinctList = numList.stream()<br>                .distinct()<br>                .collect(Collectors.toList());<br>        System.out.println(distinctList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1, 2, 3]</span><br></code></pre></td></tr></table></figure><blockquote><p>这段代码先创建了一个数字集合，接下来使用 stream() 方法转化为 Stream 流<br>使用 distinct() 方法对流中的元素进行去重，返回一个不包含重复元素的 Stream 流<br>最后使用 collect() 方法对去重后的流转换成一个新的 List 集合。</p></blockquote><h4 id="2-6-limit-long-n"><a href="#2-6-limit-long-n" class="headerlink" title="2.6 limit(long n)"></a>2.6 limit(long n)</h4><p>用于限制 Stream 的大小，返回一个最大包含前 n 个元素的新 Stream。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LimitStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>);<br>        List&lt;Integer&gt; limitList = numList.stream()<br>                .limit(<span class="hljs-number">4</span>)<br>                .collect(Collectors.toList());<br>        System.out.println(limitList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码创建一个包含整数的 List 集合<code>numList</code>，使用 Stream API 的<code>limit(4)</code>方法将集合截取为只包含前 4 个元素的新 List 集合，并将结果输出到控制台。</p><p>输出结果为：[1, 2, 3, 4]</p><h4 id="2-7-skip-long-n"><a href="#2-7-skip-long-n" class="headerlink" title="2.7 skip(long n)"></a>2.7 skip(long n)</h4><p>用于跳过 Stream 中的前 n 个元素，返回一个丢弃了前 n 个元素后剩余元素的新 Stream。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkipStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br>        List&lt;Integer&gt; skipList = numList.stream()<br>                .skip(numList.size() - <span class="hljs-number">2</span>)<br>                .collect(Collectors.toList());<br>        System.out.println(skipList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码创建一个包含整数的 List 集合<code>numList</code>，使用 Stream API 的 <code>skip</code> 方法将集合截取跳过前 <code>集合大小-2</code>个元素的新 List 集合，并将结果输出到控制台。</p><p>输出结果为：[7, 8]</p><h4 id="2-8-peek-Consumer"><a href="#2-8-peek-Consumer" class="headerlink" title="2.8 peek(Consumer)"></a>2.8 peek(Consumer)</h4><p>用于对每个元素执行一个操作，同时保持 Stream 的流。它可以用于调试或记录 Stream 中的元素。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeekStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br>        List&lt;Integer&gt; resList = numList.stream()<br>                .peek(System.out::println)<br>                .filter(s -&gt; s == <span class="hljs-number">5</span>)<br>                .peek(s -&gt; System.out.printf(<span class="hljs-string">&quot;过滤后的:%d%n&quot;</span>, s))<br>                .collect(Collectors.toList());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">5</span><br>过滤后的:<span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>这段代码创建一个包含整数的 List 集合<code>numList</code>，使用 Stream API 的 <code>peek</code> 方法记录初始的值，通过中间操作 filter 方法过滤值为 5 的后，再次通过 peek 方法来打印并验证我们的表达式后，把过滤后的结果通过 collect 方法生成一个新的 List 集合。</p><h3 id="3-终端操作"><a href="#3-终端操作" class="headerlink" title="3.终端操作"></a>3.终端操作</h3><p>在 Java Stream API 中，终端操作（Terminal Operations）是对 Stream 进行最终处理的操作。当调用终端操作时，Stream 会开始执行中间操作，并生成最终的结果或副作用。终端操作是 Stream 的<code>触发器</code>，一旦调用终端操作，Stream 就不能再被使用，也不能再进行中间操作。</p><p>以下是一些常见的 Stream API 终端操作：</p><h4 id="3-1-forEach-Consumer"><a href="#3-1-forEach-Consumer" class="headerlink" title="3.1 forEach(Consumer)"></a>3.1 forEach(Consumer)</h4><p>对 Stream 中的每个元素执行指定的操作，接收一个 Consumer（消费者函数）作为参数。它通常用于对 Stream 中的元素进行输出或执行某些操作，但不会返回任何结果。</p><p>示例: <strong>遍历输出中间操作后的集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForEachStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 给公司工资普涨 500</span><br>        List&lt;Integer&gt; salaryList = Arrays.asList(<span class="hljs-number">12000</span>, <span class="hljs-number">20000</span>, <span class="hljs-number">30000</span>, <span class="hljs-number">4000</span>);<br>        salaryList.stream()<br>                .peek(s -&gt; System.out.print(<span class="hljs-string">&quot;工资普涨前:&quot;</span> + s))<br>                .map(s -&gt; s + <span class="hljs-number">500</span>)<br>                .forEach(s -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;--工资普涨后:&quot;</span> + s);<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上代码的含义是,创建一个工资集合,通过 stream() 方法转换为 Stream 流,通过中间操作 peek() 方法记录转换前的元素值,后通过 map() 方法给元素进行转换操作,最后通过终端操作 forEach() 方法进行遍历.</p></blockquote><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">工资普涨前:<span class="hljs-number">12000</span>--工资普涨后:<span class="hljs-number">12500</span><br>工资普涨前:<span class="hljs-number">20000</span>--工资普涨后:<span class="hljs-number">20500</span><br>工资普涨前:<span class="hljs-number">30000</span>--工资普涨后:<span class="hljs-number">30500</span><br>工资普涨前:<span class="hljs-number">4000</span>--工资普涨后:<span class="hljs-number">4500</span><br></code></pre></td></tr></table></figure><h4 id="3-2-collect-Collector"><a href="#3-2-collect-Collector" class="headerlink" title="3.2 collect(Collector)"></a>3.2 collect(Collector)</h4><p>用于将 Stream 中的元素收集到一个容器中，接收一个 Collector（收集器）作为参数。它允许你在 Stream 中执行各种集合操作，例如将元素收集到 List、Set、Map 等容器中。</p><p>示例: <strong>把 User 实体集合转换为 Map 集合,名字作为 key,工资作为 Name</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;User&gt; userList = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">2000.5</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;李斯&quot;</span>, <span class="hljs-number">11000.5</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;王二&quot;</span>, <span class="hljs-number">12000.5</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张六&quot;</span>, <span class="hljs-number">32000.5</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;赵公子&quot;</span>, <span class="hljs-number">1000000.0</span>));<br>        Map&lt;String, Double&gt; userSalaryMap = userList.stream()<br>                .collect(Collectors.toMap(User::getName, User::getSalary));<br>        userSalaryMap.forEach((k, v) -&gt; &#123;<br>            System.out.printf(<span class="hljs-string">&quot;姓名:%s,工资:%.2f%n&quot;</span>, k, v);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> Double salary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上述代码的含义是创建一个人员集合,通过 stream() 转换为 Stream 流,使用 collect() 方法把元素归集, 利用 Collectors.toMap() 收集器转换为 Map 后,内部接收会遍历每个元素,<code>Collectors.toMap(User::getName, User::getSalary)</code>是简写,详细的写法如下:</p><p>Collectors.toMap(s -&gt; s.getName(), s -&gt; s.getSalary())</p></blockquote><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">姓名:张三,工资:<span class="hljs-number">2000.50</span><br>姓名:赵公子,工资:<span class="hljs-number">1000000.00</span><br>姓名:张六,工资:<span class="hljs-number">32000.50</span><br>姓名:李斯,工资:<span class="hljs-number">11000.50</span><br>姓名:王二,工资:<span class="hljs-number">12000.50</span><br></code></pre></td></tr></table></figure><h4 id="3-3-toArray"><a href="#3-3-toArray" class="headerlink" title="3.3 toArray()"></a>3.3 toArray()</h4><p>将 Stream 中的元素转换成一个数组。返回一个包含所有元素的数组，返回的数组类型是根据流元素的类型自动推断的。如果流是空的，将返回一个长度为 0 的数组。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToArrayStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">intStream</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 使用toArray()将流中的元素收集到一个数组中</span><br>        <span class="hljs-type">int</span>[] intArray = intStream.toArray();<br><br>        <span class="hljs-comment">// 输出结果数组</span><br>        System.out.println(Arrays.toString(intArray));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><blockquote><p>在这个示例中，我们创建了一个整数流 <code>IntStream</code>，然后使用 <code>toArray()</code> 方法将流中的所有整数收集到一个数组中，并输出结果数组。</p></blockquote><h4 id="3-4-reduce-BinaryOperator"><a href="#3-4-reduce-BinaryOperator" class="headerlink" title="3.4 reduce(BinaryOperator)"></a>3.4 reduce(BinaryOperator)</h4><p><code>Stream</code> 类的 <code>reduce()</code> 方法是用于将流中的元素进行归约操作的方法。接收一个 <code>BinaryOperator（二元运算函数</code>作为参数，用于对两个元素进行操作，并返回一个合并后的结果。它可以将流中的所有元素按照指定的规则进行合并，并返回一个 <code>Optional</code> 对象，因为流可能为空。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReduceStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">intStream</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 使用reduce()将流中的整数相加得到总和</span><br>        <span class="hljs-type">OptionalInt</span> <span class="hljs-variable">sumOptional</span> <span class="hljs-operator">=</span> intStream.reduce((a, b) -&gt; a + b);<br><br>        <span class="hljs-comment">// 获取结果总和，如果流为空，则给出一个默认值0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> sumOptional.orElse(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 输出结果总和</span><br>        System.out.println(<span class="hljs-string">&quot;总和: &quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">总和: <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><blockquote><p>上面的代码中，我们创建了一个整数流 <code>IntStream</code>，然后使用 <code>reduce()</code> 方法将流中的整数相加得到总和。由于流中有元素，因此 <code>reduce()</code> 方法返回包含总和的 <code>Optional</code> 对象。我们使用 <code>orElse(0)</code> 获取结果总和，防止流为空的情况。最后输出得到的结果总和。</p></blockquote><h4 id="3-5-min-Comparator-x2F-max-Comparator"><a href="#3-5-min-Comparator-x2F-max-Comparator" class="headerlink" title="3.5 min(Comparator) &#x2F; max(Comparator)"></a>3.5 min(Comparator) &#x2F; max(Comparator)</h4><p><code>Stream</code> 类的 <code>min()</code> 和 <code>max()</code> 方法是用于查找流中的最小值和最大值的终端操作。它们接受一个 <code>Comparator</code> 对象作为参数来确定元素的顺序，并返回一个 <code>Optional</code> 对象，因为流可能为空。</p><p>以下是 <code>min()</code> 和 <code>max()</code> 方法的简要解释以及示例代码：</p><p><strong><code>min()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">min</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>&lt;T&gt; Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator)</code></li><li><code>min()</code> 方法用于查找流中的最小元素。</li><li><code>comparator</code> 参数用于确定元素的顺序，以便找到最小值。</li><li>如果流为空，则返回一个空的 <code>Optional</code> 对象。</li></ul><p><strong><code>max()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">max</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>&lt;T&gt; Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator)</code></li><li><code>max()</code> 方法用于查找流中的最大元素。</li><li><code>comparator</code> 参数用于确定元素的顺序，以便找到最大值。</li><li>如果流为空，则返回一个空的 <code>Optional</code> 对象。</li></ul><p>示例：<strong>假设我们有一个包含整数的流，并且我们想找到其中的最小值和最大值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinMaxStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用min()找到最小值</span><br>        Optional&lt;Integer&gt; minOptional = integerStream.min(Integer::compareTo);<br>        <span class="hljs-keyword">if</span> (minOptional.isPresent()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;最小值为: &quot;</span> + minOptional.get());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;流为空.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 重新创建一个整数流，因为流已被消耗</span><br>        Stream&lt;Integer&gt; newIntegerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用max()找到最大值</span><br>        Optional&lt;Integer&gt; maxOptional = newIntegerStream.max(Integer::compareTo);<br>        <span class="hljs-keyword">if</span> (maxOptional.isPresent()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;最大值为: &quot;</span> + maxOptional.get());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;流为空.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">最小值为: <span class="hljs-number">1</span><br>最大值为: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><blockquote><p>上述代码中，我们创建了一个整数流 <code>Stream&lt;Integer&gt;</code>，然后使用 <code>min()</code> 方法找到最小值，并使用 <code>max()</code> 方法找到最大值。我们使用 <code>Optional</code> 对象来处理可能为空的情况，并输出找到的最小值和最大值。请注意，一旦流被消耗，就不能再次使用它，因此我们在找到最小值后重新创建了一个整数流来找到最大值。</p></blockquote><h4 id="3-6-count"><a href="#3-6-count" class="headerlink" title="3.6 count()"></a>3.6 count()</h4><p><code>Stream</code> 类的 <code>count()</code> 方法是用于计算流中元素个数的终端操作。它返回一个 <code>long</code> 类型的值，表示流中的元素数量。<code>count()</code> 方法是一个终端操作，一旦调用该方法，流就被消耗，无法再次使用。</p><p>示例: <strong>有一个包含整数的流，并且我们想计算流中的元素个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用count()计算流中的元素个数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> integerStream.count();<br><br>        <span class="hljs-comment">// 输出元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;元素数量: &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">元素数量: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><blockquote><p>上述代码中，我们创建了一个整数流 <code>Stream&lt;Integer&gt;</code>，然后使用 <code>count()</code> 方法计算流中的元素个数。由于这是一个终端操作，一旦调用了 <code>count()</code> 方法，流就会被消耗，不能再次使用。我们输出计算得到的元素个数。</p></blockquote><h4 id="3-7-anyMatch-Predicate-x2F-allMatch-Predicate-x2F-noneMatch-Predicate"><a href="#3-7-anyMatch-Predicate-x2F-allMatch-Predicate-x2F-noneMatch-Predicate" class="headerlink" title="3.7 anyMatch(Predicate) &#x2F; allMatch(Predicate) &#x2F; noneMatch(Predicate)"></a>3.7 anyMatch(Predicate) &#x2F; allMatch(Predicate) &#x2F; noneMatch(Predicate)</h4><p><code>Stream</code> 类的 <code>anyMatch()</code>, <code>allMatch()</code>, 和 <code>noneMatch()</code> 是用于检查流中元素是否满足特定条件的终端操作。它们返回一个布尔值，表示流中的元素是否满足指定的条件。这些方法在遇到满足条件的元素后可能会提前终止流的处理。anyMatch 检查是否有任意元素满足条件，allMatch 检查是否所有元素都满足条件，noneMatch 检查是否没有元素满足条件。</p><p>以下是 <code>anyMatch()</code>, <code>allMatch()</code>, 和 <code>noneMatch()</code> 方法的简要解释以及示例代码：</p><p><strong><code>anyMatch()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">anyMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code></li><li><code>anyMatch()</code> 方法用于检查流中是否存在至少一个元素满足给定的条件。</li><li>它接受一个 <code>Predicate</code> 参数，用于定义满足条件的判断规则。</li><li>如果流中至少有一个元素满足条件，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p><strong><code>allMatch()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">allMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>boolean allMatch(Predicate&lt;? super T&gt; predicate)</code></li><li><code>allMatch()</code> 方法用于检查流中的所有元素是否都满足给定的条件。</li><li>它接受一个 <code>Predicate</code> 参数，用于定义满足条件的判断规则。</li><li>如果流中的所有元素都满足条件，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p><strong><code>noneMatch()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">noneMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</code></li><li><code>noneMatch()</code> 方法用于检查流中是否所有元素都不满足给定的条件。</li><li>它接受一个 <code>Predicate</code> 参数，用于定义满足条件的判断规则。</li><li>如果流中的所有元素都不满足条件，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p><strong>示例代码：</strong></p><p>假设我们有一个包含整数的流，并且我们想检查流中是否存在某些元素满足特定条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatchStreamTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用anyMatch()检查是否存在元素大于5</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">anyGreaterThan5</span> <span class="hljs-operator">=</span> integerStream.anyMatch(num -&gt; num &gt; <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否存在元素大于 5 ?&quot;</span> + anyGreaterThan5);<br><br>        <span class="hljs-comment">// 重新创建一个整数流，因为流已被消耗</span><br>        Stream&lt;Integer&gt; newIntegerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用allMatch()检查是否所有元素都小于10</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">allLessThan10</span> <span class="hljs-operator">=</span> newIntegerStream.allMatch(num -&gt; num &lt; <span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;所有元素都小于10 ? &quot;</span> + allLessThan10);<br><br>        <span class="hljs-comment">// 重新创建一个整数流，因为流已被消耗</span><br>        Stream&lt;Integer&gt; newestIntegerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用noneMatch()检查是否没有元素等于10</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">noneEqualTo10</span> <span class="hljs-operator">=</span> newestIntegerStream.noneMatch(num -&gt; num == <span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否没有元素等于 10 ? &quot;</span> + noneEqualTo10);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">是否存在元素大于 <span class="hljs-number">5</span> ?<span class="hljs-literal">true</span><br>所有元素都小于<span class="hljs-number">10</span>? <span class="hljs-literal">true</span><br>是否没有元素等于 <span class="hljs-number">10</span> ? <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>上述代码中，我们创建了一个整数流 <code>Stream&lt;Integer&gt;</code>，然后使用 <code>anyMatch()</code> 方法检查是否存在元素大于 5，使用 <code>allMatch()</code> 方法检查是否所有元素都小于 10，以及使用 <code>noneMatch()</code> 方法检查是否没有元素等于 10。我们输出检查的结果。注意，在每次使用终端操作后，流就被消耗了，不能再次使用，因此在检查不同条件时需要重新创建流。</p></blockquote><h4 id="3-8-findFirst-x2F-findAny"><a href="#3-8-findFirst-x2F-findAny" class="headerlink" title="3.8 findFirst() &#x2F; findAny()"></a>3.8 findFirst() &#x2F; findAny()</h4><p><code>Stream</code> 类的 <code>findFirst()</code> 和 <code>findAny()</code> 方法用于在流中查找元素的终端操作。它们都返回一个 <code>Optional</code> 对象，表示找到的元素或元素的可能性。在并行流中，<code>findAny()</code> 方法可能更快，因为它不一定要遍历所有元素。在串行 <code>Stream</code> 中，<code>findFirst()</code>和 <code>findAny()</code> 返回的是相同的元素，在并行<code>Stream</code>中，<code>findAny()</code>返回的是最先找到的元素。</p><p>以下是 <code>findFirst()</code> 和 <code>findAny()</code> 方法的简要解释以及示例代码：</p><p><strong><code>findFirst()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">findFirst</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>Optional&lt;T&gt; findFirst()</code></li><li><code>findFirst()</code> 方法用于在流中查找第一个满足条件的元素。</li><li>它返回一个 <code>Optional</code> 对象，表示找到的元素，如果流为空，则返回一个空的 <code>Optional</code> 对象。</li></ul><p><strong><code>findAny()</code> 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">findAny</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li>方法签名：<code>Optional&lt;T&gt; findAny()</code></li><li><code>findAny()</code> 方法用于在流中查找任意一个满足条件的元素。</li><li>它返回一个 <code>Optional</code> 对象，表示找到的元素，如果流为空，则返回一个空的 <code>Optional</code> 对象。</li><li>在并行流中，<code>findAny()</code> 方法可能比 <code>findFirst()</code> 方法更快，因为它不一定要遍历所有元素。</li></ul><p><strong>示例代码：</strong></p><p>假设我们有一个包含整数的流，并且我们想查找其中的某个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FindStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例整数流</span><br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用findFirst()找到第一个元素</span><br>        Optional&lt;Integer&gt; firstElementOptional = integerStream.findFirst();<br>        <span class="hljs-keyword">if</span> (firstElementOptional.isPresent()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;发现第一个元素: &quot;</span> + firstElementOptional.get());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;流为空!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 重新创建一个整数流，因为流已被消耗</span><br>        Stream&lt;Integer&gt; newIntegerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 使用findAny()找到任意一个元素</span><br>        Optional&lt;Integer&gt; anyElementOptional = newIntegerStream.findAny();<br>        <span class="hljs-keyword">if</span> (anyElementOptional.isPresent()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到任意一个元素: &quot;</span> + anyElementOptional.get());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;流为空!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出（注意输出的结果可能因为流的处理顺序不同而有所变化）：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">发现第一个元素: 1</span><br><span class="hljs-section">找到任意一个元素: 1</span><br></code></pre></td></tr></table></figure><blockquote><p>上述代码中，创建了整数流 <code>Stream&lt;Integer&gt;</code>，然后使用 <code>findFirst()</code> 方法找到第一个元素，使用 <code>findAny()</code> 方法找到任意一个元素，并输出找到的元素。请注意，一旦调用了这些方法，流就被消耗了，不能再次使用。在并行流中，<code>findAny()</code> 方法可能比 <code>findFirst()</code> 方法更快，因为它不一定要遍历所有元素。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java 进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入解析Java抽象工厂模式</title>
    <link href="/2023/02/01/back-end/design-pattern/abstract-factory/"/>
    <url>/2023/02/01/back-end/design-pattern/abstract-factory/</url>
    
    <content type="html"><![CDATA[<h2 id="深入解析-Java-抽象工厂模式：创建跨平台图形绘制工具的设计与实现"><a href="#深入解析-Java-抽象工厂模式：创建跨平台图形绘制工具的设计与实现" class="headerlink" title="深入解析 Java 抽象工厂模式：创建跨平台图形绘制工具的设计与实现"></a>深入解析 Java 抽象工厂模式：创建跨平台图形绘制工具的设计与实现</h2><p>抽象工厂模式（Abstract Factory Pattern）是 Java 中一种常用的设计模式，它属于创建型模式的一种。该模式提供了一种创建一系列相关或相互依赖对象的接口，而无需指定具体实现类。在本文中，我们将详细介绍抽象工厂模式的概念、实现方法以及应用场景。</p><h3 id="1-抽象工厂模式概述"><a href="#1-抽象工厂模式概述" class="headerlink" title="1. 抽象工厂模式概述"></a>1. 抽象工厂模式概述</h3><p>抽象工厂模式是一种创建型模式，旨在为一组相关或相互依赖的对象创建提供一个统一的接口。它是工厂方法模式的扩展，而工厂方法模式关注单个对象的创建，抽象工厂模式则关注一组对象的创建。</p><p>在抽象工厂模式中，我们定义一个抽象工厂接口，该接口声明了一组用于创建不同产品的抽象方法。然后，针对每个产品族（相关的一组产品），我们实现具体的工厂类，这些工厂类实现了抽象工厂接口，并负责创建该产品族的具体产品。</p><p>关键角色：</p><ol><li><strong>抽象工厂（Abstract Factory）</strong>：定义创建产品的抽象方法。</li><li><strong>具体工厂（Concrete Factory）</strong>：实现抽象工厂接口，负责创建具体产品的实例。</li><li><strong>抽象产品（Abstract Product）</strong>：定义产品的抽象方法。</li><li><strong>具体产品（Concrete Product）</strong>：实现抽象产品接口，是具体工厂创建的对象。</li></ol><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><p>为了更好地理解抽象工厂模式，我们以一个图形绘制工具为例，展示如何使用抽象工厂模式来创建不同操作系统上的不同图形。</p><p>首先，我们需要定义图形的抽象产品和抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品：图形</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂：图形工厂</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    Shape <span class="hljs-title function_">createShape</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我们分别实现具体的图形产品和图形工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 具体产品：圆形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;绘制圆形&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品：矩形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;绘制矩形&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品：椭圆</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ellipse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;绘制椭圆&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂：Windows图形工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsShapeFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Shape <span class="hljs-title function_">createShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 在Windows上创建图形</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ellipse</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂：Mac图形工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MacShapeFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Shape <span class="hljs-title function_">createShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 在Mac上创建图形</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><p>抽象工厂模式适用于以下场景：</p><ol><li><p><strong>跨平台支持</strong>：当一个软件系统需要在不同操作系统或不同环境中运行，并且在每个环境中都有不同的实现时，可以使用抽象工厂模式。在上面的例子中，我们可以根据不同的操作系统选择不同的具体工厂来创建图形。</p></li><li><p><strong>产品族创建</strong>：当一系列相关或相互依赖的产品需要同时创建时，可以使用抽象工厂模式。例如，在 GUI 组件库中，按钮、文本框、滚动条等组件都属于不同的产品族，可以使用抽象工厂模式来创建这些组件。</p></li><li><p><strong>系统配置</strong>：当一个系统需要配置多个不同的配置集合时，可以使用抽象工厂模式。例如，一个游戏中有多个角色、多种武器和多种装备，可以使用抽象工厂模式来创建不同的角色和装备组合。</p></li></ol><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>抽象工厂模式是一种强大的设计模式，它可以帮助我们创建一组相关或相互依赖的对象，同时隐藏了对象的具体实现。通过定义抽象工厂接口和抽象产品接口，我们可以轻松地扩展系统，增加新的产品族，而无需修改现有代码。</p><p>在实际开发中，我们应该根据系统的需求和设计目标来选择使用适当的设计模式。抽象工厂模式适用于多个相关对象的创建，以及不同平台或环境下的对象创建。通过合理运用抽象工厂模式，我们可以使代码更加灵活、可扩展和易于维护。</p>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>后端</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 使用 Faker 创造测试数据</title>
    <link href="/2023/02/01/back-end/python/python-faker/"/>
    <url>/2023/02/01/back-end/python/python-faker/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前手头上有个项目，要生成一些数据给客户看，如用户名、身份证号、邮箱、性别等等，但是实打实的用户数据录入也需要一段时间，时间不等人。偶然间看到 Python 里面有一个模块可以搞定我的问题，开始尝试。</p><p><img src="/./assets/d56e518a8e524fa4bd4ffd9673b23c66~tplv-k3u1fbpfcp-watermark.jpeg" alt="0085wA6egy1h4cm9bu6uij30j60j6dhi.jpeg"></p><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>此模块的 github 地址: <a href="https://github.com/joke2k/faker">https://github.com/joke2k/faker</a></p><p>安装模块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install Faker<br></code></pre></td></tr></table></figure><p>如果你的 pip 安装报错，建议网络搜索下错误，就此不做解释</p><p>使用 <code>faker.Faker()</code> 创建和初始化一个 <code>faker</code> 生成器，它可以通过访问以您想要的数据类型命名的属性来生成数据。</p><p>先来浅浅试一下：</p><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 Faker 模块</span><br><span class="hljs-keyword">from</span> faker <span class="hljs-keyword">import</span> Faker<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建 faker 创造器</span><br>    fake = Faker()<br>    <span class="hljs-comment"># 指定地区，不然会生成英文名或国外地址等</span><br>    faker_cn = Faker(locale=<span class="hljs-string">&#x27;zh_CN&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(faker_cn.name())<br></code></pre></td></tr></table></figure><p><strong>输出:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">李琳<br></code></pre></td></tr></table></figure><blockquote><p>测试输出一个地址</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(faker_cn.address()</span></span>)<br>--输出--<br>上海市东莞县西夏大冶路c座 <span class="hljs-number">736941</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>address()</td><td>获取一个随机的地址</td></tr><tr><td>administrative_unit()</td><td>获取一个随机的省份</td></tr><tr><td>city()</td><td>获取一个随机的市或县</td></tr><tr><td>postcode()</td><td>获取一个随机的邮政编码</td></tr><tr><td>company()</td><td>获取一个随机的公司名</td></tr><tr><td>date()</td><td>获取一个随机的日期</td></tr><tr><td>ascii_free_email()</td><td>获取一个随机的邮箱</td></tr><tr><td>hostname()</td><td>获取一个随机的网址</td></tr><tr><td>ipv4()</td><td>获取一个随机的 ip 地址</td></tr></tbody></table><h2 id="使用-Python-链接数据库并插入数据"><a href="#使用-Python-链接数据库并插入数据" class="headerlink" title="使用 Python 链接数据库并插入数据"></a>使用 Python 链接数据库并插入数据</h2><p>本文数据库使用的是<code>MySQL</code>，数据库名字为 <code>springboot</code>，建 <code>user_info</code> 表的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_info`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_info` (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `full_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `card_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sex` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `in_time` datetime(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `is_member` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">200</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci;<br></code></pre></td></tr></table></figure><p>编写代码如下，注释都在其中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> faker <span class="hljs-keyword">import</span> Faker<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">连接MySQL数据库</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    fake = Faker()<br>    <span class="hljs-comment"># 指定生成特定地域的数据</span><br>    faker_cn = Faker(locale=<span class="hljs-string">&#x27;zh_CN&#x27;</span>)<br>    <span class="hljs-comment"># 创建数据库链接</span><br>    db = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>,<br>                         user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                         passwd=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                         db=<span class="hljs-string">&#x27;springboot&#x27;</span>,<br>                         charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    <span class="hljs-comment"># 使用cursor()方法创建一个游标对象cursor</span><br>    cursor = db.cursor()<br>    <span class="hljs-comment"># SQL 插入语句</span><br>    sql = <span class="hljs-string">&quot;&quot;&quot;INSERT INTO user_info(username,address, card_no, full_name,</span><br><span class="hljs-string">                email, sex,`password`,remark)</span><br><span class="hljs-string">             VALUES (%s, %s, %s, %s, %s,%s,%s,%s)&quot;&quot;&quot;</span><br>    val = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        <span class="hljs-comment"># 生成测试用户名</span><br>        username = faker_cn.user_name()<br>        <span class="hljs-comment"># 生成测试地址</span><br>        address = faker_cn.address()<br>        <span class="hljs-comment"># 生成身份证号</span><br>        ssn = faker_cn.ssn()<br>        name = <span class="hljs-string">&quot;&quot;</span><br>        sex = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            name = faker_cn.name_female()<br>            sex = <span class="hljs-string">&quot;女&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            name = faker_cn.name_male()<br>            sex = <span class="hljs-string">&quot;男&quot;</span><br>        <span class="hljs-comment"># 生成测试邮箱</span><br>        email = faker_cn.safe_email()<br>        <span class="hljs-comment"># 生成测试密码</span><br>        passwd = faker_cn.password()<br>        val.append((username, address, ssn, name, email, sex, passwd, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 使用execute()方法执行SQL查询</span><br>    cursor.executemany(sql, val)<br>    <span class="hljs-comment"># 提交到数据库执行</span><br>    db.commit()<br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    db.close()<br><br></code></pre></td></tr></table></figure><h2 id="查看测试数据"><a href="#查看测试数据" class="headerlink" title="查看测试数据"></a>查看测试数据</h2><p>使用命令语句进入数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -proot<br></code></pre></td></tr></table></figure><p><code>-u</code> 后跟的是用户名</p><p><code>-p</code> 后跟的是密码</p><p>进入数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> use springboot;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> address,card_no,full_name,email,sex <span class="hljs-keyword">from</span> user_info limit <span class="hljs-number">110</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><p><img src="/./assets/image-20220809093044695.png" alt="image-20220809093044695"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyenv -- 快速切换 Python 版本</title>
    <link href="/2023/02/01/back-end/python/pyenv/"/>
    <url>/2023/02/01/back-end/python/pyenv/</url>
    
    <content type="html"><![CDATA[<h2 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a>解决什么问题</h2><ul><li>mac 自带 python2,md 又不能删掉他</li><li>linux 也自带 python2,这玩意都过时了,也不赶紧换掉<h3 id="安装-pyenv"><a href="#安装-pyenv" class="headerlink" title="安装 pyenv"></a>安装 pyenv</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install pyenv<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv init --path)&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv install --list<br>pyenv install 3.10.7<br></code></pre></td></tr></table></figure><h3 id="查看已安装的版本"><a href="#查看已安装的版本" class="headerlink" title="查看已安装的版本"></a>查看已安装的版本</h3><p>现在我们已经安装了 Python 3.10.7，让我们来看看我们系统上所有可用的已安装版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv versions<br></code></pre></td></tr></table></figure><h3 id="设置全局-Python"><a href="#设置全局-Python" class="headerlink" title="设置全局 Python"></a>设置全局 Python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv global 3.10.7<br></code></pre></td></tr></table></figure><p>现在，无论何时调用 <code>python</code>，您都将使用 <code>Python 3.9.4</code>。使用 <code>python --version</code> 检查它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ python --version<br>Python 3.10.7<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抛弃 Fastjson 拥抱 Jackson</title>
    <link href="/2023/01/01/back-end/utils/use-jackson/"/>
    <url>/2023/01/01/back-end/utils/use-jackson/</url>
    
    <content type="html"><![CDATA[<h3 id="为何抛弃-Fastjson-？"><a href="#为何抛弃-Fastjson-？" class="headerlink" title="为何抛弃 Fastjson ？"></a>为何抛弃 Fastjson ？</h3><ul><li>速度是较快一些，但 Jackson 相对稳定，我的程序也不差那 10-20 ms。</li><li>序列化对象时为 null 的直接给我去掉了，我知道可以配置不过滤。</li><li>配置 null 过滤，再去配置时间格式化过滤，其他的配置再去加。</li><li>序列化对象之后，属性顺序乱序，也可以配置，但我想和上面的一起用的时候，要如何配置。</li><li>一些日常的小 BUG，可以去看下 fastjson 1.x 版本的 issues ，基本没修复</li></ul><p>后面开始记录 Jackson 一些常用方式，平替 Fastjson.</p><h3 id="新建-ObjectMapper-转换器的工具类"><a href="#新建-ObjectMapper-转换器的工具类" class="headerlink" title="新建 ObjectMapper 转换器的工具类"></a>新建 ObjectMapper 转换器的工具类</h3><p>新建 <code>ObjUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjectMapper <span class="hljs-title function_">objectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        <span class="hljs-type">JavaTimeModule</span> <span class="hljs-variable">javaTimeModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>();<br><br>        javaTimeModule.addSerializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        javaTimeModule.addSerializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)));<br><br>        javaTimeModule.addSerializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>)));<br>        javaTimeModule.addDeserializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br><br>        javaTimeModule.addDeserializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)));<br>        javaTimeModule.addDeserializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>)));<br><br>        objectMapper.registerModule(javaTimeModule);<br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是用于创建一个 <code>Jackson ObjectMapper</code> 对象，并注册了 <code>JavaTimeModule</code> 模块，以便在序列化和反序列化过程中支持 Java 8 的日期和时间类。</p><blockquote><ol><li>首先，代码创建了一个新的 <code>ObjectMapper</code> 对象，这是 Jackson 库中用于序列化和反序列化 JSON 数据的核心类。</li><li>接下来，创建了一个 <code>JavaTimeModule</code> 对象，这是 Jackson 库中的一个模块，专门用于处理 Java 8 的日期和时间类。</li><li>通过调用 <code>javaTimeModule.addSerializer</code> 方法，将不同类型的日期和时间类与相应的序列化器关联起来。序列化器将 Java 8 的日期和时间对象转换为特定的字符串格式。例如，<code>LocalDateTime</code> 类型被序列化为 “yyyy-MM-dd HH:mm:ss” 格式的字符串，<code>LocalDate</code> 类型被序列化为 “yyyy-MM-dd” 格式的字符串，<code>LocalTime</code> 类型被序列化为 “HH:mm:ss” 格式的字符串。</li><li>同样，通过调用 <code>javaTimeModule.addDeserializer</code> 方法，将不同类型的日期和时间类与相应的反序列化器关联起来。反序列化器将特定格式的字符串解析为相应的 Java 8 日期和时间对象。例如，<code>LocalDateTime</code> 类型被反序列化从 “yyyy-MM-dd HH:mm:ss” 格式的字符串解析，<code>LocalDate</code> 类型被反序列化从 “yyyy-MM-dd” 格式的字符串解析，<code>LocalTime</code> 类型被反序列化从 “HH:mm:ss” 格式的字符串解析。</li><li>最后，将创建的 <code>JavaTimeModule</code> 注册到 <code>objectMapper</code> 对象中，以便在序列化和反序列化过程中使用该模块的配置。</li></ol></blockquote><h3 id="实体对象转换为-json"><a href="#实体对象转换为-json" class="headerlink" title="实体对象转换为 json"></a>实体对象转换为 json</h3><p>给出一个实体类 <code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> LocalDateTime brithday;<br><br>    <span class="hljs-keyword">private</span> String fullName;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面来创建一个 User 实体插入测试值后进行序列化为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setBrithday(LocalDateTime.now());<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> ObjUtil.objectMapper();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中通过 <code>ObjUtil.objectMapper()</code> 调用我们在工具类中定义好的转换器</p><p>输出:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;brithday&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-08-16 10:38:16&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;fullName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="给-JSON-中增加一个属性并赋值"><a href="#给-JSON-中增加一个属性并赋值" class="headerlink" title="给 JSON 中增加一个属性并赋值"></a>给 JSON 中增加一个属性并赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setBrithday(LocalDateTime.now());<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> ObjUtil.objectMapper();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br>        System.out.println(<span class="hljs-string">&quot;User ==&gt; &quot;</span> + result);<br>        <span class="hljs-type">ObjectNode</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> (ObjectNode) objectMapper.readTree(result);<br>        jsonNode.put(<span class="hljs-string">&quot;remark&quot;</span>, <span class="hljs-string">&quot;精英&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;jsonNode ==&gt; &quot;</span> + objectMapper.writeValueAsString(jsonNode));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码使用了一个已经创建好的 ObjectMapper 对象（通过 <code>ObjUtil.objectMapper()</code> 方法）来进行序列化和反序列化操作，并对 JSON 数据进行修改。</p><blockquote><ol><li><code>ObjectMapper objectMapper = ObjUtil.objectMapper();</code>: 首先，通过 <code>ObjUtil.objectMapper()</code> 方法获取一个预配置好的 ObjectMapper 对象。这个对象在之前的代码段中已经被配置为支持 Java 8 的日期和时间类的序列化和反序列化。</li><li><code>String result = objectMapper.writeValueAsString(user);</code>: 使用 ObjectMapper 对象将一个名为 <code>user</code> 的对象序列化为 JSON 字符串，并将结果存储在 <code>result</code> 变量中。</li><li><code>System.out.println(&quot;User ==&gt; &quot; + result);</code>: 打印刚刚序列化的 JSON 字符串表示的 <code>user</code> 对象。</li><li><code>ObjectNode jsonNode = (ObjectNode) objectMapper.readTree(result);</code>: 通过 ObjectMapper 对象的 <code>readTree</code> 方法，将之前序列化得到的 JSON 字符串解析为一个 <code>JsonNode</code> 对象，然后将其转换为 <code>ObjectNode</code> 类型。这使得你可以对 JSON 数据进行修改。</li><li><code>jsonNode.put(&quot;remark&quot;, &quot;精英&quot;);</code>: 在解析得到的 <code>jsonNode</code> 对象中，添加一个名为 “remark” 的键值对，将值设置为 “精英”。</li><li><code>System.out.println(&quot;jsonNode ==&gt; &quot; + objectMapper.writeValueAsString(jsonNode));</code>: 将经过修改的 <code>jsonNode</code> 对象再次序列化为 JSON 字符串，并打印输出。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/16/back-end/docker/"/>
    <url>/2022/08/16/back-end/docker/</url>
    
    <content type="html"><![CDATA[<h3 id="查询最近日志"><a href="#查询最近日志" class="headerlink" title="查询最近日志"></a>查询最近日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询日志（最后 500 条）-f 跟踪日志输出</span><br><br>docker logs -f -t --<span class="hljs-built_in">tail</span>=500 CONTAINER_ID<br><br><span class="hljs-comment"># 查看最近30分钟的日志</span><br>docker logs --since 30m CONTAINER_ID<br></code></pre></td></tr></table></figure><h3 id="Docker-配置网络代理"><a href="#Docker-配置网络代理" class="headerlink" title="Docker 配置网络代理"></a>Docker 配置网络代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo <span class="hljs-built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Service]<br>Environment=&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;<br>Environment=&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;<br>Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;<br></code></pre></td></tr></table></figure><p>重启生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/12/linux/soft/Linux%E5%AE%89%E8%A3%85RocketMQ/"/>
    <url>/2022/08/12/linux/soft/Linux%E5%AE%89%E8%A3%85RocketMQ/</url>
    
    <content type="html"><![CDATA[<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>官网下不动地址：<a href="https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip">https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</a></p><p>腾讯云高速下载: <a href="https://mirrors.cloud.tencent.com/apache/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip">https://mirrors.cloud.tencent.com/apache/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 wget 在服务器下载</span><br>wget https://mirrors.cloud.tencent.com/apache/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压下载的文件</span><br>unzip rocketmq-all-4.9.4-bin-release.zip<br><span class="hljs-comment"># 更改名称</span><br><span class="hljs-built_in">mv</span> rocketmq-all-4.9.4-bin-release rocketmq-4.9.4<br><span class="hljs-comment"># 移动文件夹</span><br><span class="hljs-built_in">mv</span> rocketmq-4.9.4 /app/<br></code></pre></td></tr></table></figure><h3 id="修改启动配置项"><a href="#修改启动配置项" class="headerlink" title="修改启动配置项"></a>修改启动配置项</h3><p>后面我们会启动 <code>mqnamesrv</code> 与 <code>mqbroker</code> ,他们各自调用的 <code>sh</code> 命令如下图所示:  </p><p><img src="http://images.zabbix.store/markdown/image-20220812161953183.png?markdown" alt="image-20220812161953183"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 bin 目录</span><br><span class="hljs-built_in">cd</span> /app/rocketmq-4.9.4/bin<br><span class="hljs-comment"># 编辑 runserver.sh  </span><br>vim runserver.sh<br><span class="hljs-comment"># 输入 /choose_gc_options 快速定位  </span><br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220812162314373.png?markdown" alt="image-20220812162314373"></p><p>上述内存默认为 <code>4g</code> 太大，我们服务器一般没那么高配置，改小一点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改 broker</span><br>vim runbroker.sh<br><span class="hljs-comment"># 使用 /JAVA_OPT 快速定位</span><br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220812162528589.png?markdown" alt="image-20220812162528589"></p><p>如上图更改所示，默认 <code>8g</code>，我们需要改小一点。  </p><p><strong>修改 Broker 配置默认生成一个测试 Topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 broker 配置文件</span><br>vim /app/rocketmq-4.9.4/conf/broker.conf<br><span class="hljs-comment"># 追加如下两行配置</span><br><span class="hljs-comment"># 自动创建 topic 便于测试</span><br>autoCreateTopicEnable=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 vim 修改环境变量</span><br>vim ~/.bash_profile<br><span class="hljs-comment"># 在 export PATH 行前增加</span><br><span class="hljs-built_in">export</span> ROCKETMQ_HOME=/app/rocketmq-4.9.4<br><span class="hljs-built_in">export</span> NAMESRV_ADDR=<span class="hljs-string">&#x27;localhost:9876&#x27;</span><br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ROCKETMQ_HOME</span>/bin<br><span class="hljs-comment"># 生效</span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="启动-namesever"><a href="#启动-namesever" class="headerlink" title="启动 namesever"></a>启动 namesever</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> /app/rocketmq-4.9.4/bin/mqnamesrv &amp;<br></code></pre></td></tr></table></figure><p>我们打印一下 <code>nohuo.out</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> nohup.out<br></code></pre></td></tr></table></figure><p>输出:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">The Name Server boot success. serializeType=JSON<br></code></pre></td></tr></table></figure><p>启动成功  </p><h3 id="启动-broker"><a href="#启动-broker" class="headerlink" title="启动 broker"></a>启动 broker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> /app/rocketmq-4.9.4/bin/mqbroker -c /app/rocketmq-4.9.4/conf/broker.conf &amp;<br></code></pre></td></tr></table></figure><p>打印一下 <code>nohuo.out</code>  </p><p>输出:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">The broker[broker-a, 10.0.16.2:10911] boot success. serializeType=JSON and name server is localhost:9876<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在 <code>rocketmq</code> 中，有一个脚本可以快速的验证服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/app/rocketmq-4.9.4/bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br></code></pre></td></tr></table></figure><p>输出信息:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">..............<br>ssageQueue [topic=TopicTest, brokerName=broker-a, queueId=3], queueOffset=499]<br>16:43:35.062 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[10.0.16.2:10911] result: <span class="hljs-literal">true</span><br>16:43:35.067 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[127.0.0.1:9876] result: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>会快速启动生产者发送消息，应该是 1000 条。  </p><p><strong>这个是调用的那个地方呢？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> /app/rocketmq-4.9.4/lib<br><span class="hljs-comment"># 管道查询 </span><br>ll | grep exam<br></code></pre></td></tr></table></figure><p>输出: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-r--r-- 1 root root  146381 Jun 21 10:56 rocketmq-example-4.9.4.jar<br></code></pre></td></tr></table></figure><p>调用的就是上述 jar 包。  </p><p>现在开始测试消费者:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/app/rocketmq-4.9.4/bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br></code></pre></td></tr></table></figure><p>大致输出如下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">.........<br>ConsumeMessageThread_please_rename_unique_group_name_4_20 Receive New Messages: [MessageExt [brokerName=broker-a, queueId=0, storeSize=191, queueOffset=255, sysFlag=0, bornTimestamp=1660293813839, bornHost=/10.0.16.2:40886, storeTimestamp=1660293813840, storeHost=/10.0.16.2:10911, msgId=0A00100200002A9F000000000002FC74, commitLogOffset=195700, bodyCRC=548040149, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message&#123;topic=<span class="hljs-string">&#x27;TopicTest&#x27;</span>, flag=0, properties=&#123;MIN_OFFSET=0, MAX_OFFSET=500, CONSUME_START_TIME=1660309899471, UNIQ_KEY=7F00000171BB4B85612C3C3CBE4F0014, CLUSTER=DefaultCluster, TAGS=TagA&#125;, body=[72, 101, 108, 108, 111, 32, 82, 111, 99, 107, 101, 116, 77, 81, 32, 50, 48], transactionId=<span class="hljs-string">&#x27;null&#x27;</span>&#125;]] <br></code></pre></td></tr></table></figure><p>会看到很多类似的消费信息。  </p><p>至此，我们单机的 <code>rocketMQ</code> 的服务已经搭建完成了。  </p><h3 id="停止-rocketMQ"><a href="#停止-rocketMQ" class="headerlink" title="停止 rocketMQ"></a>停止 rocketMQ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先停 broker</span><br>/app/rocketmq-4.9.4/bin/mqshutdown broker<br><span class="hljs-comment"># 再停 namesrv</span><br>/app/rocketmq-4.9.4/bin/mqshutdown namesrv<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/11/linux/Linux%E6%B8%85%E9%99%A4%E7%99%BB%E5%BD%95%E7%97%95%E8%BF%B9/"/>
    <url>/2022/08/11/linux/Linux%E6%B8%85%E9%99%A4%E7%99%BB%E5%BD%95%E7%97%95%E8%BF%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="1-查看登录-ip"><a href="#1-查看登录-ip" class="headerlink" title="1. 查看登录 ip"></a>1. 查看登录 ip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/wtmp<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220811103708038.png?markdown" alt="image-20220811103708038">  </p><p><strong>解决方案:</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改其中的 ip</span><br>vim /var/log/wtmp<br><span class="hljs-comment"># 删除</span><br><span class="hljs-built_in">rm</span> /var/log/wtmp<br></code></pre></td></tr></table></figure><p>执行<code>last</code> 命令的时候，就会看不到当前登录的 <code>ip</code> 信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示登录成功的用户名单</span><br>$: last<br></code></pre></td></tr></table></figure><h3 id="2-查看登陆失败的信息"><a href="#2-查看登陆失败的信息" class="headerlink" title="2. 查看登陆失败的信息"></a>2. 查看登陆失败的信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/btmp<br></code></pre></td></tr></table></figure><p>因为是二进制文件，根据自己的 <code>ip</code> 进行 <code>grep</code> 的操作如下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip 为，39.156.x.x 的时候，搜 39 或者 156，看下有相同的</span><br><span class="hljs-built_in">cat</span> /var/log/btmp | grep -a 156<br></code></pre></td></tr></table></figure><p>解决方案同 <code>1</code> 中的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示登录失败的用户名单</span><br>$: lastb<br></code></pre></td></tr></table></figure><h3 id="3-清除-Linux-系统历史执行命令"><a href="#3-清除-Linux-系统历史执行命令" class="headerlink" title="3. 清除 Linux 系统历史执行命令"></a>3. 清除 Linux 系统历史执行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除</span><br><span class="hljs-built_in">history</span> -c<br><span class="hljs-comment"># 查看历史执行命令，发现已经没有  </span><br><span class="hljs-built_in">history</span><br><span class="hljs-comment"># 解决方案 2:  使用 echo 清空文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; ~/.bash_history<br></code></pre></td></tr></table></figure><h3 id="4-清理-lastlog"><a href="#4-清理-lastlog" class="headerlink" title="4. 清理 lastlog"></a>4. 清理 lastlog</h3><p>显示系统中所有用户最近一次登录信息。  </p><p><img src="http://images.zabbix.store/markdown/image-20220811110408556.png?markdown" alt="image-20220811110408556">  </p><p>可以直接看到我们的 <code>ip</code> 痕迹。  </p><p><strong>解决方案：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 二进制文件直接删除</span><br><span class="hljs-built_in">rm</span> /var/log/lastlog<br></code></pre></td></tr></table></figure><h3 id="5-清理其他日志"><a href="#5-清理其他日志" class="headerlink" title="5. 清理其他日志"></a>5. 清理其他日志</h3><p><strong>&#x2F;var&#x2F;log&#x2F;secure</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 /var/log/secure 查找你的 ip ， 例如 cat /var/log/secure | grep 36.22.225.1 这样</span><br><span class="hljs-built_in">cat</span> /var/log/secure | grep xx.xx.xx.xx<br></code></pre></td></tr></table></figure><p>如果有输出，就使用 <code>vim</code> 进入删除即可。  </p><p><strong>&#x2F;var&#x2F;log&#x2F;audit&#x2F; 目录下</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /var/log/audit/<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/markdown/image-20220811115745120.png?markdown" alt="image-20220811115745120"></p><p><strong>解决方案:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 空值写入</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /var/log/audit/audit.log<br><span class="hljs-comment"># 删除</span><br><span class="hljs-built_in">rm</span> /var/log/audit/audit.log<br></code></pre></td></tr></table></figure><p>其余几个 <code>audit*.log</code> 尝试用 <code>grep</code> 搜索自己的 <code>ip</code>,找到后使用上述解决方案。  </p><h3 id="6-不要使用-vim"><a href="#6-不要使用-vim" class="headerlink" title="6. 不要使用 vim"></a>6. 不要使用 vim</h3><p><code>vim</code> 操作文件后，后保留日志，我们来看一下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.viminfo<br></code></pre></td></tr></table></figure><p>找了一些部分修改此文件的命令，未测试，遇事不决，建议直接删除。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ~/.viminfo<br></code></pre></td></tr></table></figure><h3 id="7-ssh-隐身登录"><a href="#7-ssh-隐身登录" class="headerlink" title="7. ssh 隐身登录"></a>7. ssh 隐身登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T root@xx.ip.xx.xx /bin/bash -i<br><span class="hljs-comment"># 示例</span><br>ssh -T root@172.10.1.168 /bin/bash -i<br></code></pre></td></tr></table></figure><p><strong>登录成功后:</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$: last <span class="hljs-comment"># 此命令查不到</span><br>$: lastb <span class="hljs-comment"># 此命令查不到</span><br></code></pre></td></tr></table></figure><p>让我们去看下日志:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 存在痕迹</span><br><span class="hljs-built_in">cat</span> /var/log/secure <br></code></pre></td></tr></table></figure><p>此时最好不好删除，此文件日志多，直接删除引起管理员注意。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 匹配自己 ip 进行替换</span><br>sed -i <span class="hljs-string">&#x27;s/自己的ip/要换成的ip/g&#x27;</span> /var/log/messages<br>sed -i <span class="hljs-string">&#x27;s/自己的ip/要换成的ip/g&#x27;</span> /var/log/secure<br></code></pre></td></tr></table></figure><p>上述命令执行完后:  </p><p><code>cat /var/log/secure </code> 后发现 <code>ip</code> 已经变为自己想替换成的 <code>ip</code> .  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/08/back-end/java-base/Collections/"/>
    <url>/2022/08/08/back-end/java-base/Collections/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Collections-提升开发效率，势在必得"><a href="#使用-Collections-提升开发效率，势在必得" class="headerlink" title="使用 Collections 提升开发效率，势在必得"></a>使用 Collections 提升开发效率，势在必得</h1><blockquote><p>使用 Collections.addAll 批量给集合添加数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; nameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(nameList, <span class="hljs-string">&quot;白手&quot;</span>, <span class="hljs-string">&quot;灯光师&quot;</span>, <span class="hljs-string">&quot;鬼手&quot;</span>);<br>System.out.println(nameList);<br></code></pre></td></tr></table></figure><p><strong>输出:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[白手, 灯光师, 鬼手]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/24/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/24/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="scp-命令"><a href="#scp-命令" class="headerlink" title="scp 命令"></a>scp 命令</h3><blockquote><p>从本地复制到远程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp [filename] root@192.168.64.129:/root<br></code></pre></td></tr></table></figure><h3 id="mv-命令排除"><a href="#mv-命令排除" class="headerlink" title="mv 命令排除"></a>mv 命令排除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> !(排除文件或目录) 目标路径<br></code></pre></td></tr></table></figure><p>需要多个排除文件或目录用 <code>|</code> 隔开。  </p><p>遇到报错：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-bash: !: event not  <br></code></pre></td></tr></table></figure><p>执行命令:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">shopt</span> -s extglob<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/29/back-end/spring-boot/jpa/"/>
    <url>/2022/05/29/back-end/spring-boot/jpa/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>JPA</code> 一种规范，并非ORM框架，也就是ORM上统一的规范。</p><p>今天学习的是 <code>spring-data-jpa</code>，与 <code>Mybatis</code> 类似。根本上都是用来在 <code>Java</code> 中用来操作数据库的，不是比 <code>Mybatis</code> 强，也不比 <code>Mybatis</code> 弱，各有各的好处。</p><p>那就有人要说了，那我为啥要再去学 JPA，而不直接接着用 Mybatis。其实 JPA 技术的核心在于便捷开发，可以直接通过<strong>实体字段映射表字段</strong>，在启动项目的时候，根据<strong>配置策略来进行表结构的生成或者增量变动</strong>。</p><p>下面我们通过一些简单的案例来初步学习下。  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>用这项技术可能会出现什么问题，官方有没有提供方案解决，如果没有，可能的解决方案有哪些。</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><ul><li>spring-boot-starter-data-jpa 是Spring Boot的项目，包含了spring-data-jpa和一些其他依赖用于Spring Boot项目</li><li>spring-data-jpa 是Spring Data的项目，就是本体，用于任何项目</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>为了执行简单查询分页，编写太多重复代码</li><li>基于JPA的数据访问层的增强支持<blockquote><p>用了之后可以做什么，为什么要用？如下代码解释</p></blockquote></li></ul><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springredis.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.GenerationType;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String account;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Long&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAllTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userDao.findAll().toString());<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面的操作已经完成了一个查询全部，相信不用在做多余的解释了</p><p>JPA优点：主要就是简单易用，集成方便,可以不用写SQL语句</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>JDK 1.8 以上</li><li>IDEA 2020.3</li><li>Gradle 5+ 或者 Maven 3.5+</li><li>在 <a href="https://start.spring.io/">https://start.spring.io/</a> 初始化一个项目</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5ubGFyay5jb20veXVxdWUvMC8yMDIwL3BuZy82MzEyNDIvMTU5MDA0ODU1MjQ2Mi04YmI3MTZkZC1jYmU0LTQ1ZTUtOThjMC1lZjc4ZmQ1OTM2NmIucG5n?x-oss-process=image/format,png#align=left&display=inline&height=873&margin=[objectObject]&name=image.png&originHeight=1746&originWidth=3354&size=419283&status=done&style=none&width=1677" alt="image.png"><br>这里使用的是Maven,下载之后请在IDEA导入项目</p><h2 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5ubGFyay5jb20veXVxdWUvMC8yMDIwL3BuZy82MzEyNDIvMTU5MDA1NTgyNTE3My1hNDEwMTY0MS1hYWZlLTQ4NDUtODJhZC05MmY3MDhjZGNiODUucG5n?x-oss-process=image/format,png#align=left&display=inline&height=747&margin=[objectObject]&name=image.png&originHeight=1494&originWidth=838&size=216173&status=done&style=none&width=419" alt="image.png"></p><h2 id="先看pom-xml配置"><a href="#先看pom-xml配置" class="headerlink" title="先看pom.xml配置"></a>先看pom.xml配置</h2><blockquote><p>国外依赖下载慢,更换阿里源</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--阿里云主仓库，代理了maven central和jcenter仓库--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--阿里云代理Spring 官方仓库--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spring-milestones<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Spring Milestones<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="定义一个实体对象-SysUser-java"><a href="#定义一个实体对象-SysUser-java" class="headerlink" title="定义一个实体对象 SysUser.java"></a>定义一个实体对象 SysUser.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.model;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.GenerationType;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Entity(name = &quot;sys_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysUser</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SysUser</span><span class="hljs-params">(String email, String username, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里有一个<code>**SysUser**</code> 类, <code>@NoArgsConstructor</code>  默认构造函数仅为JPA而存在。</li><li>另一个构造函数是您将用于创建要保存到数据库的user实例的构造函数。</li><li>在类上加 <code>@Entity</code>  注解，表示这个是一个 JPA 的实体，如果在类上没有加 <code>@Table</code> 注解，表明该实体将映射到名为 <code>sys_user</code>  的表,如果要加上,可以在其 name 属性里写入表名，如: <code>@Table(name = &quot;t_user&quot;)</code> </li><li><code>id</code> 属性使用 <code>@Id</code> 注释，以便JPA将其识别为对象的ID.</li><li>@GeneratedValue(strategy  &#x3D; GenerationType.AUTO) 自增长ID策略</li></ul><h2 id="创建一个-UserRepository-java-接口"><a href="#创建一个-UserRepository-java-接口" class="headerlink" title="创建一个 UserRepository.java 接口"></a>创建一个 UserRepository.java 接口</h2><blockquote><p>这里很简单，直接继承核心接口<strong>JpaRepository</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.repository;<br><br><span class="hljs-keyword">import</span> com.example.demo.model.SysUser;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;SysUser, Long&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d4NC5zaW5haW1nLmNuL2xhcmdlL2QxZGI5ZmQzZ3kxZnhsa3FtYTJiNWoyMXdxMWhtZHpoLmpwZw?x-oss-process=image/format,png#align=left&display=inline&height=1930&margin=[objectObject]&originHeight=1930&originWidth=2474&status=done&style=none&width=2474"></p><h2 id="配置文件application-yml"><a href="#配置文件application-yml" class="headerlink" title="配置文件application.yml"></a>配置文件application.yml</h2><p>修改application.properties 为 application.yml</p><p><strong>src&#x2F;main&#x2F;resources&#x2F;application.yml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  datasource:<br>    driverClassName: org.h2.Driver<br>    password: root<br>    url: jdbc:h2:mem:demodb:file:data/demo<br>    username: root<br>  jpa:<br>    open-in-view: <span class="hljs-literal">true</span><br>    database-platform: org.hibernate.dialect.H2Dialect<br>    # spring.jpa.show-sql=<span class="hljs-literal">true</span> 配置在日志中打印出执行的 SQL 语句信息。<br>    show-sql: <span class="hljs-literal">true</span><br>    # 配置指明在程序启动的时候要删除并且创建实体类对应的表。<br>    # create 这个参数很危险，因为他会把对应的表删除掉然后重建。所以千万不要在生成环境中使用。只有在测试环境中，一开始初始化数据库结构的时候才能使用一次。<br>    # ddl-auto:create----每次运行该程序，没有表格会新建表格，表内有数据会清空<br>    # ddl-auto:create-drop----每次程序结束的时候会清空表<br>    # ddl-auto:update----每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新(推荐)<br>    # ddl-auto:validate----运行程序会校验数据与数据库的字段类型是否相同，不同会报错<br>    hibernate.ddl-auto: update<br></code></pre></td></tr></table></figure><h2 id="h2数据库"><a href="#h2数据库" class="headerlink" title="h2数据库"></a>h2数据库</h2><blockquote><p>在resources 文件夹下新建 data.sql</p></blockquote><p><strong>data.sql</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> sys_user;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sys_user<br>(<br>    id       <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    email    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">250</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">250</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">250</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><h2 id="测试类进行测试-SpringbootJpaApplicationTests-java"><a href="#测试类进行测试-SpringbootJpaApplicationTests-java" class="headerlink" title="测试类进行测试 SpringbootJpaApplicationTests.java"></a>测试类进行测试 SpringbootJpaApplicationTests.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> com.example.demo.model.SysUser;<br><span class="hljs-keyword">import</span> com.example.demo.repository.UserRepository;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootJpaApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        userRepository.save(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SysUser</span>(<span class="hljs-string">&quot;123@qq.com&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userRepository.findAll().toString());<br>    &#125;<br><br>    <span class="hljs-comment">//修改操作</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ifPresent 如果存在值，则使用值调用指定的使用者，否则不执行任何操作。</span><br>        userRepository.findById(<span class="hljs-number">1L</span>).ifPresent(user -&gt; &#123;<br>            user.setUsername(<span class="hljs-string">&quot;马华云腾&quot;</span>);<br>            userRepository.save(user);<br>            System.out.println(user.toString());<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">()</span> &#123;<br>        userRepository.findById(<span class="hljs-number">2L</span>).ifPresent(user -&gt; userRepository.delete(user));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5ubGFyay5jb20veXVxdWUvMC8yMDIwL3BuZy82MzEyNDIvMTU5MDA1Njg2MTIwNi1kMTBhMjcxYi04M2MzLTQyOTEtYjI1ZS1jMDIzZTYwZjI3N2QucG5n?x-oss-process=image/format,png#align=left&display=inline&height=379&margin=[objectObject]&name=image.png&originHeight=758&originWidth=3272&size=213930&status=done&style=none&width=1636" alt="image.png"></p><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><p>如果出现下列等错误：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Error:(<span class="hljs-number">41</span>, <span class="hljs-number">13</span>) java: 找不到符号<br>  符号:   方法 <span class="hljs-built_in">setName</span>(java<span class="hljs-selector-class">.lang</span>.String)<br>  位置: 类型为com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.springbootjpademo</span><span class="hljs-selector-class">.entity</span>.User的变量 user<br></code></pre></td></tr></table></figure><p>请注意下面的设置是否正确：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d4NC5zaW5haW1nLmNuL2xhcmdlL2QxZGI5ZmQzZ3kxZnhsbXZlb3EweWoyMXZ3MTl3YWpoLmpwZw?x-oss-process=image/format,png#align=left&display=inline&height=1652&margin=[objectObject]&originHeight=1652&originWidth=2444&status=done&style=none&width=2444"></p><h2 id="RestClient-API-测试"><a href="#RestClient-API-测试" class="headerlink" title="RestClient API 测试"></a>RestClient API 测试</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5ubGFyay5jb20veXVxdWUvMC8yMDIwL3BuZy82MzEyNDIvMTU5MDA1NjkyNzc2Ni1kNmY2Njg0OC0xYjFhLTQ0YjUtYWEyMS1iYzJmZTNiZWM1NmIucG5n?x-oss-process=image/format,png#align=left&display=inline&height=879&margin=[objectObject]&name=image.png&originHeight=1758&originWidth=1340&size=593382&status=done&style=none&width=670" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">### 新增<span class="hljs-number">1</span><br><br>POST http:<span class="hljs-comment">//localhost:8080/user/add</span><br>Content-Type: application/json<br><br>&#123;<br>  <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;eyck@aws.com&quot;</span>,<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>  <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;root&quot;</span><br>&#125;<br><br>### 新增<span class="hljs-number">2</span><br><br>POST http:<span class="hljs-comment">//localhost:8080/user/add</span><br>Content-Type: application/json<br><br>&#123;<br><span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;ekko@aws.com&quot;</span>,<br><span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;ekko&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;ekko&quot;</span><br>&#125;<br><br>### 修改<br><br>PUT http:<span class="hljs-comment">//localhost:8080/user/update</span><br>Content-Type: application/json<br><br>&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;eyck@aws.com&quot;</span>,<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>  <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;root&quot;</span><br>&#125;<br><br>### 获取所有<br>GET http:<span class="hljs-comment">//localhost:8080/user/all</span><br>Accept: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Cache-Control: no-cache</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### 删除</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PUT http://localhost:8080/user/del/2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### 获取所有</span><br><span class="hljs-comment">GET http://localhost:8080/user/all</span><br><span class="hljs-comment">Accept: */</span>*<br>Cache-Control: no-cache<br></code></pre></td></tr></table></figure><p>左上角 Run all …<br>测试结果….<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5ubGFyay5jb20veXVxdWUvMC8yMDIwL3BuZy82MzEyNDIvMTU5MDA1Njk5ODcwOC02NDViNmZlNy1jYmJhLTRmZWUtYTUyNi1mNDk3Y2JlODM3MmQucG5n?x-oss-process=image/format,png#align=left&display=inline&height=437&margin=[objectObject]&name=image.png&originHeight=874&originWidth=1850&size=192793&status=done&style=none&width=925" alt="image.png"> </p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/Gleans/spring-boot/tree/master/springboot-jpa">https://github.com/Gleans/spring-boot/tree/master/springboot-jpa</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/28/back-end/plugins/lombok/"/>
    <url>/2022/05/28/back-end/plugins/lombok/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-Lombok"><a href="#什么是-Lombok" class="headerlink" title="什么是 Lombok"></a>什么是 Lombok</h3><p>Java 语言的排名一直名列前茅，但是有时候我们的代码与业务无关，并且过于冗长，并例如在实体类中，经常写很多 <code>getter</code> 或者 <code>setter</code> 方法。<br>这时候我们使用 <code>Lombok</code> 来使用一些功能，使其代替我们把 Java 字节码自动编译到 <code>class</code> 文件中。  </p><h3 id="Lombok-配置"><a href="#Lombok-配置" class="headerlink" title="Lombok 配置"></a>Lombok 配置</h3><p>目前作者在用的 <code>idea</code> 版本为 <code>2022.1.1</code> ，已经默认集成了 <code>Lombok</code> 插件，低版本的 idea 可以自行去插件库安装 Lombok 插件。  </p><blockquote><p><code>Maven</code> 引入 <code>Lombok</code> 依赖  </p></blockquote><p><a href="https://projectlombok.org/changelog">这里是</a>Lombok更新日志与可用版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>pom.xml</code> 中引入的上述依赖，可以看到 <code>scope</code> 是 <code>provided</code> 状态，此状态表示此依赖只在编译与测试时有效，当我们项目打包成 <code>*.jar</code> 的时候并不会打入进去。</p><h3 id="为什么要使用-Lombok"><a href="#为什么要使用-Lombok" class="headerlink" title="为什么要使用 Lombok"></a>为什么要使用 Lombok</h3><p>很多技术我们会有疑问，就是为什么要用这项技术？下面来揭晓<br>引入 Lombok 前 , 我们的实体类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestModel</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到上面的实体代码中，已经多了很多 get 与 set 方法，这还是处于实体属性字段少的情况下。平时项目开发过程中，属性字段存在 30+ 的时候，大约会有 180+ 行 <code>get</code> 与 <code>set</code> 方法冗余代码。整个实体很臃肿。这个时候我们引入 Lombok 看下  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestModel</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TestModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestModel</span>();<br>        model.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们加入了<code>@Setter</code>与<code>@Getter</code>注解后，这时 <code>Lombok</code> 会代替我们在编译的时候，去 <code>class</code> 文件增加 <code>get</code> 与 <code>set</code> 方法。<br>经常使用的时候，还会使用一个 <code>@ToString</code> 的注解，这时候发现类上已经追加了三个注解，再算上我们 swagger 和 jpa 等注解。   </p><blockquote><p>注解太多？  没事，有<a href="https://projectlombok.org/features/Data">聚合注解 @Data </a>    </p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46875dd1419b493ba702abdf8c413f72~tplv-k3u1fbpfcp-watermark.image" alt="@Data.png"></p><p>通常，我们最常用的 <code>Lombok</code> 中的注解就是 <code>@Data</code>  .  </p><h2 id="简化-set-与-get-方法"><a href="#简化-set-与-get-方法" class="headerlink" title="简化 set 与 get 方法"></a>简化 set 与 get 方法</h2><p>日常使用下的 set 方法是这样操作的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TestModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestModel</span>();<br>model.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>model.setAge(<span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><p>get 方法是如下这样的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(model.getName() + <span class="hljs-string">&quot;-&quot;</span> + model.getAge());<br></code></pre></td></tr></table></figure><p>get*() 与 set*() 写多了也会降低开发效率，并且看起来并不是很直观，因为这些大多是与逻辑无关的操作。  </p><blockquote><p>使用 @Accessors(chain &#x3D; true) 注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestModel</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TestModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestModel</span>().setName(<span class="hljs-string">&quot;张三&quot;</span>).setAge(<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当字段繁多的时候，我们使用这种链式的 set 方式使代码更加直观与整洁。  </p><p><strong>Ps: 细节注意</strong></p><p><code>@Accessors(fluent = true)</code>不要与 <code>fastjson</code> 一起使用，<code>反序列化</code>会有 bug。</p><h2 id="实体建造者模式"><a href="#实体建造者模式" class="headerlink" title="实体建造者模式"></a>实体建造者模式</h2><p>以下代码为设置一个 api 请求的实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiSettings</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">// 其他字段</span><br>    <span class="hljs-comment">// 空构造方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>像上述这种情况，我们希望当创建完成一个 <code>api</code> 请求的设置后不会被 set 方法更改，这时需要设计一个<code>建造者模式</code>的实体。使用 <code>Lombok</code> 的优点又体现出来，我们参考如下代码，使用 <code>@Builder</code> 注解。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiSettings</span> &#123;<br>    <span class="hljs-comment">// ... 类中代码保持不变</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们使用此模式来构建一个 <code>api</code> 请求类，如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ApiSettings.builder()<br>        .host(<span class="hljs-string">&quot;127.0.0.1&quot;</span>)<br>        .port(<span class="hljs-number">8080</span>)<br>        .username(<span class="hljs-string">&quot;admin&quot;</span>)<br>        .password(<span class="hljs-string">&quot;admin&quot;</span>)<br>        .build();<br></code></pre></td></tr></table></figure><h2 id="空构造方法"><a href="#空构造方法" class="headerlink" title="空构造方法"></a>空构造方法</h2><p>当只使用 <code>@Data</code> 注解的时候，会存在默认的空构造方法，也就是相当于存在 <code>@NoArgsConstructor</code> 。</p><p>当增加注解<code>@AllArgsConstructor</code>后，反编译 <code>class</code> 如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ApiSettings(<span class="hljs-keyword">final</span> String host, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> port, <span class="hljs-keyword">final</span> String username, <span class="hljs-keyword">final</span> String password) &#123;<br>    <span class="hljs-built_in">this</span>.host = host;<br>    <span class="hljs-built_in">this</span>.port = port;<br>    <span class="hljs-built_in">this</span>.username = username;<br>    <span class="hljs-built_in">this</span>.password = password;<br>&#125;<br></code></pre></td></tr></table></figure><p>会增加一个全属性构造，这个时候再去 new 实体的空构造就会报错，就需要创建空构造或者引入<code>@NoArgsConstructor</code> 了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/27/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/04/27/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="1-微信小程序-pad-block-corrupted-问题"><a href="#1-微信小程序-pad-block-corrupted-问题" class="headerlink" title="1.微信小程序-pad block corrupted 问题"></a>1.微信小程序-pad block corrupted 问题</h3><blockquote><p>问题复现  </p></blockquote><p>授权时获取用户信息，偶尔解密时后台会报错 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">（javax.crypto.BadPaddingException: pad block corrupted）<br></code></pre></td></tr></table></figure><blockquote><p>问题原因      </p></blockquote><p>wx.getUserProfile由按钮触发</p><p>以往经常直接将 wx.login 在wx.getUserProfile内部获取code</p><p>但是code是否最新不能保证</p><blockquote><p>问题解决</p></blockquote><p>在页面load时执行wx.login</p><p>将code（此时肯定是最新的）加入缓存</p><p>在获取用户授权时</p><p>code从缓存中获取</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/19/front-end/Vue3_TS/"/>
    <url>/2022/04/19/front-end/Vue3_TS/</url>
    
    <content type="html"><![CDATA[<p>安装 <code>volar</code> 插件在<code> vsCode</code></p><h3 id="三、引入-Ant-Design-x56-x75-x65-x40-51-x2e-49-46-49"><a href="#三、引入-Ant-Design-x56-x75-x65-x40-51-x2e-49-46-49" class="headerlink" title="三、引入 Ant Design &#x56;&#x75;&#x65;&#x40;&#51;&#x2e;&#49;&#46;&#49;"></a>三、引入 Ant Design <a href="mailto:&#x56;&#x75;&#x65;&#x40;&#51;&#x2e;&#49;&#46;&#49;">&#x56;&#x75;&#x65;&#x40;&#51;&#x2e;&#49;&#46;&#49;</a></h3><p><a href="https://www.antdv.com/docs/vue/introduce-cn">官网文档地址</a></p><h4 id="a-安装依赖"><a href="#a-安装依赖" class="headerlink" title="a.安装依赖"></a>a.安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install ant-design-vue@3.1.1 --save<br></code></pre></td></tr></table></figure><h4 id="b-引入-antd-到-main-ts"><a href="#b-引入-antd-到-main-ts" class="headerlink" title="b.引入 antd 到 main.ts"></a>b.引入 antd 到 main.ts</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-comment">// 引入Antd</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Antd</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;ant-design-vue/dist/antd.css&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Antd</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="c-安装-ant-design-vue-helper-插件在-vsCode"><a href="#c-安装-ant-design-vue-helper-插件在-vsCode" class="headerlink" title="c.安装 ant-design-vue-helper 插件在 vsCode"></a>c.安装 <code>ant-design-vue-helper</code> 插件在<code> vsCode</code></h4><p><img src="http://images.zabbix.store/images/image-20220419115630637.png" alt="image-20220419115630637"></p><h3 id="四-路由"><a href="#四-路由" class="headerlink" title="四. 路由"></a>四. 路由</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router@4<br></code></pre></td></tr></table></figure><h4 id="2-创建依赖"><a href="#2-创建依赖" class="headerlink" title="2. 创建依赖"></a>2. 创建依赖</h4><p>在项目根目录src下面，创建router文件夹，然后创建index.ts文件<br><strong>index.ts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">import &#123; createRouter, createWebHistory, RouteRecordRaw &#125; from <span class="hljs-string">&quot;vue-router&quot;</span>;<br>import Layout from <span class="hljs-string">&quot;../components/HelloWorld.vue&quot;</span>;<br><br>const routes: Array&lt;RouteRecordRaw&gt; = [<br>    &#123;<br>        path: <span class="hljs-string">&quot;/&quot;</span>,<br>        name: <span class="hljs-string">&quot;Home&quot;</span>,<br>        component: Layout,<br>    &#125;,<br>];<br><br>const router = createRouter(&#123;<br>    <span class="hljs-built_in">history</span>: createWebHistory(),<br>    routes,<br>&#125;);<br><br><span class="hljs-built_in">export</span> default router;<br></code></pre></td></tr></table></figure><p>在main.ts中引入路由  </p><p><strong>main.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-comment">// 引入Antd</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Antd</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;ant-design-vue/dist/antd.css&quot;</span>;<br><span class="hljs-comment">// 引入路由</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br>app.<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Antd</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="五-配置vite"><a href="#五-配置vite" class="headerlink" title="五.配置vite"></a>五.配置vite</h3><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖</span><br>npm install @types/node --save-dev<br></code></pre></td></tr></table></figure><p>引入 <strong>vite.config.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>    <span class="hljs-attr">server</span>: &#123;<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-comment">// 解决use `--host` to expose</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8443</span>,<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">alias</span>: [<br>            &#123;<br>                <span class="hljs-attr">find</span>: <span class="hljs-string">&quot;@&quot;</span>,<br>                <span class="hljs-attr">replacement</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src&quot;</span>),<br>            &#125;,<br>        ],<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>引入别名到 <strong>tsconfig.json</strong> 在<code>lib</code>属性后嵌入代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// paths 路径解析起点</span><br><span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 别名路径设置</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/22/back-end/design-pattern/singleton-pattern/"/>
    <url>/2022/03/22/back-end/design-pattern/singleton-pattern/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h3><p>单例模式通过限制类的实例化来确保只存在一个类的实例.</p><h3 id="为什么要使用单例"><a href="#为什么要使用单例" class="headerlink" title="为什么要使用单例"></a>为什么要使用单例</h3><p>例如我们在系统运行中，就需要加载一些配置与属性，这些配置需要在整个生命周期中存在，且只需要一份。</p><p>例如数据库连接池，最初建立的时候，初始化50个连接，当使每个连接用完毕后放到池子中，使用单例模式后，保证连接池只有一个。</p><p>参考链接：<a href="https://www.cnblogs.com/seesea125/archive/2012/04/05/2433463.html">设计模式培训之一：为什么要用单例模式？</a></p><h3 id="饱汉式单例"><a href="#饱汉式单例" class="headerlink" title="饱汉式单例"></a>饱汉式单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonEager</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">SingletonEager</span> <span class="hljs-variable">singletonEager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonEager</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonEager</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;饿汉式单例模式&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonEager <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singletonEager;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/back-end/middleware/redis-base/"/>
    <url>/2022/03/21/back-end/middleware/redis-base/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis-后台启动"><a href="#Redis-后台启动" class="headerlink" title="Redis 后台启动"></a>Redis 后台启动</h3><p>编辑<strong>redis.conf</strong>文件，搜索<strong>daemonize</strong>更改为<strong>yes</strong></p><h3 id="Redis下线"><a href="#Redis下线" class="headerlink" title="Redis下线"></a>Redis下线</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">有密码</span><br>redis-cli -a 你的密码 shutdown<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无密码</span><br>redis-cli shutdown<br></code></pre></td></tr></table></figure><h3 id="docker-compose启动redis"><a href="#docker-compose启动redis" class="headerlink" title="docker-compose启动redis"></a>docker-compose启动redis</h3><p>挂载的配置文件放在 .&#x2F;redis&#x2F;conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8089:6379&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis/data/:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis/conf:/usr/local/redis/conf/</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/usr/local/redis/conf/redis.conf</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>redis.conf 的下载地址：<a href="https://redis.io/topics/config">https://redis.io/topics/config</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/back-end/design-pattern/README/"/>
    <url>/2022/03/21/back-end/design-pattern/README/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ul><li><input checked="" disabled="" type="checkbox"> 单例模式  </li><li><input disabled="" type="checkbox"> 工厂方法模式  </li><li><input disabled="" type="checkbox"> 抽象工厂模式  </li><li><input disabled="" type="checkbox"> 建造者模式  </li><li><input disabled="" type="checkbox"> 原型模式</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><ul><li><input disabled="" type="checkbox"> 适配器模式  </li><li><input disabled="" type="checkbox"> 桥接模式  </li><li><input disabled="" type="checkbox"> 组合模式  </li><li><input disabled="" type="checkbox"> 装饰模式  </li><li><input disabled="" type="checkbox"> 外观模式  </li><li><input disabled="" type="checkbox"> 享元模式  </li><li><input disabled="" type="checkbox"> 代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ul><li><input disabled="" type="checkbox"> 访问者模式  </li><li><input disabled="" type="checkbox"> 模板模式  </li><li><input disabled="" type="checkbox"> 策略模式  </li><li><input disabled="" type="checkbox"> 状态模式  </li><li><input disabled="" type="checkbox"> 观察者模式  </li><li><input disabled="" type="checkbox"> 备忘录模式  </li><li><input disabled="" type="checkbox"> 中介者模式  </li><li><input disabled="" type="checkbox"> 迭代器模式  </li><li><input disabled="" type="checkbox"> 解释器模式  </li><li><input disabled="" type="checkbox"> 命令模式  </li><li><input disabled="" type="checkbox"> 责任链模式</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/database/mysql-recovery/"/>
    <url>/2022/03/21/database/mysql-recovery/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次物理备份恢复到生产数据库"><a href="#记一次物理备份恢复到生产数据库" class="headerlink" title="记一次物理备份恢复到生产数据库"></a>记一次物理备份恢复到生产数据库</h1><h2 id="1-前戏"><a href="#1-前戏" class="headerlink" title="1. 前戏"></a>1. 前戏</h2><blockquote><p>一个基于 hibernate 编写的软件，我把线上的配置文件拷贝下来，忘了改，直接使用 docker-compose 编排启动完成后，生产库就完了，抽一支烟思考一下或许还有救</p></blockquote><p>打开阿里云发现有备份</p><div align="center"> <img src="http://images.zabbix.store/202105281720152021-05-28.png" /></div><p>点击下载到本地后，这什么玩意，**20210528080912_qp.xb 结尾的文件，没见过，再说，我也不是一个老鸟，懵逼了</p><h2 id="2-开始疯狂百度"><a href="#2-开始疯狂百度" class="headerlink" title="2. 开始疯狂百度"></a>2. 开始疯狂百度</h2><p>第一下找到这个老哥的，<a href="https://blog.csdn.net/weixin_42917630/article/details/94985802">https://blog.csdn.net/weixin_42917630&#x2F;article&#x2F;details&#x2F;94985802</a>，按照他的操作第一步都没走下去，要安装 <code>XtraBackup</code> ，我没说他写的菜</p><h2 id="3-注意事项（踩的坑）"><a href="#3-注意事项（踩的坑）" class="headerlink" title="3. 注意事项（踩的坑）"></a>3. 注意事项（踩的坑）</h2><p>首先要找一个服务器，线上本地的都行<br>我的环境</p><ul><li>阿里云服务器 1 核 2G 卡死我了…</li><li>MySQL 8.0.16</li></ul><p>其次一定要注意 <strong>版本</strong> ！！！！！！<br>MySQL 8.0 不要找装有 MySQL 5.7 的服务器来恢复<br>MySQL 8.0 也要安装最新版，它不向前兼容<br>光装数据库装了好多遍<br>大致步骤就是，提取 xb ，得出 .qb 结尾的继续解压，然后恢复<br>这里后续登陆的用户也都是之前的被备份的账号密码</p><h2 id="4-安装开源软件-XtraBackup"><a href="#4-安装开源软件-XtraBackup" class="headerlink" title="4. 安装开源软件 XtraBackup"></a>4. 安装开源软件 XtraBackup</h2><p>也要看好版本，2.4 版本支持 MySQL 5.7 但是不支持 MySQL 8.0 .</p><p>因为这里是 MySQL 8.0 版本，所以下载 <a href="https://www.percona.com/doc/percona-xtrabackup/8.0/index.html">Percona XtraBackup 8.0</a></p><p><a href="https://www.percona.com/doc/percona-xtrabackup/8.0/installation.html">安装 Percona XtraBackup 8.0</a></p><p><img src="http://images.zabbix.store/202105281751512021-05-28.png" alt="202105281751512021-05-28"></p><ul><li><ol><li>使用 <code>root</code> 权限安装 <code>Percona</code> 库</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm<br></code></pre></td></tr></table></figure><ul><li>2.开启存储库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">percona-release enable-only tools release<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun ~]<span class="hljs-comment"># percona-release enable-only tools release</span><br>* Disabling all Percona Repositories<br>* Enabling the Percona Tools repository<br>&lt;*&gt; All <span class="hljs-keyword">done</span>!<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>使用 <code>yum</code> 安装 <code>Percona XtraBackup</code></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install percona-xtrabackup-80<br></code></pre></td></tr></table></figure><ul><li><ol start="4"><li>测试输出版本号</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun ~]<span class="hljs-comment"># xtrabackup -version</span><br>xtrabackup: recognized server arguments: --datadir=/data<br>xtrabackup version 8.0.23-16 based on MySQL server 8.0.23 Linux (x86_64) (revision <span class="hljs-built_in">id</span>: 934bc8f)<br></code></pre></td></tr></table></figure><h2 id="安装-qpress"><a href="#安装-qpress" class="headerlink" title="安装 qpress"></a>安装 qpress</h2><ul><li><p>直接使用 <code>yum</code> 安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install qpress <br></code></pre></td></tr></table></figure></li><li><p>使用 <code>tar</code> 安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget http://www.quicklz.com/qpress-11-linux-x64.tar<br>$ tar -xf qpress-11-linux-x64.tar -C /usr/local/bin<br>$ <span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ul><h2 id="解压-xb-文件"><a href="#解压-xb-文件" class="headerlink" title="解压 xb 文件"></a>解压 <code>xb</code> 文件</h2><p>先选择一个目录为数据最终存储目录，这里用的是 <code>/home/mysql/data</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xbstream -x -C /home/mysql/data &lt; ~/xxxx_data_20210528080912_qp.xb<br></code></pre></td></tr></table></figure><p>然后解压出 <code>qpress</code> 二进制文件  </p><blockquote><p>–remove-original 在解压缩时删除原始的压缩文件 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xtrabackup --decompress --remove-original --target-dir=/home/mysql/data<br></code></pre></td></tr></table></figure><p>备份解压出来之后，执行如下命令进行 apply log 操作。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xtrabackup --prepare  --target-dir=/home/mysql/data<br></code></pre></td></tr></table></figure><p>出现 <code>completed OK!</code> 就是可以了，出现异常多百度百度，我这边第一次也遇到了很多奇奇怪怪的错误  </p><h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><p>这里使用的是绿色解压版本 MySQL ，因为这个版本有 <code>bin/mysqld_safe</code>  </p><p>配置文件 <code>/etc/my.cnf</code> ，网上相关博客的配置对我来说都不能用，我放上自己能成功运行的配置文件  </p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs profile">[mysqld]<br>datadir=/home/mysql/data<br>lower_case_table_names=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>给权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R mysql:mysql /home/mysql/data<br></code></pre></td></tr></table></figure><p>运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/home/mysql/data &amp;<br></code></pre></td></tr></table></figure><p>启动成功后，根据原来的账户密码进行登陆即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/database/Elasticsearch%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/21/database/Elasticsearch%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h1><h2 id="1-安装-（windows）"><a href="#1-安装-（windows）" class="headerlink" title="1.安装  （windows）"></a>1.安装  （windows）</h2><ul><li><a href="https://www.elastic.co/cn/start">官网下载地址</a></li></ul><p><img src="http://images.zabbix.store/images/1575990095497-871d39ab-1a49-4d7a-8040-dc45be039bd7.png" alt="image.png"></p><p><img src="http://images.zabbix.store/images/1575990140715-e4a72b69-416c-4693-afec-fbb7f9dedb4a.png" alt="image.png"></p><p><img src="http://images.zabbix.store/images/1575990178196-dd362c60-d954-46af-b8ac-d4e342b98141.png" alt="image.png"></p><p>同理，双击打开即可  </p><h2 id="2-postman测试"><a href="#2-postman测试" class="headerlink" title="2.postman测试"></a>2.postman测试</h2><blockquote><p>这里的** ** 是设置的环境变量，像宏一样  </p></blockquote><p><img src="http://images.zabbix.store/images/1575990364956-1e630750-d3fa-41f0-87b8-7c5647aeabe7.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取所有索引</span><br>&#123;&#123;es&#125;&#125;/_all<br></code></pre></td></tr></table></figure><h3 id="2-2-可导入postman的collection"><a href="#2-2-可导入postman的collection" class="headerlink" title="2.2 可导入postman的collection"></a>2.2 可导入postman的collection</h3><ul><li><a href="https://www.getpostman.com/collections/92765cf35671e9698193">collection—-url</a></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.getpostman.com<span class="hljs-regexp">/collections/</span><span class="hljs-number">92765</span>cf35671e9698193<br></code></pre></td></tr></table></figure><p><img src="http://images.zabbix.store/images/1575990548527-df6b1da0-e544-4c71-8073-3505edd6ae1f.png" alt="image.png"></p><h2 id="3-Kibana基本使用"><a href="#3-Kibana基本使用" class="headerlink" title="3. Kibana基本使用"></a>3. Kibana基本使用</h2><p>打开 <a href="http://localhost:5601/app/kibana#/dev_tools/console?_g=()">Kibana页面</a></p><p>假如我不想要高雅的坤坤，就想要🐔你太美，可以把 <code>should</code> 换成 <code>must</code></p><p><img src="http://images.zabbix.store/images/1575990843947-2dfaadfb-f832-443f-a461-8d7149022432.png" alt="image.png"></p><h2 id="Mac版本后台启动"><a href="#Mac版本后台启动" class="headerlink" title="Mac版本后台启动"></a>Mac版本后台启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/elasticsearch -d<br></code></pre></td></tr></table></figure><p>查询是否启动…..    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef|grep elasticsearch<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E5%A4%9A%E6%80%81/"/>
    <url>/2022/03/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>多态就是指一个类实例的相同方法在不同情形有不同表现形式，在面向对象设计的概念中，对于父类提供的方法调用，子类可以有自己特有的行为。  </p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;move...move...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;跑...跑...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;飞...飞...&quot;</span>);<br>    &#125;<br>&#125;<br>class 源氏 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;爬...爬...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个 <code>Animal</code>  类，然后创建 <code>Dog</code> 、 <code>Brid</code> 、 <code>Fish</code>  类来继承 <code>Animal</code> 类</p><p><img src="http://images.zabbix.store/images/poly.jpg" alt="poly"><br>还记得继承关系可以用 <code>IS-A</code> 来表述吗？我可以说 <code>Dog is a Animal</code>  或 <code>Bird is a Animal</code>  或 <code>Fish is a Animal</code>  这是OK且符合逻辑的。<br>好，那现在我有4只动物，是什么动物不管，我就把它们都当成动物就好。我知道动物里面有一个 <code>move()</code> 的方法，我让每只动物都使用这个 <code>move()</code> 的方法。<br>程序如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>();<br>        a.move();<br>        b.move();<br>        c.move();<br>        d.move();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>变量a</code> 看起来OK，声明是 <code>Animal</code> 且也用 <code>Animal</code> 的 <code>构造函数</code> 去初始化。<br><code>变量b</code> 看起来就怪怪的，用 <code>Dog()</code> 来初始化的话不是应该声明成 <code>Dog</code> 型态吗？是的，那样写也OK，我们知道依据继承关系， <code>Dog is a Animal</code> 所以我这样写也并非违反逻辑。利用 <code>Dog()</code> 构造方法生成的对象，理当拥有 <code>Dog</code> 类定义的所有成员，但不管，现在我们只把这个物件当作Animal来看。<br><code>变数c</code> ，不管你怎么构造你的对象，我都会用 <code>Animal</code> 的角度去看你。<br><code>变数d</code> ：本体是 <code>Fish</code> ，但有人把我当成动物。 (变数 <code>b,c,d</code> 是差不多情况)<br>好，现在我不管它们4个的 <code>本质</code> 是什么，我只知道我把它们都当做 <code>Animal</code>  来看，而我知道 <code>Animal</code>  里面有定义一个方法叫做 <code>move()</code> ，所以把4只 <code>Animal</code> 的 <code>move()</code> 都调用看看。<br>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">move...move...<br>跑...跑...<br>飞...飞...<br>游...游...<br></code></pre></td></tr></table></figure><p>只要可以视为 <code>Animal</code> 的对象，就可以使用这个方法而不会出错。这样的设计方式可以 <strong>降低方法定义对类的依赖</strong> ，使用一个制定好的介面，利用该介面来操作不同的对象，增加代码的复用性，架构设计上也比较好</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>只能向上转型，例如可以从子类转换为父类，因为子类中存在的方法父类中也存在，当然除了 <code>private</code> 修饰的，但是 <code>子类可以扩展</code> 自己的属性与方法，所以不能把父类强转为子类</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> d;  <span class="hljs-comment">// Java帮你作了型态转换，但你看不到，等价于下行</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> (Animal)d;  <span class="hljs-comment">// 也可以自己写</span><br></code></pre></td></tr></table></figure><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">ani</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Dog)ani;  <span class="hljs-comment">// 父类强转为子类</span><br></code></pre></td></tr></table></figure><p>执行结果：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.ClassCastException:<br>Animal cannot be cast to Dog<br></code></pre></td></tr></table></figure><p>tips：编译会过，执行会错，切记！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/17/back-end/middleware/kafka/"/>
    <url>/2022/03/17/back-end/middleware/kafka/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-kafka？"><a href="#什么是-kafka？" class="headerlink" title="什么是 kafka？"></a>什么是 kafka？</h3><p>消息中间件，分布式发布-订阅消息系统，Apache旗下的一部分。</p><p>标签：分布式、可分区、冗余备份的持久性的日志服务，主要用于处理流式数据</p><h3 id="为什么要使用-kafka？"><a href="#为什么要使用-kafka？" class="headerlink" title="为什么要使用 kafka？"></a>为什么要使用 kafka？</h3><p><strong>缓冲和削峰</strong>：上游数据时有突发流量，下游可能扛不住，或者下游没有足够多的机器来保证冗余，kafka在中间可以起到一个缓冲的作用，把消息暂存在kafka中，下游服务就可以按照自己的节奏进行慢慢处理。</p><p><strong>解耦和扩展性</strong>：项目开始的时候，并不能确定具体需求。消息队列可以作为一个接口层，解耦重要的业务流程。只需要遵守约定，针对数据编程即可获取扩展能力。</p><p><strong>冗余</strong>：可以采用一对多的方式，一个生产者发布消息，可以被多个订阅topic的服务消费到，供多个毫无关联的业务使用。</p><p><strong>健壮性</strong>：消息队列可以堆积请求，所以消费端业务即使短时间死掉，也不会影响主要业务的正常进行。</p><p><strong>异步通信</strong>：很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/17/linux/soft/Linux%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2022/03/17/linux/soft/Linux%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-安装-MySQL"><a href="#Linux-安装-MySQL" class="headerlink" title="Linux 安装 MySQL"></a>Linux 安装 MySQL</h1><h2 id="1-服务器环境"><a href="#1-服务器环境" class="headerlink" title="1. 服务器环境"></a>1. 服务器环境</h2><ul><li>CentOS 7.2</li></ul><h2 id="2-移除-mariadb"><a href="#2-移除-mariadb" class="headerlink" title="2. 移除 mariadb"></a><strong>2. 移除 mariadb</strong></h2><p>操作之如果有默认数据库马瑞 DB 前先移除 mariadb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y remove mari*<br><span class="hljs-built_in">rm</span> -rf /var/lib/mysql/*<br></code></pre></td></tr></table></figure><h2 id="3-下载tar包"><a href="#3-下载tar包" class="headerlink" title="3. 下载tar包"></a>3. 下载tar包</h2><p>mysql5.7 的 tar 包：<br>下载地址：<br><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</a></p><h2 id="4-使用-ftp-工具把-tar-包传输到-usr-x2F-local-x2F-目录下"><a href="#4-使用-ftp-工具把-tar-包传输到-usr-x2F-local-x2F-目录下" class="headerlink" title="4. 使用 ftp 工具把 tar 包传输到 usr&#x2F;local&#x2F;目录下"></a>4. 使用 ftp 工具把 tar 包传输到 usr&#x2F;local&#x2F;目录下</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/631242/1590513047406-77fb0fb8-abec-4c09-a8ee-cb1a5136e4c4.jpeg#align=left&display=inline&height=388&margin=%5Bobject%20Object%5D&originHeight=388&originWidth=1188&size=0&status=done&style=none&width=1188"><br>推荐工具 Xftp <a href="http://www.xshellcn.com/xiazai.html">下载地址</a></p><h3 id="4-1解压-tar-包"><a href="#4-1解压-tar-包" class="headerlink" title="4.1解压 tar 包"></a>4.1解压 tar 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="4-2更改文件名称"><a href="#4-2更改文件名称" class="headerlink" title="4.2更改文件名称"></a>4.2更改文件名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> mysql-5.7.28-linux-glibc2.12-x86_64 mysql<br></code></pre></td></tr></table></figure><h2 id="5-创建用户和用户组并赋予权限"><a href="#5-创建用户和用户组并赋予权限" class="headerlink" title="5. 创建用户和用户组并赋予权限"></a>5. 创建用户和用户组并赋予权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">groupadd mysql<br>useradd -r -g mysql mysql<br><span class="hljs-built_in">chown</span> -R mysql:mysql mysql/<br></code></pre></td></tr></table></figure><h2 id="6-安装和初始化数据库"><a href="#6-安装和初始化数据库" class="headerlink" title="6. 安装和初始化数据库"></a>6. 安装和初始化数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mysql<br>./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --lc_messages_dir=/usr/local/mysql/share --lc_messages=en_US<br></code></pre></td></tr></table></figure><p>如果无错误继续, 出现如下错误的<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/631242/1590513047385-9417effb-0870-42ca-b10b-0ddc5e18f2bf.jpeg#align=left&display=inline&height=103&margin=%5Bobject%20Object%5D&originHeight=103&originWidth=1133&size=0&status=done&style=none&width=1133"><br>报错信息：bin&#x2F;mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory<br>解决办法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update<br>yum install -y libaio<br></code></pre></td></tr></table></figure><p>**</p><h2 id="7-获取初始登录密码"><a href="#7-获取初始登录密码" class="headerlink" title="7. 获取初始登录密码"></a>7. 获取初始登录密码</h2><p>执行上一步操作后会在命令行输出 root@localhost: gFamcspKm2+u localhost: 后面的这一串便是你首次登陆 mysql 需要的初始密码<br>如下图：<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/631242/1590513047460-18fe30eb-3520-4457-9830-5fddcbeb1d6c.jpeg#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&originHeight=299&originWidth=1143&size=0&status=done&style=none&width=1143"></p><ol start="8"><li><strong>配置 my.cnf</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br></code></pre></td></tr></table></figure><p>下面的粘贴进去</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[mysqld]<br>character_set_server=utf8<br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br>basedir=<span class="hljs-regexp">/usr/</span>local/mysql<br>datadir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>data<br>socket=<span class="hljs-regexp">/tmp/my</span>sql.sock<br>log-error=<span class="hljs-regexp">/var/</span>log/mysqld.log<br>pid-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/mysqld/my</span>sqld.pid<br></code></pre></td></tr></table></figure><h2 id="8-启动服务"><a href="#8-启动服务" class="headerlink" title="8. 启动服务"></a>8. 启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/mysql/bin/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysqld_safe --user=mysql &amp;<br></code></pre></td></tr></table></figure><h2 id="9-设置开机启动"><a href="#9-设置开机启动" class="headerlink" title="9. 设置开机启动"></a>9. 设置开机启动</h2><p>进入 &#x2F;usr&#x2F;local&#x2F;mysql 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/mysql/support-files<br><span class="hljs-built_in">cp</span> mysql.server /etc/init.d/mysql<br></code></pre></td></tr></table></figure><h2 id="10-使用-service-mysqld-命令启动-x2F-停止服务"><a href="#10-使用-service-mysqld-命令启动-x2F-停止服务" class="headerlink" title="10. 使用 service mysqld 命令启动&#x2F;停止服务"></a>10. 使用 service mysqld 命令启动&#x2F;停止服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service mysql start/stop/restart<br></code></pre></td></tr></table></figure><p>实在不行，用这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./support-files/mysql.server start<br></code></pre></td></tr></table></figure><blockquote><p>注意，5.7 版本往上修改密码：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p你的密码<br>use mysql<br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span><br></code></pre></td></tr></table></figure><p>全局使用 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /usr/local/mysql-5.7.22/bin/mysql /usr/bin<br></code></pre></td></tr></table></figure><p>新建用户远程连接 mysql 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">grant all on *.* to admin@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span> with grant option;<br>flush privileges;<br>允许任何ip地址(%表示允许任何ip地址)的电脑用admin帐户和密码(123456)来访问这个mysql server。<br>注意admin账户不一定要存在。<br></code></pre></td></tr></table></figure><p>支持 root 用户允许远程连接 mysql 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grant all privileges on *.* to <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span> with grant option;<br>flush privileges;<br></code></pre></td></tr></table></figure><h2 id="11-异常"><a href="#11-异常" class="headerlink" title="11. 异常"></a>11. 异常</h2><h3 id="11-1解决“ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-x2F-tmp-x2F-mysql-sock’-111-”"><a href="#11-1解决“ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-x2F-tmp-x2F-mysql-sock’-111-”" class="headerlink" title="11.1解决“ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘&#x2F;tmp&#x2F;mysql.sock’ (111)”"></a>11.1解决“ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘&#x2F;tmp&#x2F;mysql.sock’ (111)”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /tmp/mysql.sock<br><span class="hljs-built_in">cd</span> /usr/local/mysql<br>sudo ./support-files/mysql.server start<br><span class="hljs-built_in">mkdir</span> /var/run/mysqld/<br><span class="hljs-built_in">chown</span> -R mysql.mysql /var/run/mysqld/<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> mysql&gt; use mysql<br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;123456&#x27;</span>);<br></code></pre></td></tr></table></figure><p>Query OK, 0 rows affected, 1 warning (0.00 sec)</p><ul><li><input checked="" disabled="" type="checkbox"> 启动异常[“ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘&#x2F;tmp&#x2F;mysql.sock’ (2)”]</li></ul><blockquote><p>解决办法：mysql 服务未启动, 启动就好了.</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">user</span>() identified <span class="hljs-keyword">by</span> &quot;123456&quot;;<br></code></pre></td></tr></table></figure><p>-[x]服务器重启后连接 mysql 出现 ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘&#x2F;data&#x2F;mydata&#x2F;mysql.sock’ (111)类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>character_set_server=utf8<br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br>basedir=/usr/local/mysql-5.7.22<br>datadir=/usr/local/mysql-5.7.22/data<br>socket=/tmp/mysql.sock<br>log-error=/var/log/mysqld.log<br>pid-file=/data/mydata/mysqld.pid<br>bind-address=0.0.0.0<br>socket = /data/mydata/mysql.sock<br>[client]<br>socket = /data/mydata/mysql.sock<br></code></pre></td></tr></table></figure><p>把 mysqld.pid 的文件换个其他文件夹就行了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/06/back-end/plugins/git/"/>
    <url>/2022/03/06/back-end/plugins/git/</url>
    
    <content type="html"><![CDATA[<h3 id="更新全局用户名以及邮箱"><a href="#更新全局用户名以及邮箱" class="headerlink" title="更新全局用户名以及邮箱"></a>更新全局用户名以及邮箱</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config  --global user.name 你的目标用户名<br>git config  --global user.email 你的目标邮箱名<br></code></pre></td></tr></table></figure><h3 id="Git-如何忽略已经提交的文件"><a href="#Git-如何忽略已经提交的文件" class="headerlink" title="Git 如何忽略已经提交的文件"></a>Git 如何忽略已经提交的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看 git 暂存文件状态</span><br>git status <br>git <span class="hljs-built_in">rm</span> -f [文件名]<br>git commit -a -m <span class="hljs-string">&quot;:fire:删除不需要的文件&quot;</span><br>git push<br><span class="hljs-comment"># 找到 IDE 工具恢复当前文件</span><br><span class="hljs-comment"># 停止追踪此文件或目录</span><br>git <span class="hljs-built_in">rm</span> --cached [文件或目录名]<br><span class="hljs-comment"># 在.gitignore 中添加过滤</span><br><span class="hljs-comment"># 然后提交</span><br></code></pre></td></tr></table></figure><h3 id="MacOS-禁用-osxkeychain"><a href="#MacOS-禁用-osxkeychain" class="headerlink" title="MacOS 禁用 osxkeychain"></a>MacOS 禁用 osxkeychain</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --get-all --show-origin credential.helper<br></code></pre></td></tr></table></figure><p>输出：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:/Library/Developer/CommandLineTools/usr/share/git-core/gitconfig   osxkeychain<br></code></pre></td></tr></table></figure><p><code>sudo</code>编辑：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /Library/Developer/CommandLineTools/usr/share/git-core/gitconfig<br></code></pre></td></tr></table></figure><p>并注释掉这一行 <code>credential.helper=osxkeychain</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/01/29/linux/soft/Linux%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/01/29/linux/soft/Linux%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><p>Redis 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。<br>它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止 Redis 支持的键值数据类型如下：</p><ul><li>字符串(String)</li><li>列表（lists）</li><li>集合（sets）</li><li>有序集合（sorts sets）</li><li>哈希表（hashs）</li></ul><h2 id="2-Redis-的应用场景"><a href="#2-Redis-的应用场景" class="headerlink" title="2.Redis 的应用场景"></a>2.Redis 的应用场景</h2><p>缓存（数据查询、短连接、新闻内容、商品内容等。</p><ul><li>分布式集群架构中的 session 分离。</li><li>聊天室的在线好友列表。</li><li>任务队列。（秒杀、抢购、12306 等等）</li><li>应用排行榜。</li><li>网站访问统计。</li><li>数据过期处理（可以精确到毫秒）</li></ul><h2 id="3-安装-Redis"><a href="#3-安装-Redis" class="headerlink" title="3.安装 Redis"></a>3.安装 Redis</h2><p>下面介绍在 Linux 环境下，Redis 的安装与部署 使用 Redis-3.0 稳定版,因为 Redis 从 3.0 开始增加了集群功能。<br>可以通过官网下载 <a href="http://download.redis.io/releases/Redis-4.0.11.tar.gz">http://download.Redis.io/releases/</a><br>或者使用 linux wget 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-6.2.6.tar.gz<br></code></pre></td></tr></table></figure><p>将 redis-6.2.6.tar.gz 移动到&#x2F;usr&#x2F;local 下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> redis-6.2.6.tar.gz /usr/local<br></code></pre></td></tr></table></figure><p>解压二进制包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf redis-6.2.6.tar.gz<br></code></pre></td></tr></table></figure><p>进入解压后的目录进行编译，注意：PREFIX需要指定的文件夹需要是空的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> redis-6.2.6<br>make PREFIX=/usr/local/redis install<br></code></pre></td></tr></table></figure><p>进入安装目录 bin 下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>bin<br></code></pre></td></tr></table></figure><p>目录结构是这样的<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/631242/1590513937376-555f9c71-ca3d-4905-9643-4ff56403d89d.jpeg#height=181&id=Lyw3I&originHeight=181&originWidth=780&originalType=binary&ratio=1&size=0&status=done&style=none&width=780"></p><table><thead><tr><th>redis-benchmark</th><th>redis 性能测试工具</th></tr></thead><tbody><tr><td>redis-check-aof</td><td>AOF 文件修复工具</td></tr><tr><td>redis-check-rdb</td><td>RDB 文件修复工具</td></tr><tr><td>redis.conf</td><td>redis 配置文件</td></tr><tr><td>redis-sentinal</td><td>redis 集群管理工具</td></tr><tr><td>redis-server</td><td>redis 服务进程</td></tr></tbody></table><h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/redis/conf<br><span class="hljs-built_in">cp</span> /usr/local/redis-6.2.6/redis.conf  /usr/local/redis/conf<br><span class="hljs-built_in">cd</span> /usr/local/redis/conf<br>vim redis.conf<br></code></pre></td></tr></table></figure><p>给redis加请求密码,(输入 <code>/requirepass</code> 搜索)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 去掉开头#号 </span><br>requirepass 你的密码<br></code></pre></td></tr></table></figure><p>设置有几个储存库，搜索  <code>/databases</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">databases 3<br></code></pre></td></tr></table></figure><p>设置可远程访问，搜索  <code>/bind</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 0.0.0.0<br></code></pre></td></tr></table></figure><p>设置后台启动，搜索 <code>/daemonize</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h2 id="4-启动与停止-Redis"><a href="#4-启动与停止-Redis" class="headerlink" title="4.启动与停止 Redis"></a>4.启动与停止 Redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/redis/bin/redis-server /usr/local/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><h3 id="4-1-连接-Redis"><a href="#4-1-连接-Redis" class="headerlink" title="4.1 连接 Redis"></a>4.1 连接 Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-cli -p 6379 -a 密码<br></code></pre></td></tr></table></figure><h3 id="4-2-停止-Redis"><a href="#4-2-停止-Redis" class="headerlink" title="4.2 停止 Redis"></a>4.2 停止 Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/redis/bin/redis-cli -a 密码 shutdown<br></code></pre></td></tr></table></figure><h3 id="4-3-让-Redis-开机自启"><a href="#4-3-让-Redis-开机自启" class="headerlink" title="4.3 让 Redis 开机自启"></a>4.3 让 Redis 开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/rc.local<br></code></pre></td></tr></table></figure><p>把如下内容添加进去  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/redis/bin/redis-server /usr/local/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><h2 id="5-异常处理"><a href="#5-异常处理" class="headerlink" title="5.异常处理"></a>5.异常处理</h2><h3 id="5-1-redis-cli-shutdown-出现-error-NOAUTH-Authentication-required"><a href="#5-1-redis-cli-shutdown-出现-error-NOAUTH-Authentication-required" class="headerlink" title="5.1 redis-cli shutdown 出现 (error) NOAUTH Authentication required"></a>5.1 redis-cli shutdown 出现 (error) NOAUTH Authentication required</h3><p>Redis 设置密码登录后，想关闭 Redis 服务器，需要</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Redis-cli -a 密码 shutdown<br></code></pre></td></tr></table></figure><h3 id="5-2-Redis-编译报致命错误：jemalloc-x2F-jemalloc-h：没有那个文件或目录"><a href="#5-2-Redis-编译报致命错误：jemalloc-x2F-jemalloc-h：没有那个文件或目录" class="headerlink" title="5.2 Redis 编译报致命错误：jemalloc&#x2F;jemalloc.h：没有那个文件或目录"></a>5.2 Redis 编译报致命错误：jemalloc&#x2F;jemalloc.h：没有那个文件或目录</h3><p>分配器 allocator， 如果有 MALLOC 这个 环境变量， 会有用这个环境变量的 去建立 Redis。<br>而且 libc 并不是默认的 分配器， 默认的是 jemalloc, 因为 jemalloc 被证明 有更少的 fragmentation problems 比 libc。<br>但是如果你又没有 jemalloc 而只有 libc 当然 make 出错。 所以加这么一个参数,运行如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">make <span class="hljs-attribute">MALLOC</span>=libc<br></code></pre></td></tr></table></figure><h4 id="5-3-如果此时出现-gcc-…Not-found"><a href="#5-3-如果此时出现-gcc-…Not-found" class="headerlink" title="5.3 如果此时出现 gcc …Not found"></a>5.3 如果此时出现 gcc …Not found</h4><p>需要安装 gcc</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">Ubuntu<br>      sudo apt-get <span class="hljs-keyword">install</span> gcc<br>Centos<br>      yum <span class="hljs-keyword">install</span> update<br>      yum <span class="hljs-keyword">install</span> gcc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/26/software-install/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <url>/2021/08/26/software-install/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><h3 id="1-修复-DLL-丢失"><a href="#1-修复-DLL-丢失" class="headerlink" title="1. 修复 DLL 丢失"></a>1. 修复 DLL 丢失</h3><p>链接：<a href="https://pan.baidu.com/s/1xI2f6bJXpV-egejzlq6wtA">https://pan.baidu.com/s/1xI2f6bJXpV-egejzlq6wtA</a>  </p><p>提取码： <code>java</code></p><p>界面如下：  </p><p><img src="http://images.zabbix.store/202105310949122021-05-31.png" alt="202105310949122021-05-31"></p><h3 id="2-windows-扫描与查杀端口"><a href="#2-windows-扫描与查杀端口" class="headerlink" title="2. windows 扫描与查杀端口"></a>2. windows 扫描与查杀端口</h3><p>链接：<a href="https://pan.baidu.com/s/1Ozh-gUZWptD7vcTUNzMMMQ">https://pan.baidu.com/s/1Ozh-gUZWptD7vcTUNzMMMQ</a><br>提取码： <code>java</code><br>界面如下：<br><img src="http://images.zabbix.store/202105310953292021-05-31.png" alt="202105310953292021-05-31"></p><h3 id="3-Redis-可视化工具"><a href="#3-Redis-可视化工具" class="headerlink" title="3.Redis 可视化工具"></a>3.Redis 可视化工具</h3><ul><li>Windows<br><a href="https://javapro.lanzoui.com/iNFkPdmrkjg">redis-desktop-manager-0.8.8.384-password-123.rar</a><br>界面如下：<br><img src="http://images.zabbix.store/202105310959072021-05-31.png" alt="202105310959072021-05-31">  </li><li>MacOS<br><a href="https://javapro.lanzoui.com/i7wvnbe">rdm2019.4.0.dmg.zip</a></li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>软件收集自互联网，如有侵权，请联系 <code>cuifuan@aliyun.com</code> 删除，如果百度云链失效，同联系上述邮箱。  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/23/linux/docker-compose%E9%83%A8%E7%BD%B2Nacos%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/08/23/linux/docker-compose%E9%83%A8%E7%BD%B2Nacos%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-compose部署Nacos到服务器"><a href="#docker-compose部署Nacos到服务器" class="headerlink" title="docker-compose部署Nacos到服务器"></a>docker-compose部署Nacos到服务器</h1><h2 id="Nacos介绍"><a href="#Nacos介绍" class="headerlink" title="Nacos介绍"></a>Nacos介绍</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。相当于 Spring Cloud Eureka 与 Spring Cloud Config 的作用，不过一些细节还是不同，但能达到的效果还是存在的。</p><h2 id="持久化数据库"><a href="#持久化数据库" class="headerlink" title="持久化数据库"></a>持久化数据库</h2><p>创建数据库<code>nacos_config</code>,然后执行下列语句:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br> * Copyright 1999-2018 Alibaba Group Holding Ltd.<br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      http://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info   */<br>/******************************************/<br>CREATE TABLE `config_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(255) DEFAULT NULL,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `c_desc` varchar(256) DEFAULT NULL,<br>  `c_use` varchar(64) DEFAULT NULL,<br>  `effect` varchar(64) DEFAULT NULL,<br>  `type` varchar(64) DEFAULT NULL,<br>  `c_schema` text,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_aggr   */<br>/******************************************/<br>CREATE TABLE `config_info_aggr` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(255) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,<br>  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_beta   */<br>/******************************************/<br>CREATE TABLE `config_info_beta` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_tag   */<br>/******************************************/<br>CREATE TABLE `config_info_tag` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_tags_relation   */<br>/******************************************/<br>CREATE TABLE `config_tags_relation` (<br>  `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;,<br>  `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;,<br>  `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `nid` bigint(20) NOT NULL AUTO_INCREMENT,<br>  PRIMARY KEY (`nid`),<br>  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = group_capacity   */<br>/******************************************/<br>CREATE TABLE `group_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数，，0表示使用默认值&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_group_id` (`group_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = his_config_info   */<br>/******************************************/<br>CREATE TABLE `his_config_info` (<br>  `id` bigint(64) unsigned NOT NULL,<br>  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,<br>  `data_id` varchar(255) NOT NULL,<br>  `group_id` varchar(128) NOT NULL,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL,<br>  `md5` varchar(32) DEFAULT NULL,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `src_user` text,<br>  `src_ip` varchar(50) DEFAULT NULL,<br>  `op_type` char(10) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  PRIMARY KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = tenant_capacity   */<br>/******************************************/<br>CREATE TABLE `tenant_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;<br><br><br>CREATE TABLE `tenant_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;,<br>  `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,<br>  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,<br>  `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;,<br>  `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;<br><br>CREATE TABLE `users` (<br>`username` varchar(50) NOT NULL PRIMARY KEY,<br>`password` varchar(500) NOT NULL,<br>`enabled` boolean NOT NULL<br>);<br><br>CREATE TABLE `roles` (<br>`username` varchar(50) NOT NULL,<br>`role` varchar(50) NOT NULL,<br>UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE<br>);<br><br>CREATE TABLE `permissions` (<br>    `role` varchar(50) NOT NULL,<br>    `resource` varchar(255) NOT NULL,<br>    `action` varchar(8) NOT NULL,<br>    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE<br>);<br><br>INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);<br><br>INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="docker-compose配置"><a href="#docker-compose配置" class="headerlink" title="docker-compose配置"></a>docker-compose配置</h2><p>挂载目录：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── docker-compose.yml<br>├── nacos<br>│   ├── conf<br>│   │   ├── application.properties<br>│   │   └── init<br>│   │       └── custom.properties<br>│   ├── plugins<br>│   │   └── mysql<br>│   │       └── mysql-connector-java-8.0.19.jar<br>│   └── prometheus<br>│       ├── prometheus-cluster.yaml<br>│       └── prometheus-standalone.yaml<br></code></pre></td></tr></table></figure><p><strong>application.properties</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">nacos:</span><br>   <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:1.2.1</span><br>   <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos</span><br>   <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>   <span class="hljs-attr">environment:</span><br>   <span class="hljs-attr">PREFER_HOST_MODE:</span> <span class="hljs-string">hostname</span> <span class="hljs-comment">#如果支持主机名可以使用hostname,否则使用ip，默认也是ip</span><br>   <span class="hljs-attr">SPRING_DATASOURCE_PLATFORM:</span> <span class="hljs-string">mysql</span> <span class="hljs-comment">#数据源平台 仅支持mysql或不保存empty</span><br>   <span class="hljs-attr">MODE:</span> <span class="hljs-string">standalone</span> <span class="hljs-comment"># 单机启动</span><br>   <span class="hljs-attr">MYSQL_SERVICE_HOST:</span> <span class="hljs-string">****.sql.tencentcdb.com</span> <span class="hljs-comment"># 我这里是TX云数据库的地址</span><br>   <span class="hljs-attr">MYSQL_SERVICE_DB_NAME:</span> <span class="hljs-string">nacos_config</span> <span class="hljs-comment"># 数据库名</span><br>   <span class="hljs-attr">MYSQL_SERVICE_PORT:</span> <span class="hljs-number">3306</span> <span class="hljs-comment"># 数据库端口</span><br>   <span class="hljs-attr">MYSQL_SERVICE_USER:</span> <span class="hljs-string">root</span> <span class="hljs-comment"># 数据库用户名</span><br>   <span class="hljs-attr">MYSQL_SERVICE_PASSWORD:</span> <span class="hljs-number">123456</span> <span class="hljs-comment"># 数据库密码</span><br>   <span class="hljs-attr">NACOS_APPLICATION_PORT:</span> <span class="hljs-number">8848</span> <span class="hljs-comment"># Nacos启动端口</span><br>   <span class="hljs-attr">JVM_XMS:</span> <span class="hljs-string">512m</span><br>   <span class="hljs-attr">JVM_MMS:</span> <span class="hljs-string">320m</span><br>   <span class="hljs-attr">volumes:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">./nacos/standalone-logs/:/home/nacos/logs</span> <span class="hljs-comment"># 日志目录</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">./nacos/plugins/:/home/nacos/plugins</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">./nacos/conf/application.properties:/home/nacos/conf/application.properties</span><br>   <span class="hljs-attr">ports:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8848:8848&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9848:9848&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9555:9555&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/software-install/nginx/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AENginx/"/>
    <url>/2021/08/18/software-install/nginx/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AENginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-安装与配置-Nginx"><a href="#Linux-安装与配置-Nginx" class="headerlink" title="Linux 安装与配置 Nginx"></a>Linux 安装与配置 Nginx</h1><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><h2 id="下载并解压安装包"><a href="#下载并解压安装包" class="headerlink" title="下载并解压安装包"></a>下载并解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local<br>mkdir nginx<br>cd nginx<br>wget http://nginx.org/download/nginx-1.19.7.tar.gz<br>tar -zxvf nginx-1.19.7.tar.gz<br></code></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun nginx]<span class="hljs-comment"># cd nginx-1.19.7/</span><br>[root@aliyun nginx-1.19.7]<span class="hljs-comment"># ./configure</span><br>[root@aliyun nginx-1.19.7]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><h2 id="启动等命令"><a href="#启动等命令" class="headerlink" title="启动等命令"></a>启动等命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  <span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br>$ ./nginx <span class="hljs-comment"># 启动</span><br>$ ./nginx -s stop <span class="hljs-comment"># 关闭</span><br>$ ./nginx -s reload <span class="hljs-comment"># 重启</span><br></code></pre></td></tr></table></figure><h2 id="Nginx-命令参数"><a href="#Nginx-命令参数" class="headerlink" title="Nginx 命令参数"></a>Nginx 命令参数</h2><p>Nginx 的参数包括：可以这样使用 <code>/usr/local/nginx/sbin/nginx</code>  -参数</p><table><thead><tr><th><strong>-c <path_to_config></strong></th><th>使用指定的配置文件而不是 conf 目录下的 nginx.conf</th></tr></thead><tbody><tr><td><strong>-t</strong></td><td>测试配置文件是否正确，在运行时需要重新加载配置的时候，此命令非常重要，用来检测所修改的配置文件是否有语法错误</td></tr><tr><td><strong>-v</strong></td><td>显示 nginx 版本号</td></tr><tr><td><strong>-V</strong></td><td>显示 nginx 的版本号以及编译环境信息以及编译时的参数</td></tr></tbody></table><p>例如，校验 nginx 文件的命令，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p>返回下述代表正确，否则会显示多少行出错，更改即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@izbp10n2a7lzpams04dafvz nginx]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="hljs-built_in">test</span> is successful<br></code></pre></td></tr></table></figure><h2 id="配置-SSL"><a href="#配置-SSL" class="headerlink" title="配置 SSL"></a>配置 SSL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">listen 80;<br>server_name api.zabbix.store; <span class="hljs-comment">#需要将yourdomain.com替换成证书绑定的域名。</span><br>rewrite ^(.*)$ https://$host<span class="hljs-variable">$1</span>; <span class="hljs-comment">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span><br>location / &#123;<br>    index index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#以下属性中，以ssl开头的属性表示与证书配置有关。</span><br>server &#123;<br>    listen 443 ssl;<br>    <span class="hljs-comment">#配置HTTPS的默认访问端口为443。</span><br>    <span class="hljs-comment">#如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span><br>    <span class="hljs-comment">#如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</span><br>    server_name api.zabbix.store; <span class="hljs-comment">#需要将yourdomain.com替换成证书绑定的域名。</span><br>    root html;<br>    index index.html index.htm;<br>    ssl_certificate ../api.zabbix.store.pem; <span class="hljs-comment">#需要将cert-file-name.pem替换成已上传的证书文件的名称。</span><br>    ssl_certificate_key ../api.zabbix.store.key; <span class="hljs-comment">#需要将cert-file-name.key替换成已上传的证书密钥文件的名称。</span><br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    <span class="hljs-comment">#表示使用的加密套件的类型。</span><br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="hljs-comment">#表示使用的TLS协议的类型。</span><br>    ssl_prefer_server_ciphers on;<br>    location / &#123;<br>        root html; <span class="hljs-comment">#站点目录。</span><br>        index index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常记录"><a href="#异常记录" class="headerlink" title="异常记录"></a>异常记录</h2><h3 id="1-the-“ssl”-parameter-requires-ngx-http-ssl-module"><a href="#1-the-“ssl”-parameter-requires-ngx-http-ssl-module" class="headerlink" title="1. the “ssl” parameter requires ngx_http_ssl_module"></a>1. the “ssl” parameter requires ngx_http_ssl_module</h3><p>异常详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx: [emerg] the <span class="hljs-string">&quot;ssl&quot;</span> parameter requires ngx_http_ssl_module <span class="hljs-keyword">in</span> /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/local/nginx/nginx-1.19.7/<br>$ ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<br>$ <span class="hljs-built_in">cp</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak<br>$ make<br>$ <span class="hljs-built_in">cp</span> ./objs/nginx /usr/local/nginx/sbin/<br></code></pre></td></tr></table></figure><p>然后把 <code>nginx.bak</code> 恢复后重启就好</p><h3 id="2-c-compiler-cc-is-not-found"><a href="#2-c-compiler-cc-is-not-found" class="headerlink" title="2.c compiler cc is not found"></a>2.c compiler cc is not found</h3><p>缺少 <code>gcc-c++</code> 的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc-c++<br></code></pre></td></tr></table></figure><h2 id="http-重定向到-https"><a href="#http-重定向到-https" class="headerlink" title="http 重定向到 https"></a>http 重定向到 https</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>  listen  80;<br>  server_name    domain.com;<br>  <span class="hljs-built_in">return</span>  301 https://$server_name<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br>server &#123;<br>  listen  443 ssl;<br>  server_name    domain.com;<br><br>  [....]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/front-end/others/front-end-essay/"/>
    <url>/2021/08/18/front-end/others/front-end-essay/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​其实我是一个纯血 Java 开发，强行被拽上前端的车。为什么呢？因为老板说不管前端、还是中端亦或是后端，都可以学。就像你说你学软件的，我看你修起来公司的电脑也是蛮六六的。这里建议大家在公司不要说自己会修电脑或是装系统，不然后面有这些事情就想起你来了。不过，前端学起来蛮有意思的，就是更新的太快了。  </p><h2 id="新手村"><a href="#新手村" class="headerlink" title="新手村"></a>新手村</h2><p>​当年在创业型公司，要前后端都着手去做。那时候的前端还是 jsp，一通声明 <code>JQuery</code>、<code>Bootstrap</code> 等，就开始写了。写完好大一堆，甚至里面还放一些 Java 代码，这个是支持的。这些代码后面再也不想去看了。<br>​然后期间写了很长一段时间，基本上页面的元素都是通过 <code>document</code> 去操作。写了一年多以后，知道了一个东西叫做 <code>AngularJs</code>，可以双向绑定。<br>​很开心了，因为 <code>jsp</code> 那个东西只能获取键盘上输入了什么然后拼接进行赋值。  </p><p>​然后在这个前端知识海洋里一直狗刨式游啊游，开始去学一些骚东西。组件像幻灯片一样的特效飞来飞去，图片轮播定时器等，现在基本忘完。所以现在的封装好的框架，用起来很机械式的操作，不知道会不会以后把程序员变成简单的配置工人。</p><h2 id="稍微入门"><a href="#稍微入门" class="headerlink" title="稍微入门"></a>稍微入门</h2><p>​再后来，我就开始学习 <code>Vue</code> 了。跟着教程视频去看了 <code>Vue2.x</code> 版本的，学习以后就开始用。基本上也写完整个模块。现在也是忘个七七八八。依稀记得<code>created</code>、<code>mounted</code>、<code>watch</code>等。没有系统的去学习前端是因为，项目紧，任务重。不得不学一点东西，能看懂这些组件是干嘛的，就用上开始往代码里灌屎了。  </p><p>​截止目前，2021 年 8 月 15 日，一直在用 <code>Vue3.x</code> 的版本，也用上了<code>Typescript</code>。现在对待学习很浮躁，学一会总想打开 QQ 或者微信水一会，找人唠一会。这也直接导致，我又一次没有系统的去学习前端的知识。但是我个人的建议是，去看看企业招聘前端需要的技能点去学习，而不是去看一下大佬发的学习路线。 </p><p>​大佬们发的学习路线基本上都是从 <code>JQuery</code> 开始的，你时间不够的。有点基础还是建议拿项目直接上手撸，例如撸一个增删改查带业务的软件，用上现成的框架。  </p><p>​现有框架：</p><ul><li><a href="https://2x.antdv.com/docs/vue/introduce-cn">Ant Design of Vue</a>  </li><li><a href="https://element-plus.gitee.io/#/zh-CN/guide/design">ElementPlus</a></li></ul><p>现有框架在 <code>GitHub</code> 上开源的模板：  </p><ul><li><p><a href="https://github.com/hsiangleev/element-plus-admin"> element-plus-admin</a></p></li><li><p><a href="https://github.com/buqiyuan/vue3-antd-admin">vue3-antd-admin</a></p></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8be0e12589c4a4b8fcd53f0531df9b7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>类似这种开源项目模板还有很多，直接在 Github 的搜索中输入你想用的前端框架就能搜索到  </p><h2 id="目前在用的模板"><a href="#目前在用的模板" class="headerlink" title="目前在用的模板"></a>目前在用的模板</h2><p><a href="https://github.com/anncwb/vue-vben-admin">vue-vben-admin</a></p><p>示例图片：  </p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7e4a435e6347ff86a0d6d01e317ac6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>比着照葫芦画瓢基本也写完一个系统，如下：  </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/a4ff4c4f6ee642e28fd493489fe175c0.png"></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d20acc2f633547aba224480087b4cf5c.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建议直接上手撸项目</li><li>遇到组件或者模块不会的，百度或者 <code>Google</code> 下。简单学一下组件，不要浪费太多时间。组件之间关联很多，简单看一下就好，还是不要浪费太多时间。因为我们能高度集中精力学习的时间太少了。</li><li>我没有去系统学习过，因此在系统学习的道路上，没有很好的建议。系统学习的时候，一定要打好笔记，因为真的真的太容易忘了。你这周学完了 <code>promise</code>，下周学完 <code>emit</code>，下下周再学其他的而不复习，等于没学。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/front-end/plugins/moment/"/>
    <url>/2021/08/18/front-end/plugins/moment/</url>
    
    <content type="html"><![CDATA[<h1 id="moment-常用的操作"><a href="#moment-常用的操作" class="headerlink" title="moment 常用的操作"></a>moment 常用的操作</h1><p><strong>1. 时间戳转为时间</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timestampX = <span class="hljs-number">1780448977000</span>;<br><span class="hljs-title function_">moment</span>(timestampX).(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>); <span class="hljs-comment">// 2026-06-03</span><br></code></pre></td></tr></table></figure><p><strong>2. 时间转为时间戳</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">valueOf</span>(); <span class="hljs-comment">// 1626317159000</span><br></code></pre></td></tr></table></figure><h2 id="时间与时间戳互转"><a href="#时间与时间戳互转" class="headerlink" title="时间与时间戳互转"></a>时间与时间戳互转</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">时间：<span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// Tue Aug 28 2018 09:16:06 GMT+0800 (中国标准时间)</span><br><br>时间戳：<span class="hljs-keyword">var</span> timestamp = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(time); <span class="hljs-comment">// 1535419062000 （Date.parse() 默认不取毫秒，即后三位毫秒为0）</span><br><br>获取时间戳：<span class="hljs-title function_">moment</span>(time).<span class="hljs-title function_">valueOf</span>(); <span class="hljs-comment">// 1535419062126</span><br><br>获取时间：<span class="hljs-title function_">moment</span>(timestamp).<span class="hljs-title function_">format</span>(); <span class="hljs-comment">// 2018-08-28T09:17:42+08:00</span><br></code></pre></td></tr></table></figure><h2 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h2><p>添加天数  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;days&#x27;</span>);<br><span class="hljs-comment">// 或者简写</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>类型列表</p><ul><li>years（y）：年</li><li>quarters（Q）：季度</li><li>months（M）：月</li><li>weeks（w）：周</li><li>days（d）：日</li><li>hours（h）：时</li><li>minutes（m）：分</li><li>seconds（s）：秒</li><li>milliseconds（ms）：毫秒</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/Java20%E4%B8%AA%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/08/18/back-end/java-base/Java20%E4%B8%AA%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>用分隔符号来拼接数组或者集合.<br>使用<code>StringJoiner</code>,示例代码如下  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numList = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">111</span>,<span class="hljs-number">23</span>);<br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">joiner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">for</span> (Integer num : numList) &#123;<br>    joiner.add(String.valueOf(num));<br>&#125;<br>System.out.println(joiner);<br></code></pre></td></tr></table></figure><p>代码输出结果:  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">111</span>,<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h3 id="有序的-JSONObject"><a href="#有序的-JSONObject" class="headerlink" title="有序的 JSONObject"></a>有序的 JSONObject</h3><p>由于 com.alibaba.fastjson.JSONObject 默认是由hashMap组成的，所以内容存放的顺序并不是有序的。</p><p>实现有序的话需要使用LinkedHashMap的方式，在新建 JSON 对象的时候要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JSONObject</span> <span class="hljs-variable">resJson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;String, Object&gt;());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/StringBuilder-StringBuffer/"/>
    <url>/2021/08/18/back-end/java-base/StringBuilder-StringBuffer/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-中-String-与-StringBuffer-和-StringBuilder-的区别"><a href="#Java-中-String-与-StringBuffer-和-StringBuilder-的区别" class="headerlink" title="Java 中 String 与 StringBuffer 和 StringBuilder 的区别"></a>Java 中 String 与 StringBuffer 和 StringBuilder 的区别</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>String 是 Java 中很常用的类之一，同时，字符串是 Java 面试中最重要的话题之一。  </p><p>StringBuffer 和 StringBuilder 类提供了操作字符串的方法。  </p><p>我们将研究 StringBuffer 和 StringBuilder 之间的区别。  </p><p>StringBuffer 与 StringBuilder 的区别是 Java 中很常见的面试题。</p><p>在控制台上打印程序的内容，可以使用 String。此博客介绍 String 类的主要功能，然后我们将比较 StringBuffer 和 StringBuilder 类。  </p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>注意一个常见的错误，不要记错了。因为 String 是 final 修饰的，无法被继承。所以 String 不是 Java 的基本数据类型。<br>字符串在 Java 中是不可变的，因此适合在多线程环境下使用。<br>当我们使用双引号创建一个字符串时，如下，JVM 首先在字符串池中寻找具有相同值的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果找到了，它将返回字符串池中的字符串对象的引用。否则，它会在字符串池中创建字符串对象并返回引用。JVM 通过在不同的线程中使用相同的字符串，节省了大量的内存。  </p><p>如果使用 new 运算符创建字符串，则会在堆中创建它。</p><p>运算符 <code>+</code> 是为 String 重载的，我们可以用它来串联两个字符串。尽管在内部它使用 StringBuilder 来执行这个动作。  </p><p>两个字符串只有在它们具有相同字符串的时候才相等，equals() 方法区分大小写。如果您正在寻找不区分大小写的检查，您应该使用 equalsIgnoreCase()  方法。  </p><h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><p>由于 String 在 Java 中是不可变的，因此每当我们执行字符串拼接操作时，它都会生成一个新的 String 并丢弃旧的 String 以进行垃圾收集。<br>这些重复的操作会在堆中产生大量垃圾冗余。所以 Java 提供了 StringBuffer 和 StringBuilder 类，应该用于字符串操作。<br>StringBuffer 和 StringBuilder 是 Java 中的可变对象。  </p><p>它们为字符串操作提供了 <code>append</code>、<code>insert</code>、<code>delete</code> 和 <code>substring</code> 方法。  </p><table><thead><tr><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>线程安全</td><td>非线程安全</td></tr><tr><td>同步</td><td>非同步</td></tr><tr><td>始于 Java 1.0</td><td>始于 Java 1.5</td></tr><tr><td>慢</td><td>快</td></tr></tbody></table><p>在 Java 1.4 之前，StringBuffer 是字符串操作的唯一选择。但是，它的一个缺点是所有公共方法都是同步的。 StringBuffer 提供线程安全性，但以性能为代价。  </p><p>在大多数情况下，我们不会在多线程环境中使用 String。所以 Java 1.5 引入了一个新类 StringBuilder，除了线程安全和同步之外，它与 StringBuffer 类似。</p><p>StringBuffer 有一些额外的方法，例如 substring, length, capacity, trimToSize 等。但是，这些不是必需的，因为 String 中也有所有这些。这就是为什么这些方法从未在 StringBuilder 类中实现的原因。</p><p>StringBuffer 是在 Java 1.0 中引入的，而 StringBuilder 类是在查看 StringBuffer 的缺点后在 Java 1.5 中引入的。</p><p>假设在单线程环境中或无关线程安全，要使用 StringBuilder。反之，使用 StringBuffer 进行线程安全的操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类。</p></li><li><p>StringBuffer 是线程安全和同步的，而 StringBuilder 不是。这就是 StringBuilder 比 StringBuffer 快的原因。</p></li><li><p>字符串连接运算符 (+) 在内部使用 StringBuilder 类。</p></li><li><p>对于非多线程环境中的字符串操作，我们应该使用 StringBuilder 否则使用 StringBuffer 类。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/JDK8%E5%B8%B8%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/08/18/back-end/java-base/JDK8%E5%B8%B8%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK8-常用的时间操作"><a href="#JDK8-常用的时间操作" class="headerlink" title="JDK8 常用的时间操作"></a>JDK8 常用的时间操作</h1><blockquote><p>注意：LocalDateTime是不可变并且线程安全的</p></blockquote><h3 id="获取月初月末的时间"><a href="#获取月初月末的时间" class="headerlink" title="获取月初月末的时间"></a>获取月初月末的时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.time.temporal.TemporalAdjusters;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">currDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">localDateTimeFormat</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">// 当月第一天</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">firstDayOfMonth</span> <span class="hljs-operator">=</span> currDate.with(TemporalAdjusters.firstDayOfMonth());<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(firstDayOfMonth, LocalTime.MIN);<br><br>        <span class="hljs-comment">// 当月最后一天</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">lastDayOfMonth</span> <span class="hljs-operator">=</span> currDate.with(TemporalAdjusters.lastDayOfMonth());<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(lastDayOfMonth, LocalTime.MAX);<br><br>        System.out.println(localDateTimeFormat.format(startTime));<br>        System.out.println(localDateTimeFormat.format(endTime));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2022</span>-08-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br><span class="hljs-number">2022</span>-08-<span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">59</span><br></code></pre></td></tr></table></figure><h3 id="获取当前的时间"><a href="#获取当前的时间" class="headerlink" title="获取当前的时间"></a>获取当前的时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(localDateTime);<br># 时间戳<br>Instant.now().toEpochMilli();<br></code></pre></td></tr></table></figure><p>使用DateTimeFormatter来格式化时间  </p><p>DateTimeFormatter是JDK8用来替代线程不安全的SimpleDateFormat，用来进行时间的格式化  </p><p>现在我们来格式化时间的输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(<span class="hljs-string">&quot;LocalDateTime.now 输出:&quot;</span> + localDateTime);<br><span class="hljs-type">String</span> <span class="hljs-variable">fmtDate</span> <span class="hljs-operator">=</span> localDateTime.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;格式化后的时间:&quot;</span> + fmtDate);<br></code></pre></td></tr></table></figure><p>上述代码输出为:  </p><blockquote><p>2021-08-17T10:03:56.249<br>格式化后的时间:2021-08-17 10:03:56</p></blockquote><h3 id="时间格式转时间戳"><a href="#时间格式转时间戳" class="headerlink" title="时间格式转时间戳"></a>时间格式转时间戳</h3><p>将<code>Instant</code>在Java日期时间API类（<code>java.time.Instant</code>）代表在时间线上一个特定的时刻。瞬间被定义为自原点（称为<code>epoch</code>）以来的偏移量。原点是 1970 年 1 月 1 日 - 00:00 - 格林这是标准时间 (GMT)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">timeLong</span> <span class="hljs-operator">=</span> LocalDateTime.now().toInstant(ZoneOffset.of(<span class="hljs-string">&quot;+8&quot;</span>)).toEpochMilli();<br>System.out.println(<span class="hljs-string">&quot;LocalDateTime获取的时间戳:&quot;</span> + timeLong);<br>System.out.println(<span class="hljs-string">&quot;系统获取的时间戳:&quot;</span> + System.currentTimeMillis());<br></code></pre></td></tr></table></figure><p>上述代码输出为:    </p><blockquote><p>LocalDateTime获取的时间戳:1629166353154<br>系统获取的时间戳:1629166353155</p></blockquote><p>特定时间转为时间戳:    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">specificTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2021</span>, Month.DECEMBER, <span class="hljs-number">17</span>, <span class="hljs-number">21</span>, <span class="hljs-number">57</span>, <span class="hljs-number">00</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">specificTimeX</span> <span class="hljs-operator">=</span> specificTime.toInstant(ZoneOffset.of(<span class="hljs-string">&quot;+8&quot;</span>)).toEpochMilli();<br>System.out.println(<span class="hljs-string">&quot;特定时间的时间戳:&quot;</span> + specificTimeX);<br></code></pre></td></tr></table></figure><h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> Instant.ofEpochMilli(<span class="hljs-number">1629166353155L</span>).atZone(ZoneOffset.ofHours(<span class="hljs-number">8</span>)).toLocalDate();<br>System.out.println(<span class="hljs-string">&quot;时间戳:1629166353155 的时间为:&quot;</span> + localDate);<br></code></pre></td></tr></table></figure><p>或者转成LocalDateTime以后然后进行格式化  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDateTime.ofInstant(Instant.ofEpochMilli(<span class="hljs-number">1629166353155L</span>), ZoneId.systemDefault());<br><span class="hljs-type">String</span> <span class="hljs-variable">dateFmt</span> <span class="hljs-operator">=</span> date.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;时间戳转换为时间输出:&quot;</span> + date);<br>System.out.println(<span class="hljs-string">&quot;时间戳转换为时间并格式化输出:&quot;</span> + dateFmt);<br></code></pre></td></tr></table></figure><p>上述代码输出为:    </p><blockquote><p>时间戳转换为时间输出:2021-08-17T10:12:33.155<br>时间戳转换为时间并格式化输出:2021-08-17 10:12:33</p></blockquote><h3 id="对时间进行加减"><a href="#对时间进行加减" class="headerlink" title="对时间进行加减"></a>对时间进行加减</h3><p><strong>对天数进行加减</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(<span class="hljs-string">&quot;当前日期加一天,使用plusDays:&quot;</span> + localDateTime.plusDays(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;当前日期减一天,使用minusDays:&quot;</span> + localDateTime.minusDays(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;当前日期减一天,使用plusDays:&quot;</span> + localDateTime.plusDays(-<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>上述代码输出为:    </p><blockquote><p>当前日期加一天,使用plusDays:2021-08-18T10:44:25.153<br>当前日期减一天,使用minusDays:2021-08-16T10:44:25.153<br>当前日期减一天,使用plusDays:2021-08-16T10:44:25.153</p></blockquote><p><strong>获取一个月后的时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMonths(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>获取一个月前的时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime2</span> <span class="hljs-operator">=</span> LocalDateTime.now().minusMonths(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>其他的类似得就不多举例了，归总如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">plusYears()<br>plusMonths()<br>plusWeeks()<br>plusDays()<br>plusHours()<br>plusMinutes()<br>plusSeconds()<br>plusNanos()<br></code></pre></td></tr></table></figure><p>上面都是获取未来的时间，想要获取历史时间，把<code>plus</code>换成<code>minus</code>即可  </p><h3 id="获取时间差"><a href="#获取时间差" class="headerlink" title="获取时间差"></a>获取时间差</h3><p>有时候我们想获取两个时间的差值，这个时候我们就会用到<code>java.time.Duration</code>,使用到的方法如下  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Duration.between(p1, p2)<br></code></pre></td></tr></table></figure><p>如果对象的类型不同，则根据第一个对象的类型计算持续时间。  </p><p> 例p1类型是LocalTime，则p2将转换为LocalTime,指定的时间对象必须支持SECONDS单元，不然会报错。例如：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2021</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime9</span> <span class="hljs-operator">=</span> LocalDateTime.parse(<span class="hljs-string">&quot;2008-12-13T10:15:11&quot;</span>);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">erroDuration</span> <span class="hljs-operator">=</span> Duration.between(localDate, localDateTime9);<br>System.out.println(erroDuration.toMillis());<br></code></pre></td></tr></table></figure><p>结果就是报错：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.time.DateTimeException: Invalid value <span class="hljs-keyword">for</span> <span class="hljs-title function_">MonthOfYear</span> <span class="hljs-params">(valid values <span class="hljs-number">1</span> - <span class="hljs-number">12</span>)</span>: <span class="hljs-number">13</span><br>at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:<span class="hljs-number">311</span>)<br>at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:<span class="hljs-number">703</span>)<br>at java.time.LocalDate.of(LocalDate.java:<span class="hljs-number">267</span>)<br></code></pre></td></tr></table></figure><p> 为了完全准确，应支持NANOS单元或NANO_OF_SECOND字段。<br>如果结束在开始之前，则此方法的结果可能是负周期。 为了保证在结果上获得正持续时间调用abs() 。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMonths(<span class="hljs-number">1</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime2</span> <span class="hljs-operator">=</span> LocalDateTime.now().minusMonths(<span class="hljs-number">1</span>);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(localDateTime, localDateTime2);<br>System.out.println(<span class="hljs-string">&quot;两个时间差天数:&quot;</span> + duration.abs().toDays());<br></code></pre></td></tr></table></figure><p>上述代码输出为:   </p><blockquote><p>两个时间差天数:61</p></blockquote><p><strong>获取相差的小时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;两个时间差小时:&quot;</span> + duration.abs().toHours());<br></code></pre></td></tr></table></figure><p>上述代码输出为:    </p><blockquote><p>两个时间差小时:1488</p></blockquote><p>其他的类似得就不多举例了，归总如下：</p><blockquote><p>toMinutes() &#x2F;&#x2F; 时间差值转为分钟</p><p>toMillis()  &#x2F;&#x2F; 时间差值转为毫秒</p><p>toNanos()  &#x2F;&#x2F; 时间差值转为纳秒</p></blockquote><h3 id="字符串转-LocalDateTime"><a href="#字符串转-LocalDateTime" class="headerlink" title="字符串转 LocalDateTime"></a>字符串转 LocalDateTime</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串转 LocalDateTime</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDateTime <span class="hljs-title function_">toLocalDateTime</span><span class="hljs-params">(String dateTime, String format)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!StringUtils.hasLength(dateTime)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    format = Optional.ofNullable(format).orElse(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(format);<br>    <span class="hljs-keyword">return</span> LocalDateTime.parse(dateTime, formatter);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取指定时间的起止日期"><a href="#获取指定时间的起止日期" class="headerlink" title="获取指定时间的起止日期"></a>获取指定时间的起止日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * desc: 获取起止日期</span><br><span class="hljs-comment">     * date 2022/9/14 12:57</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> isFirst true 表示开始时间，false表示结束时间]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> cuifuan</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDateTime <span class="hljs-title function_">getStartOrEndOfDay</span><span class="hljs-params">(LocalDateTime today, Boolean isFirst)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">resDate</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>        <span class="hljs-keyword">if</span> (today == <span class="hljs-literal">null</span>) &#123;<br>            today = resDate;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isFirst) &#123;<br>            resDate = today.withHour(<span class="hljs-number">0</span>).withMinute(<span class="hljs-number">0</span>).withSecond(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resDate = today.withHour(<span class="hljs-number">23</span>).withMinute(<span class="hljs-number">59</span>).withSecond(<span class="hljs-number">59</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> resDate;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="获取指定日期所属周的开始与结束时间"><a href="#获取指定日期所属周的开始与结束时间" class="headerlink" title="获取指定日期所属周的开始与结束时间"></a>获取指定日期所属周的开始与结束时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * desc: 获取指定日期的当周开始与结束时间</span><br><span class="hljs-comment"> * date 2022/9/14 12:57</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isFirst true 表示开始时间，false表示结束时间]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> cuifuan</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDateTime <span class="hljs-title function_">getStartOrEndDayOfWeek</span><span class="hljs-params">(LocalDateTime today, Boolean isFirst)</span> &#123;<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">resDate</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>    <span class="hljs-keyword">if</span> (today == <span class="hljs-literal">null</span>) &#123;<br>        today = resDate;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (isFirst) &#123;<br>        resDate = today.with(DayOfWeek.MONDAY);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        resDate = today.with(DayOfWeek.SUNDAY);<br>    &#125;<br><br>    resDate = DateUtil.getStartOrEndOfDay(resDate, isFirst);<br><br>    <span class="hljs-keyword">return</span> resDate;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/Java%E8%A3%85%E7%AE%B1%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1/"/>
    <url>/2021/08/18/back-end/java-base/Java%E8%A3%85%E7%AE%B1%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="Java装箱与自动拆箱"><a href="#Java装箱与自动拆箱" class="headerlink" title="Java装箱与自动拆箱"></a>Java装箱与自动拆箱</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java 编译器在<code>基本数据类型</code>和其对应的<code>对象封装类型</code>之间进行自动转换.例如将<code>int</code>转成<code>Integer</code>,将<code>char</code>转成包装类<code>Character</code>等等.其他基本数据类型的转换如下:  </p><p>Java 中 8 种基本数据类型  </p><table><thead><tr><th>基本数据类型</th><th>类型</th><th>大小</th><th>包装类</th><th>取值范围</th><th>取值范围Pro</th></tr></thead><tbody><tr><td>byte</td><td>数值型</td><td>8bit</td><td>Byte</td><td>-2^7 ~ 2^7-1</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>短整形</td><td>16bit</td><td>Short</td><td>-2^15 ~ 2^15-1</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>数值整型</td><td>32bit</td><td>Integer</td><td>-2^31 ~ 2^31-1</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>long</td><td>数值长整形</td><td>64bit</td><td>Long</td><td>-2^63 ~ 2^63-1</td><td>-9223372036854775808 ~ 9223372036854775808</td></tr><tr><td>float</td><td>单精度数值型</td><td>32bit</td><td>Float</td><td></td><td>3.4e-45 ~ 1.4e38</td></tr><tr><td>double</td><td>双精度数值型</td><td>64bit</td><td>Double</td><td></td><td>4.9e-324 ~ 1.8e308</td></tr><tr><td>char</td><td>短整形</td><td>16bit</td><td>Character</td><td>0~65535</td><td>\u0000 ~ \uffff</td></tr><tr><td>boolean</td><td>布尔值</td><td>8bit(争议)</td><td>Boolean</td><td>&#x2F;</td><td>&#x2F;</td></tr></tbody></table><p>反之,从包装类转换成基本数据类型叫<code>拆箱</code>.例如从<code>Integer</code>到<code>int</code>或者从包装类<code>Long</code>转换成基本数据类型<code>long</code>.</p><h2 id="简单的装箱示例"><a href="#简单的装箱示例" class="headerlink" title="简单的装箱示例"></a>简单的装箱示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">numA</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Character</span> <span class="hljs-variable">charA</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><p>从原始数据类型创建整数对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>看一下下面的代码:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; li = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">50</span>; i += <span class="hljs-number">2</span>)<br>    li.add(Integer.valueOf(i));<br></code></pre></td></tr></table></figure><p>上面的代码将 Java 基本数据类型 <code>int</code> ,而不是对应的 <code>Integer</code> 对象添加到 <code>list</code> 集合中,代码为什么会编译通过呢?<br>因为它从 <code>i</code> 创建了一个 <code>Integer</code> 对象并将该对象添加到 <code>li</code>集合中.<br>因此，编译器在运行时将之前的代码转换为以下代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; li = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">50</span>; i += <span class="hljs-number">2</span>)<br>    li.add(Integer.valueOf(i));<br></code></pre></td></tr></table></figure><p>将基本数据类型值（例如 int）转换为相应包装类（Integer）的对象称为自动装箱。当基本数据类型在下面的使用情况的时候,会进行自动装箱：  </p><ul><li>作为参数传递给需要<strong>相应包装类的对象</strong>的方法。</li><li>赋值给相应包装类的变量.</li></ul><h2 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">9</span>);<br>System.out.println(a==b);<br><span class="hljs-comment">// 返回true</span><br></code></pre></td></tr></table></figure><p>数学运算 <code>+, %, +=</code> 不适用于 <code>Integer</code> 对象。  </p><p>Java 编译器编译代码时没有错误，因为它<code>自动执行拆箱</code>，在运行时调用 <code>intValue</code> 将 <code>Integer</code> 转换为 <code>int</code>.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(a==b.intValue());<br></code></pre></td></tr></table></figure><p>将包装类型 (Integer) 的对象转换为其对应的原始 (int) 值称为拆箱。当包装类使用情况如下的时候,会进行自动拆箱：  </p><ul><li><p>作为参数传递给需要相应原始类型值的方法<br>分析如下代码:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTran</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        unboxing(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">9</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unboxing</span><span class="hljs-params">(<span class="hljs-type">int</span> testId)</span> &#123;<br>        System.out.println(testId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到参数需要的是基本数据类型.传过去一个 Integer 对象,编译器没有报错.因为作为参数传递给需要相应原始类型值的方法,Java 编译器做了自动拆箱的操作.</p></li><li><p>赋值给相应原始类型的变量</p></li></ul><p>分析如下代码:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">9</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>a;<br></code></pre></td></tr></table></figure><p>当把对应的包装类型 b 对象,赋值给给相应原始类型的变量的时候.Java 编译器就会做自动拆箱的操作.  </p><h2 id="自动转换-拓展"><a href="#自动转换-拓展" class="headerlink" title="自动转换(拓展)"></a>自动转换(拓展)</h2><p>从低范围转到高范围类型转换属于自动类型转换, 是 JVM 自动进行转换的.  </p><p><img src="https://oscimg.oschina.net/oscnet/up-8868e02b42788ea06de313d71d1814e50cb.png"></p><p>如上图中,<code>byte char short</code>这三个是平级的<br>自动转型的示例代码如下:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">numPro</span> <span class="hljs-operator">=</span> num;<br>System.out.println(<span class="hljs-string">&quot;转换前:&quot;</span> + num);<br>System.out.println(<span class="hljs-string">&quot;转换后:&quot;</span> + numPro);<br></code></pre></td></tr></table></figure><p>代码输出如下:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">转换前:<span class="hljs-number">100</span><br>转换后:<span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>1.给出如下代码，请回答输出了什么</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numA</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numB</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numC</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numD</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    System.out.println(numA == numB);<br>    System.out.println(numC == numD);<br>&#125;<br></code></pre></td></tr></table></figure><p>想一下会输出什么，这样的面试题层出不穷，有没有什么好应对的方式<br>理理清楚自动装箱与拆箱，例如开篇的表格中有一个范围，Integer 的范围<br>Integer 把这个范围（-128 ～ 127）当成了一个缓存池，如果不在这个范围会使用 new 创建<br>所以现在的代码输出是：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>2. Java 1.5 的自动装箱拆箱机制是编译时执行还是虚拟机运行时执行</strong>  </p><p>答：编译时执行.  </p><p><strong>3.给出如下代码，请回答输出了什么</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Double</span> <span class="hljs-variable">numA</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span>;<br>    <span class="hljs-type">Double</span> <span class="hljs-variable">numB</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span>;<br>    System.out.println(numA == numB);<br>    System.out.println(numA.equals(numB));<br>    System.out.println(numA == <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的结果为 <code>false</code> <code>true</code> <code>true</code><br>分析:  为什么 <code>System.out.println(numA == 10)</code>也是<code>true</code><br>我这里使用 <code>IDEA</code> 查看编译的字节码，如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">LINENUMBER <span class="hljs-number">10</span> L6<br>GETSTATIC java/lang/System.out : Ljava/io/PrintStream;<br>ALOAD <span class="hljs-number">1</span><br>INVOKEVIRTUAL java/lang/Double.doubleValue ()D<br>LDC <span class="hljs-number">10.0</span><br>DCMPL<br>IFNE L7<br>ICONST_1<br>GOTO L8<br></code></pre></td></tr></table></figure><p>因为做了拆箱操作，等同于<code>System.out.println(numA.doubleValue() == 10);</code>  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/middleware/cache/"/>
    <url>/2021/08/18/back-end/middleware/cache/</url>
    
    <content type="html"><![CDATA[<h1 id="缓存穿透、缓存雪崩、缓存击穿"><a href="#缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿"></a>缓存穿透、缓存雪崩、缓存击穿</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>一般是程序中的临时数据或从数据库中拿到数据等，存到内存中后，称之为缓存。</p><h2 id="有什么作用"><a href="#有什么作用" class="headerlink" title="有什么作用"></a>有什么作用</h2><p>假设不使用缓存的情况下，全部请求都去请求数据库。像电商这种上架以后基本几天不会动的服装图，全部请求打到数据库，数据库处理起来很吃力。和直接读取内存相比来说，维护成本要大很多。所以把查出来的数据放到缓存中，以供大数据量级别的请求。<br>下面介绍几个缓存常见的问题以及解决方案:  </p><h2 id="缓存穿透-cache-penetration"><a href="#缓存穿透-cache-penetration" class="headerlink" title="缓存穿透(cache penetration)"></a>缓存穿透(cache penetration)</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>什么是缓存穿透？数据库与缓存中都不存在此值，请求穿过缓存，访问数据库，导致数据库压力过大。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>假如有一个 id 为 10001，现在调用<code>getById/10001</code>，现在我们去调用缓存，cacheUtils.getKey(10001)，获取不到值以后我们开始请求数据库，然后数据库也查询不到 id 为 10001 的，因为其不存在。但是，这个时候这一条数据查不到就不会被加入缓存，然后就会一直循环往复的调用数据库本体，最终导致数据库压力过大。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>根据条件临时缓存空值，过期时间设少一点，不然会对数据库的准确性产生影响。</p></li><li><p>对用户的请求进行合法的校验。</p></li><li><p>使用布隆过滤器。</p></li></ul><h2 id="缓存雪崩-cache-avalanche"><a href="#缓存雪崩-cache-avalanche" class="headerlink" title="缓存雪崩(cache avalanche)"></a>缓存雪崩(cache avalanche)</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>什么是缓存雪崩？缓存雪崩是一种场景，大量缓存的数据同时到期或缓存服务关闭，并且突然之间所有对这些数据的搜索都将冲击数据库并给数据库层造成高负载并影响性能。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用集群，例如使用 Redis 集群来确保缓存服务器在任何时间都在运行。使用断路器或者限制请求频率，例如一些网站频繁刷新就会直接频繁。</p><h2 id="缓存击穿-cache-breakdown"><a href="#缓存击穿-cache-breakdown" class="headerlink" title="缓存击穿(cache breakdown)"></a>缓存击穿(cache breakdown)</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>什么是缓存击穿？缓存击穿是一种场景，当缓存的数据过期的那一刻，同时对过期的数据进行大量的请求，这会导致这些请求直接命中数据库，然后，DB 卒。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>使用互斥锁。</p></li><li><p>通过异步线程更新缓存的数据，使其用不过期。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getDataList</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// 从缓存读取数据</span><br>   List&lt;String&gt; result = getDataFromCache();<br>   <span class="hljs-keyword">if</span> (result.isEmpty()) &#123;<br>     <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>       <span class="hljs-comment">// 从缓存读取数据</span><br>       result = getDataFromCache();<br>       <span class="hljs-keyword">if</span> (result.isEmpty()) &#123;<br>         <span class="hljs-comment">// 从数据库查询数据</span><br>         result = getDataFromDB();<br>         <span class="hljs-comment">// 将查询到的数据写入缓存</span><br>         setDataToCache(result);<br>       &#125;<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> result;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E5%B0%81%E8%A3%85/"/>
    <url>/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617757211573-0bc0967f-67ed-4196-8603-04f49607374c.png#align=left&display=inline&height=190&margin=%5Bobject%20Object%5D&originHeight=190&originWidth=640&size=0&status=done&style=none&width=640"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>面向对象最基本的特征，把真实世界的某些物体包成对象，里面的信息不对外公开，只公开某些特定方法让别人使用，内部的属性与逻辑都隐藏起来，不让人直接使用，也不需要让别人直接使用，就是所谓的<code>封装</code></p><p>设想一个例子，<code>提款机</code>，你不知道它里面还有多少钱，也不知道内部的运做，不知道哪家公司生产的机器，但你还是会去使用他提供的方法：<code>查询余额</code>、<code>提款</code>。因为他只开放这两个方法给一般人使用，你要使用这两个方法需要带入的参数是提款卡及密码，就可以完成你的需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br>    <span class="hljs-keyword">private</span> BigDecimal 剩余金额;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> 身份验证(Object 提款卡, String 密码) &#123;<br>        <span class="hljs-comment">// 验证逻辑</span><br>        <span class="hljs-comment">// 通过 返回 true</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> 吐钞() &#123;<br>        <span class="hljs-comment">// 哒哒哒哒哒哒</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 提款(Object 提款卡, String 密码) &#123;<br>        <span class="hljs-keyword">if</span> (身份验证(提款卡, 密码) == <span class="hljs-literal">true</span>)<br>            吐钞();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal 查询余额(Object 提款卡, String 密码) &#123;<br>        <span class="hljs-comment">// 查询数据库余额 0</span><br>        <span class="hljs-keyword">if</span> (身份验证(提款卡, 密码) == <span class="hljs-literal">true</span>)<br>            <span class="hljs-keyword">return</span> 剩余金额;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> BigDecimal.ZERO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然实际上更为复杂且严密(而且我对提款机不熟)，但在怎么复杂，使用上一般使用者只要知道使用哪些公开的方法就好(虽然不熟但我会领钱、查余额)，剩下的就是设计这个类别的设计师要负责的工作</p><h2 id="常用修饰符-private-、-public"><a href="#常用修饰符-private-、-public" class="headerlink" title="常用修饰符 private 、 public"></a>常用修饰符 private 、 public</h2><blockquote><p>private 私有</p></blockquote><p><code>private</code>是属性隐藏会普遍使用的修修饰符，开放权限最低，只有当前类中能够存取</p><blockquote><p>public 公开</p></blockquote><p>与<code>private</code>相反，<code>public</code>是任何人都可以调用，通常用来表示这个方法可以供大家访问，一个<code>public</code>的方法内可以调用多个private的方法来实现需要的功能</p><h2 id="Getter-与-Setter"><a href="#Getter-与-Setter" class="headerlink" title="Getter 与 Setter"></a>Getter 与 Setter</h2><p>为了属性隐藏，我们常把重要属性设为<code>private</code>，要供别人(甚至自己)存取的时候，通常会利用<code>getter()</code>及<code>setter()</code>这种对外公开方法间接的存取。<br>来看个例子，学生类的属性有姓名、年龄，提供<code>setter</code>与<code>getter</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span> || name.trim().length() == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ERROR: 名字不能为空！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ERROR: 年齡不能为负数！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;无名氏&quot;</span> : <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;名字:&#x27;&quot;</span> + <span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 年龄:&quot;</span> + <span class="hljs-built_in">this</span>.getAge() +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是常见的设计方法，成员属性的部份都设为private，而公开了<code>setName()</code>及<code>setAge()</code>让别人调用来设定<code>name</code>及<code>age</code>的值，这就是通过公开方法间接的设定隐藏的属性值，好处是我这样写可以在设定属性值前先做一些前处理(以上述代码来说就是检查参数的合法性)。<br>在<code>getter</code>的部份，也公开了两个方法可以让别人存取到内部隐藏的属性，以<code>getName()</code>来说，可以在回传出去前多做一步处理(这里简单空判断) ，这样的设计方式是常见且容易维护的。</p><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.setName(<span class="hljs-string">&quot;源十天狗&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;s1设置年龄为-500&quot;</span>);<br>        s1.setAge(-<span class="hljs-number">500</span>);<br>        System.out.println(<span class="hljs-string">&quot;打印s1:==&gt;&quot;</span>+ s1.toString());<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;s2不设置名字&quot;</span>);<br>        s2.setName(<span class="hljs-literal">null</span>);<br>        s2.setAge(<span class="hljs-number">18</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;打印s2:==&gt;&quot;</span>+ s2.toString());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">s1设置年龄为-<span class="hljs-number">500</span><br>ERROR: 年齡不能为负数！<br>打印s1:==&gt;Student&#123;名字:<span class="hljs-string">&#x27;源氏舔狗&#x27;</span>, 年龄:-<span class="hljs-number">1</span>&#125;<br>s2不设置名字<br>ERROR: 名字不能为空！<br>打印s2:==&gt;Student&#123;名字:<span class="hljs-string">&#x27;无名氏&#x27;</span>, 年龄:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><p>可以看到对象s1因为乱传参数，所以在<code>setter</code>被设定前被先检查出来，可以进一步增加程序的稳定性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E6%8E%A5%E5%8F%A3/"/>
    <url>/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础篇：接口"><a href="#Java基础篇：接口" class="headerlink" title="Java基础篇：接口"></a>Java基础篇：接口</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Java</code> 中的 <code>接口</code> 定义为用于指定实现类行为的抽象类型，Java接口包含 <code>静态常量</code> 和 <code>抽象方法</code> , 1.8之后还有 <code>默认方法</code> 与 <code>静态方法</code> 。一个类可以实现多个接口。<br>在Java中，接口是使用 <code>interface</code> 关键字声明的。在 <code>JDK8</code> 之前接口中的所有方法都是 <code>隐式公开</code> 和 <code>抽象</code> 的, 1.8版本之后可以在接口中定义静态方法与使用 <code>default</code> 声明的带 <code>方法体</code> 的方法。</p><pre><code class=" mermaid">graph LR;接口---静态常量接口---抽象方法接口---默认方法接口---静态方法</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>抽取一系列对象的公共特征, 声明方法后进行统一实现, 例如猫和老鼠都是动物, 都可以爬或者叫等等, 这个时候我们定义一个动物接口, 声明爬行和叫声的公共抽象方法, 创建猫和老鼠的类进行实现动物接口   </p><p>优点:  当增加一个公共抽象方法, 例如在动物接口中增加 <code>毛色</code> 方法, 这样我们不用去用脑去记忆有多少动物实现了它, 因为编译的时候会报错误, 很清晰的给动物实现类增加方法, 而无需去担心漏掉某个动物没有毛色    </p><p>代码实现:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫行走的方法...&quot;</span>);<br>    &#125;    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗行走的方法...&quot;</span>);<br>    &#125;    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>给动物增加一个毛色  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// ...其他方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">color</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候如果<code>Cat</code>和<code>Dog</code>类如果不重写<code>color</code>方法的话,就会编译报错  </p><h2 id="新特性-默认方法"><a href="#新特性-默认方法" class="headerlink" title="新特性::默认方法"></a>新特性::默认方法</h2><p>以前的接口向后兼容性不好, 例如我想在动物类中增加一个如何食用该动物, 那么总不能每个动物都要实现吧, 所以就需要这种可以不实现这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">howToEat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal:实现了这个接口的类可以不实现这个方法&quot;</span>);<br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><p>那么问题来了, 假如有一个<code>兔子</code>类, 在实现了<code>Animal</code>的同时又实现了<code>Mammal</code>(哺乳动物), 而两个接口中都包含<code>howToEat</code>方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mammal</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">howToEat</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 实现了这个接口的类可以不实现这个方法</span><br>        System.out.println(<span class="hljs-string">&quot;Mammal:哺乳动物食用方法...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rabbit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>, Mammal&#123;<br><br>&#125;  <br></code></pre></td></tr></table></figure><p>上述代码编译出错, 如下:  </p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eaf1ae83c454dd48aa5883c94cb2add~tplv-k3u1fbpfcp-watermark.image" alt="错误信息">  </p><p>这个时候我们就要重写<code>howToEat</code>方法了  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rabbit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>, Mammal &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">howToEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;麻辣兔头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新特性-静态方法"><a href="#新特性-静态方法" class="headerlink" title="新特性::静态方法"></a>新特性::静态方法</h2><p>假如我想获取哺乳动物的腿的数量, 我又不想去调取其实现类, 或者每个实现类写其有几条腿或者爪子什么之类的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mammal</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLegByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (name) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;兔子&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;鸭子&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结:  </p><ul><li>接口固定了实现类对指定方法的实现特征</li><li>jdk8新特性, 可以在接口中定义静态方法与默认方法</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E7%BB%A7%E6%89%BF/"/>
    <url>/2021/08/18/back-end/java-base/Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9A%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java中继承是一种机制，其中一个对象获取父对象的所有属性和行为。<br>它是 <code>OOP（面向对象的编程系统）</code> 的重要组成部分。<br>Java继承的思想是，您可以 <code>创建</code> 基于现有类构建的新类。<br>从现有类继承时，可以 <code>复用</code> 父类的 <code>方法</code> 和 <code>字段</code> 。<br>此外，您还可以在继承后的类中添加新的方法和字段</p><h2 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a>为什么需要继承</h2><p>试想一种情况：<br>有一个 Aminal (动物)，它的定义如下：  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">属性：<br>体重、身高、年龄  <br><br>方法:<br>移动<br></code></pre></td></tr></table></figure><p> ok，当我们这个类定义好之后，现在再来定义一个 Dog（狗）的类别：  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">属性：<br>体重、身高、年龄 、毛色<br><br>方法:<br>移动、吃、睡、吠叫  <br></code></pre></td></tr></table></figure><p>现在我们发现狗类和动物类中定义的属性有很多重复。<br>在现实中，狗是一种动物，应该拥有动物的属性及方法，然后再加上狗专属的属性和方法。<br>以这个例子来说，我们可以把动物当成 <code>父类别(或称超类别super class)</code> ，狗 <code>继承</code> 动物，狗是 <code>子类别 subclass</code> 。  </p><p><strong>子类别会拥有父类别的所有属性、方法，再加上自己定义的属性及方法，所以可以说子类别是父类别的延伸(extend)。</strong>  (tips：这句话超重要！多看个几十遍，想一想)   </p><p>总结两点： </p><ul><li>实现<a href="https://www.yuque.com/go/doc/34263211">方法重写</a> </li><li>提高代码的复用性</li></ul><h2 id="类别图"><a href="#类别图" class="headerlink" title="类别图"></a>类别图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617760315566-22318ed5-3656-4282-959e-8ea7963e9be7.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&name=image.png&originHeight=400&originWidth=591&size=48414&status=done&style=shadow&width=382" alt="image.png"></p><p>这是 <code>UML</code>  (统一建模语言，Unified Modeling Language) 的类别图，常用来描述类别之间的关系。<br>实心箭头表示继承关系，由子类别指向父类别。<br>图中读作 <code>Dog</code>  继承 <code>Animal</code> 。另外一种常见的说法是： <code>Dog is a Animal.</code> <br>继承的概念用 <code>is a</code> 来表述。反过来说 <code>Animal is a Dog.</code>是不成立的，利用 <code>is a</code> 可以帮助思考。  </p><h2 id="继承中使用的术语"><a href="#继承中使用的术语" class="headerlink" title="继承中使用的术语"></a>继承中使用的术语</h2><ul><li>Class：类是具有共同属性的一组对象。它是从中创建对象的模板或蓝图。</li><li>Sub Class &#x2F; Child Class：子类是继承其他类的类。也称为派生类，扩展类或子类。</li><li>Super Class&#x2F; Parent Class：父类是子类从中继承要素的类。也称为基类或父类。</li><li>Reusability：顾名思义，可重用性是一种机制，可在创建新类时方便您重用现有类的字段和方法。您可以使用在现有类中已经定义的相同字段和方法。</li></ul><h2 id="Java继承的语法"><a href="#Java继承的语法" class="headerlink" title="Java继承的语法"></a>Java继承的语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> <br>&#123;  <br>   <span class="hljs-comment">//methods and fields  </span><br>&#125;  <br></code></pre></td></tr></table></figure><p><code>extends</code> 关键字表示正在新建从现有类派生的新类，<code>extends</code> 的意思是扩展。<br>在Java术语中，被继承的类称为 <code>父类</code> 或 <code>超类</code> ，而新类称为 <code>子级</code> 或 <code>子类</code> 。</p><h2 id="Java继承示例"><a href="#Java继承示例" class="headerlink" title="Java继承示例"></a>Java继承示例</h2><p>参照 <code>类别图</code> :  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">int</span> height;<br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;移动 -&gt; 移动&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hairColor</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;金黄&quot;</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        System.out.print(<span class="hljs-string">&quot;狗开始移动:&quot;</span>);<br>        dog.move();<br>        System.out.println(<span class="hljs-string">&quot;狗的颜色:&quot;</span>+ dog.hairColor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">狗开始移动:移动 -&gt; 移动<br>狗的颜色:金黄<br></code></pre></td></tr></table></figure><p>.</p><h2 id="Java中的继承类型"><a href="#Java中的继承类型" class="headerlink" title="Java中的继承类型"></a>Java中的继承类型</h2><p>在类的基础上，Java 中可以有三种继承类型：  </p><ul><li>单继承</li><li>多级继承</li><li>阶级式继承</li></ul><p>在Java编程中，仅通过 <code>接口</code> 支持 <code>多重继承</code> 和 <code>混合继承</code> ，之后我们将学习接口。</p><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617764475424-aa3cd544-ce50-4dec-ac0b-652eb3ee4290.png#align=left&display=inline&height=135&margin=%5Bobject%20Object%5D&name=image.png&originHeight=269&originWidth=244&size=9604&status=done&style=none&width=122" alt="image.png">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Male</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中国话...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多级继承"><a href="#多级继承" class="headerlink" title="多级继承"></a>多级继承</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617764606774-9b4df628-f86f-41a8-90c2-8d46d9371c10.png#align=left&display=inline&height=216&margin=%5Bobject%20Object%5D&name=image.png&originHeight=431&originWidth=269&size=16126&status=done&style=none&width=134.5" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Male</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;雄厚声...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BabyBoy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Male</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;嚎嚎大哭...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="阶级式继承"><a href="#阶级式继承" class="headerlink" title="阶级式继承"></a>阶级式继承</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617765260842-f5fa735b-92b6-4497-bcc9-04ed456700da.png#align=left&display=inline&height=130&margin=%5Bobject%20Object%5D&name=image.png&originHeight=260&originWidth=508&size=22325&status=done&style=none&width=254" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Male</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;雄厚声...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Female</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;细细声...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="为什么-Java-不支持混合继承"><a href="#为什么-Java-不支持混合继承" class="headerlink" title="为什么 Java 不支持混合继承"></a>为什么 Java 不支持混合继承</h2><p>为了降低复杂性并简化语言，java不支持多重继承。<br>考虑一个场景，其中A，B和C是三个类别。 C类继承 <code>A和B</code> 类。<br>如果A和B类具有相同的方法，并且您从子类对象调用它，则将有歧义来调用A或B类的方法。<br>由于编译时错误比运行时错误要好，因此如果您继承2个类，则 <code>Java</code>  会呈现编译时错误。<br>因此，无论您使用的是相同的方法还是不同的方法，都会出现编译时错误。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;  <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">msg</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);&#125;  <br>&#125;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;  <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">msg</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Welcome&quot;</span>);&#125;  <br>&#125;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B&#123; <span class="hljs-comment">//假设可以运行  </span><br>   <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;  <br>   C obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();  <br>   obj.msg();<span class="hljs-comment">// 不知道将要调用哪个msg()方法  </span><br> &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="万物之父-Object"><a href="#万物之父-Object" class="headerlink" title="万物之父 Object"></a>万物之父 Object</h2><p>如图：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/631242/1617772405795-064eb24e-0ab7-4a7d-8061-bc3027e3f0e4.jpeg#align=left&display=inline&height=377&margin=%5Bobject%20Object%5D&originHeight=377&originWidth=593&size=0&status=done&style=none&width=593"></p><p>我们知道Java是面向对象的语言，而每个类都继承Object。<br>定义类的时候，如果没有使用关键字 <code>exyends</code> ,Java会自行继承  <code>extends Object</code> :  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-comment">// 等价于下面代码中，Java会自动帮你extends Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键字-this、super"><a href="#关键字-this、super" class="headerlink" title="关键字 this、super"></a>关键字 this、super</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote><p>指到自己类别的成员。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    Human(String str)&#123;<br>        <span class="hljs-built_in">this</span>.name = str;<br>    &#125;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程式中， this.name意思是 <code>自己这个类别的成员name</code> ，当然在这个情况 <code>不写也无所谓</code> ，但继承关系越 <code>复杂</code> 的情况下这样写法可以大大增加代码的 <code>可读性</code> 。  </p><blockquote><p>调用构造方法 this(.); </p></blockquote><p>如果写了很多构造提供多元的建构物件方式，构造之间彼此可以互相调用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    Human()&#123;<br>        name = <span class="hljs-string">&quot;untitled&quot;</span>;<br>        age = -<span class="hljs-number">1</span>;<br>        totalCount++;<br>    &#125;<br>    Human(String str)&#123;  <br>        <span class="hljs-built_in">this</span>();                          <br>        <span class="hljs-built_in">this</span>.name = str;<br>    &#125;<br>    Human(String str,<span class="hljs-type">int</span> a)&#123;<br>        <span class="hljs-built_in">this</span>(str);  <br>        <span class="hljs-built_in">this</span>.age = a;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot; 年齡：&quot;</span>+age+<span class="hljs-string">&quot; 总人数：&quot;</span>+totalCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程式中， <code>this()</code> 表示调用无参构造方法， <code>this(String)</code> 表示调用带有一个字串参数的构造方法，以此类推。  </p><p>这样写的好处是，各构造之间有功能扩充的效果，已经写好的程式可以被充分的再利用，要修改某个环节也比较不会出错。  </p><p><strong>tips:</strong> </p><p><code>this(.)</code> 只能放在方法体内第一行！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Human(String str)&#123;  <span class="hljs-comment">// 编译错误，要把方法体内两行位置互换</span><br>    <span class="hljs-built_in">this</span>.name = str;<br>    <span class="hljs-built_in">this</span>();        <span class="hljs-comment">// 要等构造初始化完成，才能做最后的决定</span><br>&#125;<br></code></pre></td></tr></table></figure><p>好，那用定义好的构造来测试一下程序：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestHuman</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Human</span>();<br>        h1.printInfo();<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Human</span>(<span class="hljs-string">&quot;铅华&quot;</span>);<br>        h2.printInfo();<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">h3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Human</span>(<span class="hljs-string">&quot;小花&quot;</span>, <span class="hljs-number">18</span>);<br>        h3.printInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">untitled 年齡：-<span class="hljs-number">1</span> 目前總人數：<span class="hljs-number">1</span><br>铅华 年齡：-<span class="hljs-number">1</span> 目前總人數：<span class="hljs-number">2</span><br>小花 年齡：<span class="hljs-number">18</span> 目前總人數：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>指到父类别，使用方法跟 <code>this</code> 相似，一样要放到第一行。<br>使用代码测试一下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Parent</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money -= money;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Child</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>            <span class="hljs-built_in">super</span>(money);<br>            System.out.println(<span class="hljs-string">&quot;儿子花了爸爸&quot;</span> + money + <span class="hljs-string">&quot;元钱后剩余&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">儿子花了爸爸<span class="hljs-number">10</span>元钱后剩余<span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><h2 id="层层初始化"><a href="#层层初始化" class="headerlink" title="层层初始化"></a>层层初始化</h2><p>举个例子：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/631242/1617774884048-37eab656-13d4-45e5-afdc-0e7aae50d30c.jpeg#align=left&display=inline&height=188&margin=%5Bobject%20Object%5D&originHeight=188&originWidth=105&size=0&status=done&style=none&width=105"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    A()&#123;<br>        System.out.println(<span class="hljs-string">&quot;A的构造....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    B()&#123;<br>        System.out.println(<span class="hljs-string">&quot;B的构造....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    C()&#123;<br>        System.out.println(<span class="hljs-string">&quot;C的构造....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建一个 <code>C</code> 对象试一试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">A的构造....<br>B的构造....<br>C的构造....<br></code></pre></td></tr></table></figure><p>示意图：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/631242/1617775010273-e46afa72-d4aa-4f9b-bbdb-e56dd3f9b2c7.jpeg#align=left&display=inline&height=261&margin=%5Bobject%20Object%5D&originHeight=261&originWidth=559&size=0&status=done&style=none&width=559"></p><p>我们要建构的是 <code>C</code> ，而 <code>C</code> 是 <code>B</code> 的延伸，所以要先有 <code>B</code> ，而 <code>B</code> 是 <code>A</code> 的延伸，所以要先有 <code>A</code> ，而 <code>A</code> 是 <code>Object</code> 的延伸，所以要先有 <code>Object</code> ，于是就从最顶端的父类别一直建构下来。<br>好，现在我知道需要从父类别初始化下来，但构造呢？一个类别可以定义无数个构造，他怎么知道我要用哪个构造方法来构造我的对象？到底是以什么机制来构造父类的？<br>嗯，回想一下，当初在定义类的时候，如果没有定义任何构造方法，Java会帮你定义一个不带参数不做任何事的构造方法，现在同样的老招又来一次！<br>只要你的构造方法中 <code>没有调用其他构造方法</code> ，就会在 <code>第一行</code> 偷偷帮你加上去一个 <code>super(); </code> 有多偷偷呢？你连看都看不到！ ！但他就是存在于最后的程序代码中。  </p><p>以上的程式来说，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    A()&#123;<br>        <span class="hljs-built_in">super</span>();  <span class="hljs-comment">// 这行不写的话，Java会帮你加上，但你看不到</span><br>        System.out.println(<span class="hljs-string">&quot;这里是A的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    B()&#123;<br>        <span class="hljs-built_in">super</span>();  <span class="hljs-comment">// 这行不写的话，Java会帮你加上，但你看不到</span><br>        System.out.println(<span class="hljs-string">&quot;这里是B的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    C()&#123;<br>        <span class="hljs-built_in">super</span>();  <span class="hljs-comment">// 这行不写的话，Java会帮你加上，但你看不到</span><br>        System.out.println(<span class="hljs-string">&quot;这里是C的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好的，现在知道他会自动帮我调用 <code>super();</code> 来建构父类别，但是如果我不想用这个· <code>无参构造</code> 呢？我辛苦设计那么多 <code>构造方法</code> ，他只会帮我调用 <code>无参构造</code> ，太惨了吧！<br>嗯嗯，没错就是这么惨，所以如果要调用 <code>有参数的super(.);</code> 你就要自己写！<br>观察下述代码，想想执行结果：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span> &#123;<br>    ClassA() &#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是A的构造方法...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassA</span> &#123;<br>    ClassB() &#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是B的构造方法...&quot;</span>);<br>    &#125;<br><br>    ClassB(String str) &#123;<br>        <span class="hljs-built_in">this</span>();<br>        System.out.println(<span class="hljs-string">&quot;B：hello &quot;</span> + str);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassB</span>&#123;<br>    ClassC() &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;tina&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;这里是C的构造方法...&quot;</span>);<br>    &#125;<br><br>    ClassC(String str) &#123;<br>        <span class="hljs-built_in">super</span>(str);<br>        System.out.println(<span class="hljs-string">&quot;C: hello &quot;</span>+ str);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassC</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">这里是A的构造方法...<br>这里是B的构造方法...<br>B：hello tina<br>C: hello tina<br>这里是C的构造方法...<br></code></pre></td></tr></table></figure><p>如果跟你想的不一样，在重新看一下上面的描述再想想，哪里不懂可以查看原文问我。这里是重要的 <code>继承理念</code> 。  </p><h2 id="存取修饰符-protected"><a href="#存取修饰符-protected" class="headerlink" title="存取修饰符 protected"></a>存取修饰符 protected</h2><p>在存取修饰符的章节提过，现在刚好提到继承再拿出来讨论。<br><code>protected</code> 是个关键字，开放的最大权限为 <code>不同包的子类别</code> 可以存取。<br>假设 <code>Animal</code>  与 <code>Dog</code>  位在不同 <code>package</code> ，先看 <code>Animal</code> 的代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> A;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;  <span class="hljs-comment">// 4个属性刚好4种权限范围都做测试</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">// ↓这个修饰子一定要public或protected，不然不同类别的Dog不能用他来构造对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> h,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> a)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = str;<br>        <span class="hljs-built_in">this</span>.height = h;<br>        <span class="hljs-built_in">this</span>.weight = w;<br>        <span class="hljs-built_in">this</span>.age = a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看 <code>Dog</code> 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> B;<br><span class="hljs-keyword">import</span> A.Aminal;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    String color;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> h,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> a,String c)</span>&#123;<br>        <span class="hljs-built_in">super</span>(str,h,w,a);<br>        <span class="hljs-built_in">this</span>.color = c;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name);    <span class="hljs-comment">// OK, public 不同包也可以存取</span><br>        System.out.println(height);  <span class="hljs-comment">// OK, protected 允许不同包的子类别存取</span><br>        System.out.println(weight);  <span class="hljs-comment">// 编译错误，预设只有同包可以存取</span><br>        System.out.println(age);     <span class="hljs-comment">// 编译错误，private 只有自身类中能存取</span><br>        System.out.println(color);   <span class="hljs-comment">// OK, 当前类成员当然ok</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重写的存取修饰符限制"><a href="#重写的存取修饰符限制" class="headerlink" title="重写的存取修饰符限制"></a>重写的存取修饰符限制</h2><blockquote><p>上面的例子有提到过重写(override)，这边再详细讨论一下，以及一些限制。  </p></blockquote><p>在继承中关系，父类别定义了一些方法，子类别觉得不适用的话可以 <code>覆盖</code> 掉父类别的方法，然后 <code>重写</code> 属于自己的方法。<br>举个例子:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, I am A.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, I am B.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.printInfo();<br>        <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>        c.printInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hello, <span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">B</span>.<br>hello, <span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">A</span>.<br></code></pre></td></tr></table></figure><p>上述程式中， <code>B</code> 与 <code>C</code> 都是继承 <code>A</code> ，表示拥有了 <code>A</code> 所有的成员，但 <code>B</code> 重写了 <code>printInfo()</code> 方法，而 <code>C</code> 没有。所以在调用的时候， <code>对象B</code> 会使用 <code>B</code> 类别重写的方法，而 <code>对象C</code> 因为 <code>C</code> 类没有自己定义重写，所以会使用到父类 <code>A</code> 所定义的 <code>printInfo()</code> 。<br>好，那来谈谈 <code>重写</code> 的 <code>限制</code> 。</p><p><strong>要重写父类方法必须满足几个条件：</strong></p><ul><li>父类方法不能用 final 修饰。</li><li>子类重写的方法名称、回传型态、参数个数顺序需相同。</li><li>子类重写的方法，其修饰符权限不能小于父类方法。</li></ul><p><strong>第一点，用final修饰的方法无法被重写。</strong><br>这是关键字final修饰方法的特性，详细内容于后面讨论。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//       (↓关键字 final)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, this is A.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// 编译错误  ↓ 利用final修飾的方法不能被重写。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, this is B;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>A类</code>  的 <code>printInfo()</code> 方法利用 <code>关键字 final</code>  修饰，所以任何继承他的子类别都不能重写这个方法，否则会产生编译错误： <code>Cannot override the final method from A</code> .<br><strong>第二点，方法名称、回传型态、参数个数必须相同。</strong><br>嗯，如果不一样的话，就是自己再定义一个新方法了阿！ ！跟重写有什么关系 XD  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, this is A.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello Tina, nice to meet you &lt;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恩，就是多定义一个方法，没什么好说的，这根本不是重写。  </p><p><strong>第三点，子类方法修饰符权限不能小于父类方法。</strong><br>简单来说，如果父类说这个方法是对 <code>全世界公开(public)</code> 的方法，你要重写就不能 <code>占为己有(private)</code> 。<br>tips: 存取修饰符的开放权限从大到小： <code>public</code>  -&gt; <code>protected</code>  -&gt; <code>(no modifier)</code>  -&gt; <code>private</code> <br>如果父类说此方法是 <code>protected</code> ，那子类重写时的修饰符必须是 <code>public</code> 或 <code>protected</code> 。<br>如果父类说此方法是 <code>private</code> ，那子类重写时的修饰符必须是 <code>public</code> 或 <code>protected</code> 或 <code>(no modifier)</code> 或 <code>private</code> 。<br><strong>关键是权限的开放范围不得小于重写对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// 注意修饰符是(no modifier)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, this is A.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// ↓ 编译错误，子类重写方法修饰符权限小于父类方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello, this is B.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>A类</code> 中的 <code>printInfo()</code> 方法修饰子是 <code>(no modifier)</code> ，依据重写的开放权限规则， <code>B类</code> 继承了 <code>A类</code> 想重写 <code>printInfo()</code> ，重写的开放权限必须为 <code>public</code> 或 <code>protected</code> 或 <code>( no modifier)</code> ，重点就是不能小于重写对象，否则会发生编译错误： <code>Cannot reduce the visibility of the inherited method from A</code> .<br><img src="https://cdn.nlark.com/yuque/0/2021/png/631242/1617757324069-4901cab7-1364-4b8c-9c3c-fea510ec6b60.png#align=left&display=inline&height=251&margin=%5Bobject%20Object%5D&name=bottom.png&originHeight=251&originWidth=748&size=24850&status=done&style=none&width=748" alt="bottom.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/linux/soft/Linux%E5%AE%89%E8%A3%85Java/"/>
    <url>/2021/07/12/linux/soft/Linux%E5%AE%89%E8%A3%85Java/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux安装Java"><a href="#Linux安装Java" class="headerlink" title="Linux安装Java"></a>Linux安装Java</h1><h3 id="1-安装-wget"><a href="#1-安装-wget" class="headerlink" title="1. 安装 wget"></a>1. 安装 wget</h3><p>已安装 <code>wget</code> 可以跳过  </p><ul><li>Ubuntu 使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install wget<br></code></pre></td></tr></table></figure><ul><li>Centos 使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br>yum install wget<br></code></pre></td></tr></table></figure><h3 id="2-下载-java-安装包"><a href="#2-下载-java-安装包" class="headerlink" title="2.下载 java 安装包"></a>2.下载 java 安装包</h3><p>下载地址为华为云源  </p><p><a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.huaweicloud.com/java/jdk/8u172-b11/jdk-8u172-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>解压  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u172-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>移动文件位置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> jdk1.8.0_172 /usr/local/java<br></code></pre></td></tr></table></figure><h3 id="3-配置坏境变量"><a href="#3-配置坏境变量" class="headerlink" title="3.配置坏境变量"></a>3.配置坏境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br></code></pre></td></tr></table></figure><p>在尾部追加  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/java<br><span class="hljs-built_in">export</span> JRE_HOME=/usr/local/java/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JRE_HOME</span>/lib:<span class="hljs-variable">$CLASSPATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>让环境变量生效  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>使用 <code>java -version</code> 检测安装是否完成  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ekko:/usr/local/java<span class="hljs-comment"># java -version</span><br>java version <span class="hljs-string">&quot;1.8.0_172&quot;</span><br>Java(TM) SE Runtime Environment (build 1.8.0_172-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/linux/soft/Linux%E5%AE%89%E8%A3%85Maven/"/>
    <url>/2021/07/12/linux/soft/Linux%E5%AE%89%E8%A3%85Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-安装-Maven"><a href="#Linux-安装-Maven" class="headerlink" title="Linux 安装 Maven"></a>Linux 安装 Maven</h1><h2 id="1-Maven-压缩包下载与解压"><a href="#1-Maven-压缩包下载与解压" class="headerlink" title="1. Maven 压缩包下载与解压"></a>1. Maven 压缩包下载与解压</h2><p>华为云下载源，自行选择版本<br>下面的示例使用的是 3.8.1 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.huaweicloud.com/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz<br>```  <br><br>解压 `apache-maven-3.8.1-bin.tar.gz`<br><br>```bash<br>tar -zxvf apache-maven-3.8.1-bin.tar.gz<br>```  <br><br>移动到 `/usr/local` 目录  <br><br>```bash<br><span class="hljs-built_in">mv</span> apache-maven-3.8.1 /usr/local/<br></code></pre></td></tr></table></figure><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br>```  <br><br>在最后面追加  <br><br>```bash<br><span class="hljs-built_in">export</span> MAVEN_HOME=/usr/local/apache-maven-3.8.1/<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;PATH&#125;</span>:<span class="hljs-variable">$&#123;MAVEN_HOME&#125;</span>/bin<br></code></pre></td></tr></table></figure><p>使环境变量生效  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="3-安装完成"><a href="#3-安装完成" class="headerlink" title="3. 安装完成"></a>3. 安装完成</h2><p>使用 <code>mvn</code> 检查是否安装成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@luca168 luca]<span class="hljs-comment"># mvn -verison</span><br>Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)<br>Maven home: /usr/local/apache-maven-3.8.1<br>Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_201/jre<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;3.10.0-1062.1.2.el7.x86_64&quot;</span>, <span class="hljs-built_in">arch</span>: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br></code></pre></td></tr></table></figure><p>安装完成  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/software-install/windows/windows%E9%85%8D%E7%BD%AENode%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/07/12/software-install/windows/windows%E9%85%8D%E7%BD%AENode%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="windows-配置Node环境"><a href="#windows-配置Node环境" class="headerlink" title="windows 配置Node环境"></a>windows 配置Node环境</h3><h3 id="1-下载-node-管理工具"><a href="#1-下载-node-管理工具" class="headerlink" title="1. 下载 node 管理工具"></a>1. 下载 node 管理工具</h3><p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578840679363-0810c852-d772-4f7a-8fd9-f82eb8cff8e6.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&originHeight=238&originWidth=800&size=0&status=done&style=none&width=800"></p><h3 id="2-安装完成，验证"><a href="#2-安装完成，验证" class="headerlink" title="2. 安装完成，验证"></a>2. 安装完成，验证</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578840679403-949e0b45-8682-44f2-a9e2-659432396749.png#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&originHeight=299&originWidth=800&size=0&status=done&style=none&width=800"></p><h3 id="3-安装-node-最新版本，此时是-13-6-0"><a href="#3-安装-node-最新版本，此时是-13-6-0" class="headerlink" title="3. 安装 node 最新版本，此时是 13.6.0"></a>3. 安装 node 最新版本，此时是 13.6.0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install latest<br></code></pre></td></tr></table></figure><h3 id="4-使用该版本-nvm-use-13-6-0"><a href="#4-使用该版本-nvm-use-13-6-0" class="headerlink" title="4. 使用该版本 nvm use 13.6.0"></a>4. 使用该版本 <code>nvm use 13.6.0</code></h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578840679388-60a6c6ac-81b1-43a4-8299-77f0206e010d.png#align=left&display=inline&height=207&margin=%5Bobject%20Object%5D&originHeight=207&originWidth=521&size=0&status=done&style=none&width=521"></p><h3 id="5-配置-npm-淘宝镜像源"><a href="#5-配置-npm-淘宝镜像源" class="headerlink" title="5. 配置 npm 淘宝镜像源"></a>5. 配置 npm 淘宝镜像源</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org --global</span><br>npm config set disturl https:<span class="hljs-comment">//npm.taobao.org/dist --global</span><br></code></pre></td></tr></table></figure><p>查看相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513685215-3cfc9261-2a2c-4105-9ffa-7def3840ee62.png#align=left&display=inline&height=739&margin=%5Bobject%20Object%5D&name=image.png&originHeight=739&originWidth=873&size=43540&status=done&style=none&width=873" alt="image.png"></p><h3 id="6-出现问题"><a href="#6-出现问题" class="headerlink" title="6. 出现问题"></a>6. 出现问题</h3><h4 id="6-1-windows上安装nvm后选择node版本出现exit-status-1…"><a href="#6-1-windows上安装nvm后选择node版本出现exit-status-1…" class="headerlink" title="6.1 windows上安装nvm后选择node版本出现exit status 1…"></a>6.1 windows上安装nvm后选择node版本出现exit status 1…</h4><p>问题：nvm install x.x.x 可以成功，但无法切换和使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span><br>8.9.1<br>==============================<br>nvm use 8.9.1<br><span class="hljs-built_in">exit</span> status 1: <span class="hljs-string">&#x27;D:\Program&#x27;</span> ▒▒▒▒▒ڲ▒▒▒▒ⲿ▒▒▒Ҳ▒▒▒ǿ▒▒▒▒еĳ▒▒▒<br>▒▒▒▒▒▒▒▒▒ļ▒▒▒<br></code></pre></td></tr></table></figure><p>原因：我把 nvm 安装到了有空格的路径上（D:\Program Files），导致切换失败</p><p>解决：把 nvm 卸载重装到没有空格的路径上（例如：D:\nvm），即可解决问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span><br>8.9.1<br>==============================<br>nvm use 8.9.1<br>Now using node v8.9.1 (64-bit)<br>==============================<br>nvm <span class="hljs-built_in">ls</span><br>* 8.9.1 (Currently using 64-bit executable)<br>==============================<br>node -v<br>v8.9.1<br>==============================<br>npm -v<br>5.5.1<br></code></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000021549182">原文</a></p><p><a href="https://www.jianshu.com/p/a230bd5f6fe9">错误参考</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/software-install/windows/windows%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%89%88mysql-5.7.28-winx64/"/>
    <url>/2021/07/12/software-install/windows/windows%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%89%88mysql-5.7.28-winx64/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-安装解压版-mysql-5-7-28-winx64"><a href="#windows-安装解压版-mysql-5-7-28-winx64" class="headerlink" title="windows 安装解压版 mysql-5.7.28-winx64"></a>windows 安装解压版 mysql-5.7.28-winx64</h1><h2 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h2><p>解压到 D:\Mysql-5.7 路径下，并重命名文件为 mysql。</p><h2 id="2-创建-data-文件夹"><a href="#2-创建-data-文件夹" class="headerlink" title="2. 创建 data 文件夹"></a>2. 创建 data 文件夹</h2><p>打开 mysql 文件夹创建 data 文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513327930-c1d9475f-2169-461c-8f51-7be79e8f650b.png#align=left&display=inline&height=984&margin=%5Bobject%20Object%5D&originHeight=984&originWidth=2028&size=0&status=done&style=none&width=2028"></p><h2 id="3-给-mysql-添加环境变量"><a href="#3-给-mysql-添加环境变量" class="headerlink" title="3. 给 mysql 添加环境变量"></a>3. 给 mysql 添加环境变量</h2><h3 id="3-1-打开控制面板，点击‘系统和安全’"><a href="#3-1-打开控制面板，点击‘系统和安全’" class="headerlink" title="3.1 打开控制面板，点击‘系统和安全’"></a>3.1 打开控制面板，点击‘系统和安全’</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513329194-7f778646-9038-4f2e-8506-a9ba54bf6d4e.png#align=left&display=inline&height=1448&margin=%5Bobject%20Object%5D&originHeight=1448&originWidth=3262&size=0&status=done&style=none&width=3262"></p><h3 id="3-2点击‘系统’之后，点击‘高级系统设置’"><a href="#3-2点击‘系统’之后，点击‘高级系统设置’" class="headerlink" title="3.2点击‘系统’之后，点击‘高级系统设置’"></a>3.2点击‘系统’之后，点击‘高级系统设置’</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513327807-a8cf76aa-aa0c-451f-8d1b-ab4fff544bc7.png#align=left&display=inline&height=1471&margin=%5Bobject%20Object%5D&originHeight=1471&originWidth=3067&size=0&status=done&style=none&width=3067"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513327861-8005ab64-5e9b-4361-9f2a-cc9a78373127.png#align=left&display=inline&height=1517&margin=%5Bobject%20Object%5D&originHeight=1517&originWidth=3254&size=0&status=done&style=none&width=3254"></p><h3 id="3-3点击环境变量，进入环境变量设置菜单"><a href="#3-3点击环境变量，进入环境变量设置菜单" class="headerlink" title="3.3点击环境变量，进入环境变量设置菜单"></a>3.3点击环境变量，进入环境变量设置菜单</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513329168-7c7da87b-c115-4331-bd88-505937b5de6f.png#align=left&display=inline&height=1393&margin=%5Bobject%20Object%5D&originHeight=1393&originWidth=1225&size=0&status=done&style=none&width=1225"></p><h5 id="选中系统变量中的-“path”，在-path-值里面输入："><a href="#选中系统变量中的-“path”，在-path-值里面输入：" class="headerlink" title="选中系统变量中的 “path”，在 path 值里面输入："></a>选中系统变量中的 “path”，在 path 值里面输入：</h5><h5 id="D-Mysql-5-7-mysql-bin"><a href="#D-Mysql-5-7-mysql-bin" class="headerlink" title="D:\Mysql-5.7\mysql\bin"></a>D:\Mysql-5.7\mysql\bin</h5><h5 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h5><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513327888-b52a9c7c-6b0f-4271-960c-aeb103a0875f.png#align=left&display=inline&height=1281&margin=%5Bobject%20Object%5D&originHeight=1281&originWidth=1338&size=0&status=done&style=none&width=1338"></p><h2 id="4-到-mysql-文件夹中创建-my-ini-文件并把以下内容粘贴进去"><a href="#4-到-mysql-文件夹中创建-my-ini-文件并把以下内容粘贴进去" class="headerlink" title="4. 到 mysql 文件夹中创建 my.ini 文件并把以下内容粘贴进去"></a>4. 到 mysql 文件夹中创建 my.ini 文件并把以下内容粘贴进去</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[mysql]<br><span class="hljs-comment">#设置mysql客户端默认字符集</span><br><span class="hljs-attribute">default-character-set</span>=utf8 <br>[mysqld]<br><span class="hljs-comment">#设置3306端口</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">port </span>= 3306<br> #设置mysql的安装目录<br><span class="hljs-attribute">basedir</span>=D:\\Mysql-5.7\mysql<br><span class="hljs-comment">#设置mysql数据库的数据的存放目录</span><br><span class="hljs-attribute">datadir</span>=D:\\Mysql-5.7\mysql\data<br><span class="hljs-comment">#允许最大连接数</span><br><span class="hljs-attribute">max_connections</span>=200<br><span class="hljs-comment">#服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-attribute">character-set-server</span>=utf8<br><span class="hljs-comment">#创建新表时将使用的默认存储引擎</span><br><span class="hljs-attribute">default-storage-engine</span>=INNODB<br><span class="hljs-comment">#开启查询缓存</span><br><span class="hljs-attribute">explicit_defaults_for_timestamp</span>=<span class="hljs-literal">true</span><br>skip-grant-tables<br></code></pre></td></tr></table></figure><h2 id="5-打开命令提示符（cmd）（以管理员身份运行）"><a href="#5-打开命令提示符（cmd）（以管理员身份运行）" class="headerlink" title="5. 打开命令提示符（cmd）（以管理员身份运行）"></a>5. 打开命令提示符（cmd）（以管理员身份运行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --initialize<br>mysqld install  <br>net start mysql<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513327860-3bb45b5e-534b-46c6-9529-8e46e5455f11.png#align=left&display=inline&height=801&margin=%5Bobject%20Object%5D&originHeight=801&originWidth=1216&size=0&status=done&style=none&width=1216"></p><h5 id="执行-mysql-uroot-p-命令，因为我们在-my-ini-文件里面添加了-skip-grant-tables。所以，密码可以输入任意值。"><a href="#执行-mysql-uroot-p-命令，因为我们在-my-ini-文件里面添加了-skip-grant-tables。所以，密码可以输入任意值。" class="headerlink" title="执行 mysql -uroot -p 命令，因为我们在 my.ini 文件里面添加了 skip-grant-tables。所以，密码可以输入任意值。"></a>执行 <code>mysql -uroot -p</code> 命令，因为我们在 my.ini 文件里面添加了 skip-grant-tables。所以，密码可以输入任意值。</h5><p><img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1590513328089-a41ef339-30f8-4ce9-938e-78fc2eba89e7.png#align=left&display=inline&height=823&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1708&size=0&status=done&style=none&width=1708"></p><h5 id="修改密码，刷新权限。"><a href="#修改密码，刷新权限。" class="headerlink" title="修改密码，刷新权限。"></a>修改密码，刷新权限。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use mysql; <span class="hljs-comment">#将数据库切换至mysql库</span><br>Database changed<br>mysql&gt; update user <span class="hljs-built_in">set</span> authentication_string=PASSWORD(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>; <span class="hljs-comment">#修改密码</span><br>Query OK, 1 row affected, 1 warning (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 1<br><br>mysql&gt; flush privileges;  <span class="hljs-comment">#刷新权限</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; quit; <span class="hljs-comment"># 退出 mysql 命令行</span><br></code></pre></td></tr></table></figure><h2 id="6-删除跳过密码验证设置"><a href="#6-删除跳过密码验证设置" class="headerlink" title="6. 删除跳过密码验证设置"></a>6. 删除跳过密码验证设置</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1575559002110-544c8485-373b-47ff-9a62-c91b16fc5763.png#align=left&display=inline&height=349&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1392&size=160755&status=done&style=none&width=696" alt="image.png"></p><p>开启非严格模式，不然不兼容5.6版本的部分语句，例如部分字段 <code>group by</code> 却在查询中查询全部字段，就会sql语句报错</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 非严格模式</span><br><span class="hljs-attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><h2 id="7-错误问题收集"><a href="#7-错误问题收集" class="headerlink" title="7. 错误问题收集"></a>7. 错误问题收集</h2><h3 id="7-1-mysqld-–initialize无反应"><a href="#7-1-mysqld-–initialize无反应" class="headerlink" title="7.1 mysqld –initialize无反应"></a>7.1 mysqld –initialize无反应</h3><p>我使用的powersehll安装的，没反应，然后使用cmd窗口管理员模式，提示找不到msvcp120.dll，msvcr120.dll缺失</p><p>解决办法：  <br>在微软官网上下载的 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784">Visual C++ Redistributable Packages for Visual Studio 2013</a></p><p>   <img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1575559295963-a5a0e1c1-cae8-4e39-9b05-d86b76b45edf.png#align=left&display=inline&height=181&margin=%5Bobject%20Object%5D&originHeight=181&originWidth=478&size=0&status=done&style=none&width=478"></p><p>参考：<a href="https://www.okcode.net/article/74194">https://www.okcode.net/article/74194</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/linux/others/%E9%80%9A%E8%BF%87SSH%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%B0%B7%E6%AD%8C%E4%BA%91(GCP)/"/>
    <url>/2021/07/12/linux/others/%E9%80%9A%E8%BF%87SSH%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%B0%B7%E6%AD%8C%E4%BA%91(GCP)/</url>
    
    <content type="html"><![CDATA[<h2 id="1-生成-ssh-密钥"><a href="#1-生成-ssh-密钥" class="headerlink" title="1.生成 ssh 密钥"></a>1.生成 ssh 密钥</h2><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578927854226-75f410a9-7a01-4b02-acd7-70c17616295b.png#align=left&display=inline&height=489&name=image.png&originHeight=677&originWidth=671&size=51233&status=done&style=none&width=484"  width="450px" height="450px"/></div><br/><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578927898262-d32374b2-243c-444b-9519-8ab39fefffde.png#align=left&display=inline&height=609&name=image.png&originHeight=609&originWidth=1255&size=115394&status=done&style=none&width=1255"/></div><br/><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578927922133-a519d804-164f-4277-aa0b-2d00094fd2a1.png#align=left&display=inline&height=484&name=image.png&originHeight=484&originWidth=549&size=47117&status=done&style=none&width=549"/></div><br/> <p>下一步</p><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578927984376-3266cfd9-4eb2-432f-9cb9-2f70fe3bc12c.png#align=left&display=inline&height=484&name=image.png&originHeight=484&originWidth=549&size=60880&status=done&style=none&width=549"/></div><br/><h2 id="2-连接-GCP"><a href="#2-连接-GCP" class="headerlink" title="2.连接 GCP"></a>2.连接 GCP</h2><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578928078781-aaba2cf7-7b2b-4c51-a467-dab5388659f0.png#align=left&display=inline&height=774&name=image.png&originHeight=774&originWidth=1919&size=79116&status=done&style=none&width=1919"/></div><br/><div align="center"> <img src="https://cdn.nlark.com/yuque/0/2020/png/631242/1578928136263-70040249-d847-4b38-a2ea-aba118a7a014.png#align=left&display=inline&height=249&name=image.png&originHeight=249&originWidth=847&size=15027&status=done&style=none&width=847"/></div><br/>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/software-install/docker/Linux%E5%AE%89%E8%A3%85docker-compose/"/>
    <url>/2021/07/12/software-install/docker/Linux%E5%AE%89%E8%A3%85docker-compose/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux安装docker-compose"><a href="#Linux安装docker-compose" class="headerlink" title="Linux安装docker-compose"></a>Linux安装docker-compose</h2><h3 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1. 操作系统"></a>1. 操作系统</h3><p>Centos 8</p><h3 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h3><p>“Docker compose是一个非常有用的软件包，它使我们可以管理多容器应用程序”<br>可以快速启动例如Mysql，MongoDB，Apache等隔离独立坏境</p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dnf install curl -y<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun ~]<span class="hljs-comment"># curl -L &quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100   638  100   638    0     0    547      0  0:00:01  0:00:01 --:--:--   547<br>100 16.2M  100 16.2M    0     0   307k      0  0:00:54  0:00:54 --:--:--  955k<br></code></pre></td></tr></table></figure><p>可执行权限设置为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>运行命令来验证docker compose版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker-compose --version<br>docker-compose version 1.25.0, build 0a186604<br></code></pre></td></tr></table></figure><p>安装完成了哦~</p><h3 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动（后台启动）</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/software-install/docker/CentOS8%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2021/07/12/software-install/docker/CentOS8%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS8安装Docker"><a href="#CentOS8安装Docker" class="headerlink" title="CentOS8安装Docker"></a>CentOS8安装Docker</h1><h2 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1. 操作系统"></a>1. 操作系统</h2><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsb_release -a<br></code></pre></td></tr></table></figure><p>这里是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun ~]<span class="hljs-comment"># lsb_release -a</span><br>LSB Version::core-4.1-amd64:core-4.1-noarch<br>Distributor ID:CentOS<br>Description:CentOS Linux release 8.1.1911 (Core) <br>Release:8.1.1911<br>Codename:Core<br></code></pre></td></tr></table></figure><h2 id="2-卸载旧版本"><a href="#2-卸载旧版本" class="headerlink" title="2. 卸载旧版本"></a>2. 卸载旧版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure><h2 id="3-使用存储库安装"><a href="#3-使用存储库安装" class="headerlink" title="3. 使用存储库安装"></a>3. 使用存储库安装</h2><h3 id="3-1-安装-yum-utils-软件包"><a href="#3-1-安装-yum-utils-软件包" class="headerlink" title="3.1 安装 yum-utils 软件包"></a>3.1 安装 <code>yum-utils</code> 软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum install -y yum-utils<br><br>$ sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="3-2-安装DOCKER引擎"><a href="#3-2-安装DOCKER引擎" class="headerlink" title="3.2 安装DOCKER引擎"></a>3.2 安装DOCKER引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>报错，error</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: <br> Problem: package docker-ce-3:19.03.9-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed<br>  - cannot install the best candidate <span class="hljs-keyword">for</span> the job<br>  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded<br>  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded<br>  - package containerd.io-1.2.13-3.2.el7.x86_64 is excluded<br>  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded<br>  - package containerd.io-1.2.2-3.el7.x86_64 is excluded<br>  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded<br>  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded<br>  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded<br>(try to add <span class="hljs-string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="hljs-string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)<br></code></pre></td></tr></table></figure><p>手动安装最新的可用containerd.io软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><p>ps: 因为containerd.io软件包未作为docker-ce的依赖项安装，因此从系统卸载docker-ce时，不会自动将其删除<br>解决了报错后继续执行上面的安装语句<br>然后会出现提示您接受GPG密钥, 选 y</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Importing GPG key 0x621E9F35:<br> Userid     : <span class="hljs-string">&quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;</span><br> Fingerprint: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35<br> From       : https://download.docker.com/linux/centos/gpg<br>Is this ok [y/N]: y<br></code></pre></td></tr></table></figure><p>输出如下，安装完毕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">Running transaction<br>  Preparing        :                                                                                                                                                                   1/1 <br>  Installing       : docker-ce-cli-1:19.03.9-3.el7.x86_64                                                                                                                              1/3 <br>  Running scriptlet: docker-ce-cli-1:19.03.9-3.el7.x86_64                                                                                                                              1/3 <br>  Running scriptlet: libcgroup-0.41-19.el8.x86_64                                                                                                                                      2/3 <br>  Installing       : libcgroup-0.41-19.el8.x86_64                                                                                                                                      2/3 <br>  Running scriptlet: libcgroup-0.41-19.el8.x86_64                                                                                                                                      2/3 <br>  Installing       : docker-ce-3:19.03.9-3.el7.x86_64                                                                                                                                  3/3 <br>  Running scriptlet: docker-ce-3:19.03.9-3.el7.x86_64                                                                                                                                  3/3 <br>  Verifying        : libcgroup-0.41-19.el8.x86_64                                                                                                                                      1/3 <br>  Verifying        : docker-ce-3:19.03.9-3.el7.x86_64                                                                                                                                  2/3 <br>  Verifying        : docker-ce-cli-1:19.03.9-3.el7.x86_64                                                                                                                              3/3 <br><br>Installed:<br>  docker-ce-3:19.03.9-3.el7.x86_64                              docker-ce-cli-1:19.03.9-3.el7.x86_64                              libcgroup-0.41-19.el8.x86_64                             <br><br>Complete!<br></code></pre></td></tr></table></figure><h2 id="4-启动Docker"><a href="#4-启动Docker" class="headerlink" title="4. 启动Docker"></a>4. 启动Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl start docker<br></code></pre></td></tr></table></figure><h2 id="5-运行hello-world-测试"><a href="#5-运行hello-world-测试" class="headerlink" title="5. 运行hello world 测试"></a>5. 运行hello world 测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过运行hello-world 映像来验证是否正确安装了Docker Engine</span><br>$ sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aliyun ~]<span class="hljs-comment"># sudo docker run hello-world</span><br>Unable to find image <span class="hljs-string">&#x27;hello-world:latest&#x27;</span> locally<br>latest: Pulling from library/hello-world<br>0e03bdcc26d7: Pull complete <br>Digest: sha256:6a65f928fb91fcfbc963f7aa6d57c8eeb426ad9a20c7ee045538ef34847f44f1<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latest<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash<br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><p>OK，到此安装完毕哦</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/12/software-install/docker/Centos7%E5%AE%89%E8%A3%85docker/"/>
    <url>/2021/07/12/software-install/docker/Centos7%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Centos7-上安装-docker"><a href="#Centos7-上安装-docker" class="headerlink" title="Centos7 上安装 docker"></a>Centos7 上安装 docker</h1><p>Docker 从 1.13 版本之后采用时间线的方式作为版本号，分为社区版 CE 和企业版 EE。</p><p>社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><p>社区版按照 stable 和 edge 两种方式发布，每个季度更新 stable 版本，如 17.06，17.09；每个月份更新 edge 版本，如 17.09，17.10。</p><h2 id="一、安装-docker"><a href="#一、安装-docker" class="headerlink" title="一、安装 docker"></a>一、安装 docker</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 CentOS 版本是否支持 Docker 。</p><p>通过 **uname -r **命令查看你当前的内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">uname</span> -r</span><br></code></pre></td></tr></table></figure><p>2、使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo yum update<br></code></pre></td></tr></table></figure><p>3、卸载旧版本 (如果安装过旧版本的话)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo yum <span class="hljs-built_in">remove</span> docker  docker-common docker-selinux docker-engine<br></code></pre></td></tr></table></figure><p>4、安装需要的软件包， yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo yum install -y yum-utils device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> lvm2</span><br></code></pre></td></tr></table></figure><p>5、设置 yum 源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo yum-config-manager --add-repo https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>国内使用阿里云: yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></strong></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1576770614552-936024d5-6339-4278-8d7e-80737853f9d8.png#align=left&display=inline&height=86&margin=%5Bobject%20Object%5D&originHeight=86&originWidth=988&size=0&status=done&style=none&width=988"></p><p>6、可以查看所有仓库中所有 docker 版本，并选择特定版本安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum list docker<span class="hljs-literal">-ce</span> <span class="hljs-literal">--showduplicates</span> | <span class="hljs-built_in">sort</span> <span class="hljs-literal">-r</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1576770614606-f2746433-386a-4199-ad2f-5e32deb46680.png#align=left&display=inline&height=264&margin=%5Bobject%20Object%5D&originHeight=264&originWidth=715&size=0&status=done&style=none&width=715"></p><p>7、安装 docker</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo yum <span class="hljs-keyword">install</span> docker-ce  <span class="hljs-comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span><br>$ sudo yum <span class="hljs-keyword">install</span> &lt;FQPN&gt;  <span class="hljs-comment"># 例如：sudo yum install docker-ce-17.12.0.ce</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1576770614596-76c1ca11-4195-418e-9877-50f1a2a56644.png#align=left&display=inline&height=266&margin=%5Bobject%20Object%5D&originHeight=266&originWidth=951&size=0&status=done&style=none&width=951"></p><p>8、启动并加入开机启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo systemctl <span class="hljs-built_in">start</span> docker<br><span class="hljs-variable">$</span> sudo systemctl enable docker<br></code></pre></td></tr></table></figure><p>9、验证安装是否成功 (有 client 和 service 两部分表示 docker 安装启动都成功了)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/631242/1576770614775-28325850-fb5e-479a-abf1-9bc7bd25c266.png#align=left&display=inline&height=288&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=432&size=0&status=done&style=none&width=432"></p><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><p>1、因为之前已经安装过旧版本的 docker，在安装的时候报错如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Transaction</span> check error:<br>  <span class="hljs-attribute">file</span> /usr/bin/docker from install of docker-ce-<span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos.x86_64 conflicts with file from package docker-common-<span class="hljs-number">2</span>:<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">68</span>.gitec8512b.el7.centos.x86_64<br>  <span class="hljs-attribute">file</span> /usr/bin/docker-containerd from install of docker-ce-<span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos.x86_64 conflicts with file from package docker-common-<span class="hljs-number">2</span>:<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">68</span>.gitec8512b.el7.centos.x86_64<br>  <span class="hljs-attribute">file</span> /usr/bin/docker-containerd-shim from install of docker-ce-<span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos.x86_64 conflicts with file from package docker-common-<span class="hljs-number">2</span>:<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">68</span>.gitec8512b.el7.centos.x86_64<br>  <span class="hljs-attribute">file</span> /usr/bin/dockerd from install of docker-ce-<span class="hljs-number">17</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">1</span>.el7.centos.x86_64 conflicts with file from package docker-common-<span class="hljs-number">2</span>:<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">68</span>.gitec8512b.el7.centos.x86_64<br></code></pre></td></tr></table></figure><p>2、卸载旧版本的包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ sudo yum erase docker-common-<span class="hljs-number">2</span>:<span class="hljs-number">1.12</span>.<span class="hljs-number">6</span>-<span class="hljs-number">68</span><span class="hljs-selector-class">.gitec8512b</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.centos</span>.x86_64<br></code></pre></td></tr></table></figure><p>推荐一种删除 docker 的方法：</p><p>| 1<br>2<br>3<br>4 | <code>yum remove docker docker-common docker-selinux docker-engine -y</code></p><p><code>/etc/systemd -name </code>  <code>&#39;*docker*&#39;</code>   <code>-exec rm -f &#123;&#125; ; </code></p><p><code>find /etc/systemd -name </code>  <code>&#39;*docker*&#39;</code>   <code>-exec rm -f &#123;&#125; \; </code></p><p><code>find /lib/systemd -name </code>  <code>&#39;*docker*&#39;</code>   <code>-exec rm -f &#123;&#125; \; </code> |<br>| — | — |</p><p>3、再次安装 docker</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo yum <span class="hljs-keyword">install</span> docker-ce<br></code></pre></td></tr></table></figure><h2 id="更新和卸载-Docker"><a href="#更新和卸载-Docker" class="headerlink" title="更新和卸载 Docker"></a>更新和卸载 Docker</h2><p>使用 yum 管理，更新和卸载都很方便。</p><h3 id="更新-Docker-CE"><a href="#更新-Docker-CE" class="headerlink" title="更新 Docker CE"></a>更新 Docker CE</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum <span class="hljs-keyword">update</span> docker-<span class="hljs-keyword">ce</span><br></code></pre></td></tr></table></figure><h3 id="卸载-Docker-CE"><a href="#卸载-Docker-CE" class="headerlink" title="卸载 Docker CE"></a>卸载 Docker CE</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo yum <span class="hljs-built_in">remove</span> docker-ce<br></code></pre></td></tr></table></figure><h3 id="删除本地文件"><a href="#删除本地文件" class="headerlink" title="删除本地文件"></a>删除本地文件</h3><p>注意，docker 的本地文件，包括镜像(images), 容器(containers), 存储卷(volumes)等，都需要手工删除。默认目录存储在 <code>/var/lib/docker</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker</span><br></code></pre></td></tr></table></figure><p>原文地址 <a href="https://blog.csdn.net/shadow_zed/article/details/85557922">https://blog.csdn.net/shadow_zed&#x2F;article&#x2F;details&#x2F;85557922</a><br>**</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
